

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Aug 16 19:34:36 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F88
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F88 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  0105                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  0105                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0006                     _PORTBbits	set	6
   168  0005                     _PORTAbits	set	5
   169  0017                     _CCP1CON	set	23
   170  001E                     _ADRESH	set	30
   171  000B                     _INTCON	set	11
   172  000C                     _PIR1	set	12
   173  0012                     _T2CON	set	18
   174  000E                     _TMR1L	set	14
   175  000F                     _TMR1H	set	15
   176  0010                     _T1CON	set	16
   177  0001                     _TMR0	set	1
   178  001F                     _ADCON0	set	31
   179  0006                     _PORTB	set	6
   180  0005                     _PORTA	set	5
   181  0058                     _RBIF	set	88
   182  005B                     _RBIE	set	91
   183  0066                     _ADIF	set	102
   184  0061                     _TMR2IF	set	97
   185  0060                     _TMR1IF	set	96
   186  005A                     _TMR0IF	set	90
   187  005D                     _TMR0IE	set	93
   188  009E                     _ADRESL	set	158
   189  008C                     _PIE1	set	140
   190  0092                     _PR2	set	146
   191  0081                     _OPTION_REG	set	129
   192  009F                     _ADCON1	set	159
   193  009B                     _ANSEL	set	155
   194  0086                     _TRISB	set	134
   195  0085                     _TRISA	set	133
   196  008F                     _OSCCON	set	143
   197  0466                     _ADIE	set	1126
   198  0461                     _TMR2IE	set	1121
   199  0460                     _TMR1IE	set	1120
   200  0105                     _WDTCON	set	261
   201                           
   202                           	psect	strings
   203  0621                     __pstrings:
   204  0621                     stringtab:
   205  0621                     __stringtab:
   206                           
   207                           ;	String table - string pointers are 1 byte each
   208  0621  1BFF               	btfsc	btemp+1,7
   209  0622  2E2B               	ljmp	stringcode
   210  0623  1383               	bcf	3,7
   211  0624  187F               	btfsc	btemp+1,0
   212  0625  1783               	bsf	3,7
   213  0626  0800               	movf	0,w
   214  0627  0A84               	incf	4,f
   215  0628  1903               	skipnz
   216  0629  0AFF               	incf	btemp+1,f
   217  062A  0008               	return
   218  062B                     stringcode:
   219  062B                     stringdir:
   220  062B  3006               	movlw	high stringdir
   221  062C  008A               	movwf	10
   222  062D  0804               	movf	4,w
   223  062E  0A84               	incf	4,f
   224  062F  0782               	addwf	2,f
   225  0630                     __stringbase:
   226  0630  3400               	retlw	0
   227  0631                     __end_of__stringtab:
   228  0631                     STR_1:
   229  0631  3420               	retlw	32	;' '
   230  0632  3447               	retlw	71	;'G'
   231  0633  3445               	retlw	69	;'E'
   232  0634  3449               	retlw	73	;'I'
   233  0635  3447               	retlw	71	;'G'
   234  0636  3445               	retlw	69	;'E'
   235  0637  3452               	retlw	82	;'R'
   236  0638  3420               	retlw	32	;' '
   237  0639  3443               	retlw	67	;'C'
   238  063A  344F               	retlw	79	;'O'
   239  063B  3455               	retlw	85	;'U'
   240  063C  344E               	retlw	78	;'N'
   241  063D  3454               	retlw	84	;'T'
   242  063E  3445               	retlw	69	;'E'
   243  063F  3452               	retlw	82	;'R'
   244  0640  3400               	retlw	0
   245  0641                     STR_4:
   246  0641  3475               	retlw	117	;'u'
   247  0642  3453               	retlw	83	;'S'
   248  0643  342F               	retlw	47	;'/'
   249  0644  3468               	retlw	104	;'h'
   250  0645  3420               	retlw	32	;' '
   251  0646  3420               	retlw	32	;' '
   252  0647  3420               	retlw	32	;' '
   253  0648  3400               	retlw	0
   254  0649                     STR_3:
   255  0649  3443               	retlw	67	;'C'
   256  064A  3450               	retlw	80	;'P'
   257  064B  344D               	retlw	77	;'M'
   258  064C  3420               	retlw	32	;' '
   259  064D  3400               	retlw	0
   260  064E                     STR_2:
   261  064E  3456               	retlw	86	;'V'
   262  064F  3430               	retlw	48	;'0'
   263  0650  342E               	retlw	46	;'.'
   264  0651  3431               	retlw	49	;'1'
   265  0652  3400               	retlw	0
   266                           
   267                           	psect	cinit
   268  000D                     start_initialization:	
   269                           ; #config settings
   270                           
   271  000D                     __initialization:
   272                           
   273                           ; Clear objects allocated to BANK0
   274  000D  1283               	bcf	3,5	;RP0=0, select bank0
   275  000E  1303               	bcf	3,6	;RP1=0, select bank0
   276  000F  01BB               	clrf	__pbssBANK0& (0+127)
   277  0010  01BC               	clrf	(__pbssBANK0+1)& (0+127)
   278  0011  01BD               	clrf	(__pbssBANK0+2)& (0+127)
   279  0012  01BE               	clrf	(__pbssBANK0+3)& (0+127)
   280  0013  01BF               	clrf	(__pbssBANK0+4)& (0+127)
   281  0014                     end_of_initialization:	
   282                           ;End of C runtime variable initialization code
   283                           
   284  0014                     __end_of__initialization:
   285  0014  0183               	clrf	3
   286  0015  118A  2817         	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	bssBANK0
   289  003B                     __pbssBANK0:
   290  003B                     _hvfb:
   291  003B                     	ds	2
   292  003D                     _vbatt:
   293  003D                     	ds	2
   294  003F                     _events:
   295  003F                     	ds	1
   296                           
   297                           	psect	cstackCOMMON
   298  0070                     __pcstackCOMMON:
   299  0070                     ?_lcd_init:
   300  0070                     ?_lcd_clear:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_main:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_isr:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ??_isr:	
   310                           ; 1 bytes @ 0x0
   311                           
   312                           
   313                           ; 1 bytes @ 0x0
   314  0070                     	ds	3
   315  0073                     ?_lcd_write_nibble:
   316  0073                     ?_numDigits:	
   317                           ; 1 bytes @ 0x3
   318                           
   319  0073                     ?___bmul:	
   320                           ; 1 bytes @ 0x3
   321                           
   322  0073                     ?___awmod:	
   323                           ; 1 bytes @ 0x3
   324                           
   325  0073                     ?___lwdiv:	
   326                           ; 2 bytes @ 0x3
   327                           
   328  0073                     ?___lwmod:	
   329                           ; 2 bytes @ 0x3
   330                           
   331  0073                     lcd_write_nibble@RS:	
   332                           ; 2 bytes @ 0x3
   333                           
   334  0073                     ___bmul@multiplicand:	
   335                           ; 1 bytes @ 0x3
   336                           
   337  0073                     numDigits@num:	
   338                           ; 1 bytes @ 0x3
   339                           
   340  0073                     ___awmod@divisor:	
   341                           ; 2 bytes @ 0x3
   342                           
   343  0073                     ___lwdiv@divisor:	
   344                           ; 2 bytes @ 0x3
   345                           
   346  0073                     ___lwmod@divisor:	
   347                           ; 2 bytes @ 0x3
   348                           
   349                           
   350                           ; 2 bytes @ 0x3
   351  0073                     	ds	1
   352  0074                     ??_lcd_write_nibble:
   353  0074                     ??___bmul:	
   354                           ; 1 bytes @ 0x4
   355                           
   356                           
   357                           ; 1 bytes @ 0x4
   358  0074                     	ds	1
   359  0075                     ??_numDigits:
   360  0075                     ___bmul@product:	
   361                           ; 1 bytes @ 0x5
   362                           
   363  0075                     ___awmod@dividend:	
   364                           ; 1 bytes @ 0x5
   365                           
   366  0075                     ___lwdiv@dividend:	
   367                           ; 2 bytes @ 0x5
   368                           
   369  0075                     ___lwmod@dividend:	
   370                           ; 2 bytes @ 0x5
   371                           
   372                           
   373                           ; 2 bytes @ 0x5
   374  0075                     	ds	1
   375  0076                     lcd_write_nibble@byteIn:
   376  0076                     ___bmul@multiplier:	
   377                           ; 1 bytes @ 0x6
   378                           
   379                           
   380                           ; 1 bytes @ 0x6
   381  0076                     	ds	1
   382  0077                     ??___awmod:
   383  0077                     ??___lwdiv:	
   384                           ; 1 bytes @ 0x7
   385                           
   386  0077                     ??___lwmod:	
   387                           ; 1 bytes @ 0x7
   388                           
   389                           
   390                           ; 1 bytes @ 0x7
   391  0077                     	ds	1
   392  0078                     ___awmod@counter:
   393  0078                     ___lwmod@counter:	
   394                           ; 1 bytes @ 0x8
   395                           
   396  0078                     ___lwdiv@quotient:	
   397                           ; 1 bytes @ 0x8
   398                           
   399                           
   400                           ; 2 bytes @ 0x8
   401  0078                     	ds	1
   402  0079                     ___awmod@sign:
   403                           
   404                           ; 1 bytes @ 0x9
   405  0079                     	ds	1
   406  007A                     ?_lcd_write_byte:
   407  007A                     lcd_write_byte@RS:	
   408                           ; 1 bytes @ 0xA
   409                           
   410  007A                     ___lwdiv@counter:	
   411                           ; 1 bytes @ 0xA
   412                           
   413                           
   414                           ; 1 bytes @ 0xA
   415  007A                     	ds	1
   416  007B                     ??_lcd_write_string:
   417                           
   418                           	psect	cstackBANK0
   419  0020                     __pcstackBANK0:	
   420                           ; 1 bytes @ 0xB
   421                           
   422  0020                     ??_lcd_write_byte:
   423  0020                     ?_intToString:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0020                     intToString@number:	
   427                           ; 1 bytes @ 0x0
   428                           
   429                           
   430                           ; 2 bytes @ 0x0
   431  0020                     	ds	2
   432  0022                     lcd_write_byte@upperNibble:
   433  0022                     intToString@divisor:	
   434                           ; 1 bytes @ 0x2
   435                           
   436                           
   437                           ; 2 bytes @ 0x2
   438  0022                     	ds	1
   439  0023                     lcd_write_byte@lowerNibble:
   440                           
   441                           ; 1 bytes @ 0x3
   442  0023                     	ds	1
   443  0024                     lcd_write_byte@byteIn:
   444  0024                     intToString@dest:	
   445                           ; 1 bytes @ 0x4
   446                           
   447                           
   448                           ; 1 bytes @ 0x4
   449  0024                     	ds	1
   450  0025                     ??_lcd_init:
   451  0025                     ?_lcd_write_string:	
   452                           ; 1 bytes @ 0x5
   453                           
   454  0025                     ?_lcd_cursor:	
   455                           ; 1 bytes @ 0x5
   456                           
   457  0025                     ??_lcd_clear:	
   458                           ; 1 bytes @ 0x5
   459                           
   460  0025                     ??_intToString:	
   461                           ; 1 bytes @ 0x5
   462                           
   463  0025                     lcd_cursor@column:	
   464                           ; 1 bytes @ 0x5
   465                           
   466  0025                     lcd_write_string@stringArray:	
   467                           ; 1 bytes @ 0x5
   468                           
   469                           
   470                           ; 2 bytes @ 0x5
   471  0025                     	ds	1
   472  0026                     ??_lcd_cursor:
   473                           
   474                           ; 1 bytes @ 0x6
   475  0026                     	ds	2
   476  0028                     lcd_cursor@row:
   477                           
   478                           ; 1 bytes @ 0x8
   479  0028                     	ds	1
   480  0029                     lcd_cursor@position:
   481                           
   482                           ; 1 bytes @ 0x9
   483  0029                     	ds	1
   484  002A                     intToString@j:
   485                           
   486                           ; 1 bytes @ 0xA
   487  002A                     	ds	1
   488  002B                     intToString@whole_portion:
   489                           
   490                           ; 2 bytes @ 0xB
   491  002B                     	ds	2
   492  002D                     intToString@digits_decimal:
   493                           
   494                           ; 1 bytes @ 0xD
   495  002D                     	ds	1
   496  002E                     intToString@i:
   497                           
   498                           ; 1 bytes @ 0xE
   499  002E                     	ds	1
   500  002F                     intToString@k:
   501                           
   502                           ; 1 bytes @ 0xF
   503  002F                     	ds	1
   504  0030                     intToString@digits_whole:
   505                           
   506                           ; 1 bytes @ 0x10
   507  0030                     	ds	1
   508  0031                     ??_main:
   509                           
   510                           ; 1 bytes @ 0x11
   511  0031                     	ds	3
   512  0034                     main@numStr:
   513                           
   514                           ; 6 bytes @ 0x14
   515  0034                     	ds	6
   516  003A                     main@i:
   517                           
   518                           ; 1 bytes @ 0x1A
   519  003A                     	ds	1
   520                           
   521                           	psect	maintext
   522  0017                     __pmaintext:	
   523 ;;
   524 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   525 ;;
   526 ;; *************** function _main *****************
   527 ;; Defined at:
   528 ;;		line 87 in file "main.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;  numStr          6   20[BANK0 ] unsigned char [6]
   533 ;;  i               1   26[BANK0 ] unsigned char 
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : B00/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   543 ;;      Params:         0       0       0       0       0
   544 ;;      Locals:         0       7       0       0       0
   545 ;;      Temps:          0       3       0       0       0
   546 ;;      Totals:         0      10       0       0       0
   547 ;;Total ram usage:       10 bytes
   548 ;; Hardware stack levels required when called: 4
   549 ;; This function calls:
   550 ;;		_intToString
   551 ;;		_lcd_clear
   552 ;;		_lcd_cursor
   553 ;;		_lcd_init
   554 ;;		_lcd_write_byte
   555 ;;		_lcd_write_string
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           
   562                           ;psect for function _main
   563  0017                     _main:
   564  0017                     l1612:	
   565                           ;incstack = 0
   566                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   567                           
   568                           
   569                           ;main.c: 89:     char numStr[6];;main.c: 92:     OSCCON = 0b01111100;
   570  0017  307C               	movlw	124
   571  0018  1683               	bsf	3,5	;RP0=1, select bank1
   572  0019  1303               	bcf	3,6	;RP1=0, select bank1
   573  001A  008F               	movwf	15	;volatile
   574                           
   575                           ;main.c: 94:     PORTA = 0b00000100;
   576  001B  3004               	movlw	4
   577  001C  1283               	bcf	3,5	;RP0=0, select bank0
   578  001D  1303               	bcf	3,6	;RP1=0, select bank0
   579  001E  0085               	movwf	5	;volatile
   580                           
   581                           ;main.c: 95:     TRISA = 0b00100011;
   582  001F  3023               	movlw	35
   583  0020  1683               	bsf	3,5	;RP0=1, select bank1
   584  0021  1303               	bcf	3,6	;RP1=0, select bank1
   585  0022  0085               	movwf	5	;volatile
   586  0023                     l1614:
   587                           
   588                           ;main.c: 96:     PORTB = 0b00000000;
   589  0023  1283               	bcf	3,5	;RP0=0, select bank0
   590  0024  1303               	bcf	3,6	;RP1=0, select bank0
   591  0025  0186               	clrf	6	;volatile
   592  0026                     l1616:
   593                           
   594                           ;main.c: 97:     TRISB = 0b10100000;
   595  0026  30A0               	movlw	160
   596  0027  1683               	bsf	3,5	;RP0=1, select bank1
   597  0028  1303               	bcf	3,6	;RP1=0, select bank1
   598  0029  0086               	movwf	6	;volatile
   599  002A                     l1618:
   600                           
   601                           ;main.c: 99:     ANSEL = 0b00000011;
   602  002A  3003               	movlw	3
   603  002B  009B               	movwf	27	;volatile
   604  002C                     l1620:
   605                           
   606                           ;main.c: 100:     ADCON1 = 0b10000000;
   607  002C  3080               	movlw	128
   608  002D  009F               	movwf	31	;volatile
   609  002E                     l1622:
   610                           
   611                           ;main.c: 101:     ADCON0 = 0b11000001;
   612  002E  30C1               	movlw	193
   613  002F  1283               	bcf	3,5	;RP0=0, select bank0
   614  0030  1303               	bcf	3,6	;RP1=0, select bank0
   615  0031  009F               	movwf	31	;volatile
   616  0032                     l1624:
   617                           
   618                           ;main.c: 103:     OPTION_REG = 0b11000010;
   619  0032  30C2               	movlw	194
   620  0033  1683               	bsf	3,5	;RP0=1, select bank1
   621  0034  1303               	bcf	3,6	;RP1=0, select bank1
   622  0035  0081               	movwf	1	;volatile
   623                           
   624                           ;main.c: 104:     TMR0 = 0;
   625  0036  1283               	bcf	3,5	;RP0=0, select bank0
   626  0037  1303               	bcf	3,6	;RP1=0, select bank0
   627  0038  0181               	clrf	1	;volatile
   628  0039                     l1626:
   629                           
   630                           ;main.c: 106:     T1CON = 0b00110001;
   631  0039  3031               	movlw	49
   632  003A  0090               	movwf	16	;volatile
   633  003B                     l1628:
   634                           
   635                           ;main.c: 107:     TMR1H = 0x9E;
   636  003B  309E               	movlw	158
   637  003C  008F               	movwf	15	;volatile
   638  003D                     l1630:
   639                           
   640                           ;main.c: 108:     TMR1L = 0x40;
   641  003D  3040               	movlw	64
   642  003E  008E               	movwf	14	;volatile
   643  003F                     l1632:
   644                           
   645                           ;main.c: 110:     WDTCON = 0b00000101;
   646  003F  3005               	movlw	5
   647  0040  1283               	bcf	3,5	;RP0=0, select bank2
   648  0041  1703               	bsf	3,6	;RP1=1, select bank2
   649  0042  0085               	movwf	5	;volatile
   650  0043                     l1634:
   651                           
   652                           ;main.c: 112:     T2CON = 0b00000100;
   653  0043  3004               	movlw	4
   654  0044  1283               	bcf	3,5	;RP0=0, select bank0
   655  0045  1303               	bcf	3,6	;RP1=0, select bank0
   656  0046  0092               	movwf	18	;volatile
   657  0047                     l1636:
   658                           
   659                           ;main.c: 113:     PR2 = 80;
   660  0047  3050               	movlw	80
   661  0048  1683               	bsf	3,5	;RP0=1, select bank1
   662  0049  1303               	bcf	3,6	;RP1=0, select bank1
   663  004A  0092               	movwf	18	;volatile
   664                           
   665                           ;main.c: 115:     PIR1 = 0b00000000;
   666  004B  1283               	bcf	3,5	;RP0=0, select bank0
   667  004C  1303               	bcf	3,6	;RP1=0, select bank0
   668  004D  018C               	clrf	12	;volatile
   669  004E                     l1638:
   670                           
   671                           ;main.c: 116:     PIE1 = 0b01000001;
   672  004E  3041               	movlw	65
   673  004F  1683               	bsf	3,5	;RP0=1, select bank1
   674  0050  1303               	bcf	3,6	;RP1=0, select bank1
   675  0051  008C               	movwf	12	;volatile
   676  0052                     l1640:
   677                           
   678                           ;main.c: 117:     INTCON = 0b11100000;
   679  0052  30E0               	movlw	224
   680  0053  008B               	movwf	11	;volatile
   681  0054                     l1642:
   682                           
   683                           ;main.c: 120:     lcd_init();
   684  0054  118A  2488  118A   	fcall	_lcd_init
   685  0057                     l1644:
   686                           
   687                           ;main.c: 121:     lcd_write_string(" GEIGER COUNTER");
   688  0057  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   689  0058  1283               	bcf	3,5	;RP0=0, select bank0
   690  0059  1303               	bcf	3,6	;RP1=0, select bank0
   691  005A  00A5               	movwf	lcd_write_string@stringArray
   692  005B  3080               	movlw	128
   693  005C  00A6               	movwf	lcd_write_string@stringArray+1
   694  005D  118A  26AF  118A   	fcall	_lcd_write_string
   695  0060                     l1646:
   696                           
   697                           ;main.c: 122:     lcd_cursor(1,6);
   698  0060  3006               	movlw	6
   699  0061  1283               	bcf	3,5	;RP0=0, select bank0
   700  0062  1303               	bcf	3,6	;RP1=0, select bank0
   701  0063  00B1               	movwf	??_main
   702  0064  0831               	movf	??_main,w
   703  0065  00A5               	movwf	lcd_cursor@column
   704  0066  3001               	movlw	1
   705  0067  118A  2403  118A   	fcall	_lcd_cursor
   706  006A                     l1648:
   707                           
   708                           ;main.c: 123:     lcd_write_string("V0.1");
   709  006A  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   710  006B  1283               	bcf	3,5	;RP0=0, select bank0
   711  006C  1303               	bcf	3,6	;RP1=0, select bank0
   712  006D  00A5               	movwf	lcd_write_string@stringArray
   713  006E  3080               	movlw	128
   714  006F  00A6               	movwf	lcd_write_string@stringArray+1
   715  0070  118A  26AF  118A   	fcall	_lcd_write_string
   716  0073                     l1650:
   717                           
   718                           ;main.c: 196:     lcd_write_byte(0x40, 0);
   719  0073  01FA               	clrf	lcd_write_byte@RS
   720  0074  3040               	movlw	64
   721  0075  118A  2653  118A   	fcall	_lcd_write_byte
   722  0078                     l1652:
   723                           
   724                           ;main.c: 197:     lcd_write_byte(0b00110, 1);
   725  0078  01FA               	clrf	lcd_write_byte@RS
   726  0079  0AFA               	incf	lcd_write_byte@RS,f
   727  007A  3006               	movlw	6
   728  007B  118A  2653  118A   	fcall	_lcd_write_byte
   729  007E                     l1654:
   730                           
   731                           ;main.c: 198:     lcd_write_byte(0b01001, 1);
   732  007E  01FA               	clrf	lcd_write_byte@RS
   733  007F  0AFA               	incf	lcd_write_byte@RS,f
   734  0080  3009               	movlw	9
   735  0081  118A  2653  118A   	fcall	_lcd_write_byte
   736  0084                     l1656:
   737                           
   738                           ;main.c: 199:     lcd_write_byte(0b01001, 1);
   739  0084  01FA               	clrf	lcd_write_byte@RS
   740  0085  0AFA               	incf	lcd_write_byte@RS,f
   741  0086  3009               	movlw	9
   742  0087  118A  2653  118A   	fcall	_lcd_write_byte
   743  008A                     l1658:
   744                           
   745                           ;main.c: 200:     lcd_write_byte(0b01001, 1);
   746  008A  01FA               	clrf	lcd_write_byte@RS
   747  008B  0AFA               	incf	lcd_write_byte@RS,f
   748  008C  3009               	movlw	9
   749  008D  118A  2653  118A   	fcall	_lcd_write_byte
   750  0090                     l1660:
   751                           
   752                           ;main.c: 201:     lcd_write_byte(0b01001, 1);
   753  0090  01FA               	clrf	lcd_write_byte@RS
   754  0091  0AFA               	incf	lcd_write_byte@RS,f
   755  0092  3009               	movlw	9
   756  0093  118A  2653  118A   	fcall	_lcd_write_byte
   757  0096                     l1662:
   758                           
   759                           ;main.c: 202:     lcd_write_byte(0b01001, 1);
   760  0096  01FA               	clrf	lcd_write_byte@RS
   761  0097  0AFA               	incf	lcd_write_byte@RS,f
   762  0098  3009               	movlw	9
   763  0099  118A  2653  118A   	fcall	_lcd_write_byte
   764  009C                     l1664:
   765                           
   766                           ;main.c: 203:     lcd_write_byte(0b01001, 1);
   767  009C  01FA               	clrf	lcd_write_byte@RS
   768  009D  0AFA               	incf	lcd_write_byte@RS,f
   769  009E  3009               	movlw	9
   770  009F  118A  2653  118A   	fcall	_lcd_write_byte
   771  00A2                     l1666:
   772                           
   773                           ;main.c: 204:     lcd_write_byte(0b01111, 1);
   774  00A2  01FA               	clrf	lcd_write_byte@RS
   775  00A3  0AFA               	incf	lcd_write_byte@RS,f
   776  00A4  300F               	movlw	15
   777  00A5  118A  2653  118A   	fcall	_lcd_write_byte
   778  00A8                     l1668:
   779                           
   780                           ;main.c: 207:     lcd_write_byte(0b00110, 1);
   781  00A8  01FA               	clrf	lcd_write_byte@RS
   782  00A9  0AFA               	incf	lcd_write_byte@RS,f
   783  00AA  3006               	movlw	6
   784  00AB  118A  2653  118A   	fcall	_lcd_write_byte
   785  00AE                     l1670:
   786                           
   787                           ;main.c: 208:     lcd_write_byte(0b01001, 1);
   788  00AE  01FA               	clrf	lcd_write_byte@RS
   789  00AF  0AFA               	incf	lcd_write_byte@RS,f
   790  00B0  3009               	movlw	9
   791  00B1  118A  2653  118A   	fcall	_lcd_write_byte
   792  00B4                     l1672:
   793                           
   794                           ;main.c: 209:     lcd_write_byte(0b01001, 1);
   795  00B4  01FA               	clrf	lcd_write_byte@RS
   796  00B5  0AFA               	incf	lcd_write_byte@RS,f
   797  00B6  3009               	movlw	9
   798  00B7  118A  2653  118A   	fcall	_lcd_write_byte
   799  00BA                     l1674:
   800                           
   801                           ;main.c: 210:     lcd_write_byte(0b01001, 1);
   802  00BA  01FA               	clrf	lcd_write_byte@RS
   803  00BB  0AFA               	incf	lcd_write_byte@RS,f
   804  00BC  3009               	movlw	9
   805  00BD  118A  2653  118A   	fcall	_lcd_write_byte
   806  00C0                     l1676:
   807                           
   808                           ;main.c: 211:     lcd_write_byte(0b01001, 1);
   809  00C0  01FA               	clrf	lcd_write_byte@RS
   810  00C1  0AFA               	incf	lcd_write_byte@RS,f
   811  00C2  3009               	movlw	9
   812  00C3  118A  2653  118A   	fcall	_lcd_write_byte
   813  00C6                     l1678:
   814                           
   815                           ;main.c: 212:     lcd_write_byte(0b01001, 1);
   816  00C6  01FA               	clrf	lcd_write_byte@RS
   817  00C7  0AFA               	incf	lcd_write_byte@RS,f
   818  00C8  3009               	movlw	9
   819  00C9  118A  2653  118A   	fcall	_lcd_write_byte
   820  00CC                     l1680:
   821                           
   822                           ;main.c: 213:     lcd_write_byte(0b01111, 1);
   823  00CC  01FA               	clrf	lcd_write_byte@RS
   824  00CD  0AFA               	incf	lcd_write_byte@RS,f
   825  00CE  300F               	movlw	15
   826  00CF  118A  2653  118A   	fcall	_lcd_write_byte
   827  00D2                     l1682:
   828                           
   829                           ;main.c: 214:     lcd_write_byte(0b01111, 1);
   830  00D2  01FA               	clrf	lcd_write_byte@RS
   831  00D3  0AFA               	incf	lcd_write_byte@RS,f
   832  00D4  300F               	movlw	15
   833  00D5  118A  2653  118A   	fcall	_lcd_write_byte
   834  00D8                     l1684:
   835                           
   836                           ;main.c: 217:     lcd_write_byte(0b00110, 1);
   837  00D8  01FA               	clrf	lcd_write_byte@RS
   838  00D9  0AFA               	incf	lcd_write_byte@RS,f
   839  00DA  3006               	movlw	6
   840  00DB  118A  2653  118A   	fcall	_lcd_write_byte
   841  00DE                     l1686:
   842                           
   843                           ;main.c: 218:     lcd_write_byte(0b01001, 1);
   844  00DE  01FA               	clrf	lcd_write_byte@RS
   845  00DF  0AFA               	incf	lcd_write_byte@RS,f
   846  00E0  3009               	movlw	9
   847  00E1  118A  2653  118A   	fcall	_lcd_write_byte
   848  00E4                     l1688:
   849                           
   850                           ;main.c: 219:     lcd_write_byte(0b01001, 1);
   851  00E4  01FA               	clrf	lcd_write_byte@RS
   852  00E5  0AFA               	incf	lcd_write_byte@RS,f
   853  00E6  3009               	movlw	9
   854  00E7  118A  2653  118A   	fcall	_lcd_write_byte
   855  00EA                     l1690:
   856                           
   857                           ;main.c: 220:     lcd_write_byte(0b01001, 1);
   858  00EA  01FA               	clrf	lcd_write_byte@RS
   859  00EB  0AFA               	incf	lcd_write_byte@RS,f
   860  00EC  3009               	movlw	9
   861  00ED  118A  2653  118A   	fcall	_lcd_write_byte
   862  00F0                     l1692:
   863                           
   864                           ;main.c: 221:     lcd_write_byte(0b01001, 1);
   865  00F0  01FA               	clrf	lcd_write_byte@RS
   866  00F1  0AFA               	incf	lcd_write_byte@RS,f
   867  00F2  3009               	movlw	9
   868  00F3  118A  2653  118A   	fcall	_lcd_write_byte
   869  00F6                     l1694:
   870                           
   871                           ;main.c: 222:     lcd_write_byte(0b01111, 1);
   872  00F6  01FA               	clrf	lcd_write_byte@RS
   873  00F7  0AFA               	incf	lcd_write_byte@RS,f
   874  00F8  300F               	movlw	15
   875  00F9  118A  2653  118A   	fcall	_lcd_write_byte
   876  00FC                     l1696:
   877                           
   878                           ;main.c: 223:     lcd_write_byte(0b01111, 1);
   879  00FC  01FA               	clrf	lcd_write_byte@RS
   880  00FD  0AFA               	incf	lcd_write_byte@RS,f
   881  00FE  300F               	movlw	15
   882  00FF  118A  2653  118A   	fcall	_lcd_write_byte
   883  0102                     l1698:
   884                           
   885                           ;main.c: 224:     lcd_write_byte(0b01111, 1);
   886  0102  01FA               	clrf	lcd_write_byte@RS
   887  0103  0AFA               	incf	lcd_write_byte@RS,f
   888  0104  300F               	movlw	15
   889  0105  118A  2653  118A   	fcall	_lcd_write_byte
   890  0108                     l1700:
   891                           
   892                           ;main.c: 227:     lcd_write_byte(0b00110, 1);
   893  0108  01FA               	clrf	lcd_write_byte@RS
   894  0109  0AFA               	incf	lcd_write_byte@RS,f
   895  010A  3006               	movlw	6
   896  010B  118A  2653  118A   	fcall	_lcd_write_byte
   897  010E                     l1702:
   898                           
   899                           ;main.c: 228:     lcd_write_byte(0b01001, 1);
   900  010E  01FA               	clrf	lcd_write_byte@RS
   901  010F  0AFA               	incf	lcd_write_byte@RS,f
   902  0110  3009               	movlw	9
   903  0111  118A  2653  118A   	fcall	_lcd_write_byte
   904  0114                     l1704:
   905                           
   906                           ;main.c: 229:     lcd_write_byte(0b01001, 1);
   907  0114  01FA               	clrf	lcd_write_byte@RS
   908  0115  0AFA               	incf	lcd_write_byte@RS,f
   909  0116  3009               	movlw	9
   910  0117  118A  2653  118A   	fcall	_lcd_write_byte
   911  011A                     l1706:
   912                           
   913                           ;main.c: 230:     lcd_write_byte(0b01001, 1);
   914  011A  01FA               	clrf	lcd_write_byte@RS
   915  011B  0AFA               	incf	lcd_write_byte@RS,f
   916  011C  3009               	movlw	9
   917  011D  118A  2653  118A   	fcall	_lcd_write_byte
   918  0120                     l1708:
   919                           
   920                           ;main.c: 231:     lcd_write_byte(0b01111, 1);
   921  0120  01FA               	clrf	lcd_write_byte@RS
   922  0121  0AFA               	incf	lcd_write_byte@RS,f
   923  0122  300F               	movlw	15
   924  0123  118A  2653  118A   	fcall	_lcd_write_byte
   925  0126                     l1710:
   926                           
   927                           ;main.c: 232:     lcd_write_byte(0b01111, 1);
   928  0126  01FA               	clrf	lcd_write_byte@RS
   929  0127  0AFA               	incf	lcd_write_byte@RS,f
   930  0128  300F               	movlw	15
   931  0129  118A  2653  118A   	fcall	_lcd_write_byte
   932  012C                     l1712:
   933                           
   934                           ;main.c: 233:     lcd_write_byte(0b01111, 1);
   935  012C  01FA               	clrf	lcd_write_byte@RS
   936  012D  0AFA               	incf	lcd_write_byte@RS,f
   937  012E  300F               	movlw	15
   938  012F  118A  2653  118A   	fcall	_lcd_write_byte
   939  0132                     l1714:
   940                           
   941                           ;main.c: 234:     lcd_write_byte(0b01111, 1);
   942  0132  01FA               	clrf	lcd_write_byte@RS
   943  0133  0AFA               	incf	lcd_write_byte@RS,f
   944  0134  300F               	movlw	15
   945  0135  118A  2653  118A   	fcall	_lcd_write_byte
   946  0138                     l1716:
   947                           
   948                           ;main.c: 237:     lcd_write_byte(0b00110, 1);
   949  0138  01FA               	clrf	lcd_write_byte@RS
   950  0139  0AFA               	incf	lcd_write_byte@RS,f
   951  013A  3006               	movlw	6
   952  013B  118A  2653  118A   	fcall	_lcd_write_byte
   953  013E                     l1718:
   954                           
   955                           ;main.c: 238:     lcd_write_byte(0b01001, 1);
   956  013E  01FA               	clrf	lcd_write_byte@RS
   957  013F  0AFA               	incf	lcd_write_byte@RS,f
   958  0140  3009               	movlw	9
   959  0141  118A  2653  118A   	fcall	_lcd_write_byte
   960  0144                     l1720:
   961                           
   962                           ;main.c: 239:     lcd_write_byte(0b01001, 1);
   963  0144  01FA               	clrf	lcd_write_byte@RS
   964  0145  0AFA               	incf	lcd_write_byte@RS,f
   965  0146  3009               	movlw	9
   966  0147  118A  2653  118A   	fcall	_lcd_write_byte
   967  014A                     l1722:
   968                           
   969                           ;main.c: 240:     lcd_write_byte(0b01111, 1);
   970  014A  01FA               	clrf	lcd_write_byte@RS
   971  014B  0AFA               	incf	lcd_write_byte@RS,f
   972  014C  300F               	movlw	15
   973  014D  118A  2653  118A   	fcall	_lcd_write_byte
   974  0150                     l1724:
   975                           
   976                           ;main.c: 241:     lcd_write_byte(0b01111, 1);
   977  0150  01FA               	clrf	lcd_write_byte@RS
   978  0151  0AFA               	incf	lcd_write_byte@RS,f
   979  0152  300F               	movlw	15
   980  0153  118A  2653  118A   	fcall	_lcd_write_byte
   981  0156                     l1726:
   982                           
   983                           ;main.c: 242:     lcd_write_byte(0b01111, 1);
   984  0156  01FA               	clrf	lcd_write_byte@RS
   985  0157  0AFA               	incf	lcd_write_byte@RS,f
   986  0158  300F               	movlw	15
   987  0159  118A  2653  118A   	fcall	_lcd_write_byte
   988  015C                     l1728:
   989                           
   990                           ;main.c: 243:     lcd_write_byte(0b01111, 1);
   991  015C  01FA               	clrf	lcd_write_byte@RS
   992  015D  0AFA               	incf	lcd_write_byte@RS,f
   993  015E  300F               	movlw	15
   994  015F  118A  2653  118A   	fcall	_lcd_write_byte
   995  0162                     l1730:
   996                           
   997                           ;main.c: 244:     lcd_write_byte(0b01111, 1);
   998  0162  01FA               	clrf	lcd_write_byte@RS
   999  0163  0AFA               	incf	lcd_write_byte@RS,f
  1000  0164  300F               	movlw	15
  1001  0165  118A  2653  118A   	fcall	_lcd_write_byte
  1002  0168                     l1732:
  1003                           
  1004                           ;main.c: 247:     lcd_write_byte(0b00110, 1);
  1005  0168  01FA               	clrf	lcd_write_byte@RS
  1006  0169  0AFA               	incf	lcd_write_byte@RS,f
  1007  016A  3006               	movlw	6
  1008  016B  118A  2653  118A   	fcall	_lcd_write_byte
  1009  016E                     l1734:
  1010                           
  1011                           ;main.c: 248:     lcd_write_byte(0b01001, 1);
  1012  016E  01FA               	clrf	lcd_write_byte@RS
  1013  016F  0AFA               	incf	lcd_write_byte@RS,f
  1014  0170  3009               	movlw	9
  1015  0171  118A  2653  118A   	fcall	_lcd_write_byte
  1016  0174                     l1736:
  1017                           
  1018                           ;main.c: 249:     lcd_write_byte(0b01111, 1);
  1019  0174  01FA               	clrf	lcd_write_byte@RS
  1020  0175  0AFA               	incf	lcd_write_byte@RS,f
  1021  0176  300F               	movlw	15
  1022  0177  118A  2653  118A   	fcall	_lcd_write_byte
  1023  017A                     l1738:
  1024                           
  1025                           ;main.c: 250:     lcd_write_byte(0b01111, 1);
  1026  017A  01FA               	clrf	lcd_write_byte@RS
  1027  017B  0AFA               	incf	lcd_write_byte@RS,f
  1028  017C  300F               	movlw	15
  1029  017D  118A  2653  118A   	fcall	_lcd_write_byte
  1030  0180                     l1740:
  1031                           
  1032                           ;main.c: 251:     lcd_write_byte(0b01111, 1);
  1033  0180  01FA               	clrf	lcd_write_byte@RS
  1034  0181  0AFA               	incf	lcd_write_byte@RS,f
  1035  0182  300F               	movlw	15
  1036  0183  118A  2653  118A   	fcall	_lcd_write_byte
  1037  0186                     l1742:
  1038                           
  1039                           ;main.c: 252:     lcd_write_byte(0b01111, 1);
  1040  0186  01FA               	clrf	lcd_write_byte@RS
  1041  0187  0AFA               	incf	lcd_write_byte@RS,f
  1042  0188  300F               	movlw	15
  1043  0189  118A  2653  118A   	fcall	_lcd_write_byte
  1044  018C                     l1744:
  1045                           
  1046                           ;main.c: 253:     lcd_write_byte(0b01111, 1);
  1047  018C  01FA               	clrf	lcd_write_byte@RS
  1048  018D  0AFA               	incf	lcd_write_byte@RS,f
  1049  018E  300F               	movlw	15
  1050  018F  118A  2653  118A   	fcall	_lcd_write_byte
  1051  0192                     l1746:
  1052                           
  1053                           ;main.c: 254:     lcd_write_byte(0b01111, 1);
  1054  0192  01FA               	clrf	lcd_write_byte@RS
  1055  0193  0AFA               	incf	lcd_write_byte@RS,f
  1056  0194  300F               	movlw	15
  1057  0195  118A  2653  118A   	fcall	_lcd_write_byte
  1058  0198                     l1748:
  1059                           
  1060                           ;main.c: 257:     lcd_write_byte(0b00110, 1);
  1061  0198  01FA               	clrf	lcd_write_byte@RS
  1062  0199  0AFA               	incf	lcd_write_byte@RS,f
  1063  019A  3006               	movlw	6
  1064  019B  118A  2653  118A   	fcall	_lcd_write_byte
  1065  019E                     l1750:
  1066                           
  1067                           ;main.c: 258:     lcd_write_byte(0b01111, 1);
  1068  019E  01FA               	clrf	lcd_write_byte@RS
  1069  019F  0AFA               	incf	lcd_write_byte@RS,f
  1070  01A0  300F               	movlw	15
  1071  01A1  118A  2653  118A   	fcall	_lcd_write_byte
  1072  01A4                     l1752:
  1073                           
  1074                           ;main.c: 259:     lcd_write_byte(0b01111, 1);
  1075  01A4  01FA               	clrf	lcd_write_byte@RS
  1076  01A5  0AFA               	incf	lcd_write_byte@RS,f
  1077  01A6  300F               	movlw	15
  1078  01A7  118A  2653  118A   	fcall	_lcd_write_byte
  1079  01AA                     l1754:
  1080                           
  1081                           ;main.c: 260:     lcd_write_byte(0b01111, 1);
  1082  01AA  01FA               	clrf	lcd_write_byte@RS
  1083  01AB  0AFA               	incf	lcd_write_byte@RS,f
  1084  01AC  300F               	movlw	15
  1085  01AD  118A  2653  118A   	fcall	_lcd_write_byte
  1086  01B0                     l1756:
  1087                           
  1088                           ;main.c: 261:     lcd_write_byte(0b01111, 1);
  1089  01B0  01FA               	clrf	lcd_write_byte@RS
  1090  01B1  0AFA               	incf	lcd_write_byte@RS,f
  1091  01B2  300F               	movlw	15
  1092  01B3  118A  2653  118A   	fcall	_lcd_write_byte
  1093  01B6                     l1758:
  1094                           
  1095                           ;main.c: 262:     lcd_write_byte(0b01111, 1);
  1096  01B6  01FA               	clrf	lcd_write_byte@RS
  1097  01B7  0AFA               	incf	lcd_write_byte@RS,f
  1098  01B8  300F               	movlw	15
  1099  01B9  118A  2653  118A   	fcall	_lcd_write_byte
  1100  01BC                     l1760:
  1101                           
  1102                           ;main.c: 263:     lcd_write_byte(0b01111, 1);
  1103  01BC  01FA               	clrf	lcd_write_byte@RS
  1104  01BD  0AFA               	incf	lcd_write_byte@RS,f
  1105  01BE  300F               	movlw	15
  1106  01BF  118A  2653  118A   	fcall	_lcd_write_byte
  1107  01C2                     l1762:
  1108                           
  1109                           ;main.c: 264:     lcd_write_byte(0b01111, 1);
  1110  01C2  01FA               	clrf	lcd_write_byte@RS
  1111  01C3  0AFA               	incf	lcd_write_byte@RS,f
  1112  01C4  300F               	movlw	15
  1113  01C5  118A  2653  118A   	fcall	_lcd_write_byte
  1114  01C8                     l1764:
  1115                           
  1116                           ;main.c: 266:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1117  01C8  300B               	movlw	11
  1118  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1119  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1120  01CB  00B3               	movwf	??_main+2
  1121  01CC  3026               	movlw	38
  1122  01CD  00B2               	movwf	??_main+1
  1123  01CE  305D               	movlw	93
  1124  01CF  00B1               	movwf	??_main
  1125  01D0                     u1257:
  1126  01D0  0BB1               	decfsz	??_main,f
  1127  01D1  29D0               	goto	u1257
  1128  01D2  0BB2               	decfsz	??_main+1,f
  1129  01D3  29D0               	goto	u1257
  1130  01D4  0BB3               	decfsz	??_main+2,f
  1131  01D5  29D0               	goto	u1257
  1132  01D6                     l1766:
  1133                           
  1134                           ;main.c: 267:     lcd_clear();
  1135  01D6  118A  26E8  118A   	fcall	_lcd_clear
  1136  01D9                     l1768:
  1137                           
  1138                           ;main.c: 269:     char i=0;
  1139  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1140  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1141  01DB  01BA               	clrf	main@i
  1142  01DC                     l1770:
  1143                           
  1144                           ;main.c: 274:         if(events & 0b00100000){
  1145  01DC  1EBF               	btfss	_events,5	;volatile
  1146  01DD  29DF               	goto	u1091
  1147  01DE  29E0               	goto	u1090
  1148  01DF                     u1091:
  1149  01DF  29E4               	goto	l1774
  1150  01E0                     u1090:
  1151  01E0                     l1772:
  1152                           
  1153                           ;main.c: 275:             events &= ~0b00100000;
  1154  01E0  30DF               	movlw	223
  1155  01E1  00B1               	movwf	??_main
  1156  01E2  0831               	movf	??_main,w
  1157  01E3  05BF               	andwf	_events,f	;volatile
  1158  01E4                     l1774:
  1159                           
  1160                           ;main.c: 277:         if(events & 0b00010000){
  1161  01E4  1E3F               	btfss	_events,4	;volatile
  1162  01E5  29E7               	goto	u1101
  1163  01E6  29E8               	goto	u1100
  1164  01E7                     u1101:
  1165  01E7  29EC               	goto	l1778
  1166  01E8                     u1100:
  1167  01E8                     l1776:
  1168                           
  1169                           ;main.c: 279:             events &= ~0b00010000;
  1170  01E8  30EF               	movlw	239
  1171  01E9  00B1               	movwf	??_main
  1172  01EA  0831               	movf	??_main,w
  1173  01EB  05BF               	andwf	_events,f	;volatile
  1174  01EC                     l1778:
  1175                           
  1176                           ;main.c: 283:         lcd_cursor(0,0);
  1177  01EC  01A5               	clrf	lcd_cursor@column
  1178  01ED  3000               	movlw	0
  1179  01EE  118A  2403  118A   	fcall	_lcd_cursor
  1180  01F1                     l1780:
  1181                           
  1182                           ;main.c: 284:         intToString(vbatt, 1, numStr);
  1183  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1184  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1185  01F3  083E               	movf	_vbatt+1,w	;volatile
  1186  01F4  00A1               	movwf	intToString@number+1
  1187  01F5  083D               	movf	_vbatt,w	;volatile
  1188  01F6  00A0               	movwf	intToString@number
  1189  01F7  3001               	movlw	1
  1190  01F8  00A2               	movwf	intToString@divisor
  1191  01F9  3000               	movlw	0
  1192  01FA  00A3               	movwf	intToString@divisor+1
  1193  01FB  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1194  01FC  00B1               	movwf	??_main
  1195  01FD  0831               	movf	??_main,w
  1196  01FE  00A4               	movwf	intToString@dest
  1197  01FF  118A  2266  118A   	fcall	_intToString
  1198  0202                     l1782:
  1199                           
  1200                           ;main.c: 285:         lcd_write_string(numStr);
  1201  0202  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1202  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1203  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1204  0205  00A5               	movwf	lcd_write_string@stringArray
  1205  0206  3000               	movlw	0
  1206  0207  00A6               	movwf	lcd_write_string@stringArray+1
  1207  0208  118A  26AF  118A   	fcall	_lcd_write_string
  1208  020B                     l1784:
  1209                           
  1210                           ;main.c: 286:         lcd_write_string("CPM ");
  1211  020B  3019               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1212  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1213  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1214  020E  00A5               	movwf	lcd_write_string@stringArray
  1215  020F  3080               	movlw	128
  1216  0210  00A6               	movwf	lcd_write_string@stringArray+1
  1217  0211  118A  26AF  118A   	fcall	_lcd_write_string
  1218  0214                     l1786:
  1219                           
  1220                           ;main.c: 287:         intToString(hvfb, 1, numStr);
  1221  0214  1283               	bcf	3,5	;RP0=0, select bank0
  1222  0215  1303               	bcf	3,6	;RP1=0, select bank0
  1223  0216  083C               	movf	_hvfb+1,w	;volatile
  1224  0217  00A1               	movwf	intToString@number+1
  1225  0218  083B               	movf	_hvfb,w	;volatile
  1226  0219  00A0               	movwf	intToString@number
  1227  021A  3001               	movlw	1
  1228  021B  00A2               	movwf	intToString@divisor
  1229  021C  3000               	movlw	0
  1230  021D  00A3               	movwf	intToString@divisor+1
  1231  021E  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1232  021F  00B1               	movwf	??_main
  1233  0220  0831               	movf	??_main,w
  1234  0221  00A4               	movwf	intToString@dest
  1235  0222  118A  2266  118A   	fcall	_intToString
  1236  0225                     l1788:
  1237                           
  1238                           ;main.c: 288:         lcd_write_string(numStr);
  1239  0225  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1240  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0228  00A5               	movwf	lcd_write_string@stringArray
  1243  0229  3000               	movlw	0
  1244  022A  00A6               	movwf	lcd_write_string@stringArray+1
  1245  022B  118A  26AF  118A   	fcall	_lcd_write_string
  1246  022E                     l1790:
  1247                           
  1248                           ;main.c: 289:         lcd_write_string("uS/h   ");
  1249  022E  3011               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1250  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1251  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1252  0231  00A5               	movwf	lcd_write_string@stringArray
  1253  0232  3080               	movlw	128
  1254  0233  00A6               	movwf	lcd_write_string@stringArray+1
  1255  0234  118A  26AF  118A   	fcall	_lcd_write_string
  1256  0237                     l1792:
  1257                           
  1258                           ;main.c: 290:         lcd_cursor(0,15);
  1259  0237  300F               	movlw	15
  1260  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1262  023A  00B1               	movwf	??_main
  1263  023B  0831               	movf	??_main,w
  1264  023C  00A5               	movwf	lcd_cursor@column
  1265  023D  3000               	movlw	0
  1266  023E  118A  2403  118A   	fcall	_lcd_cursor
  1267  0241                     l1794:
  1268                           
  1269                           ;main.c: 291:         lcd_write_byte(i, 1);
  1270  0241  01FA               	clrf	lcd_write_byte@RS
  1271  0242  0AFA               	incf	lcd_write_byte@RS,f
  1272  0243  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0244  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0245  083A               	movf	main@i,w
  1275  0246  118A  2653  118A   	fcall	_lcd_write_byte
  1276  0249                     l1796:
  1277                           
  1278                           ;main.c: 292:         _delay((unsigned long)((500)*(8000000/4000.0)));
  1279  0249  3006               	movlw	6
  1280  024A  1283               	bcf	3,5	;RP0=0, select bank0
  1281  024B  1303               	bcf	3,6	;RP1=0, select bank0
  1282  024C  00B3               	movwf	??_main+2
  1283  024D  3013               	movlw	19
  1284  024E  00B2               	movwf	??_main+1
  1285  024F  30AD               	movlw	173
  1286  0250  00B1               	movwf	??_main
  1287  0251                     u1267:
  1288  0251  0BB1               	decfsz	??_main,f
  1289  0252  2A51               	goto	u1267
  1290  0253  0BB2               	decfsz	??_main+1,f
  1291  0254  2A51               	goto	u1267
  1292  0255  0BB3               	decfsz	??_main+2,f
  1293  0256  2A51               	goto	u1267
  1294  0257                     l1798:
  1295                           
  1296                           ;main.c: 294:         if(i<6){
  1297  0257  3006               	movlw	6
  1298  0258  1283               	bcf	3,5	;RP0=0, select bank0
  1299  0259  1303               	bcf	3,6	;RP1=0, select bank0
  1300  025A  023A               	subwf	main@i,w
  1301  025B  1803               	skipnc
  1302  025C  2A5E               	goto	u1111
  1303  025D  2A5F               	goto	u1110
  1304  025E                     u1111:
  1305  025E  29D9               	goto	l1768
  1306  025F                     u1110:
  1307  025F                     l1800:
  1308                           
  1309                           ;main.c: 295:             i++;
  1310  025F  3001               	movlw	1
  1311  0260  00B1               	movwf	??_main
  1312  0261  0831               	movf	??_main,w
  1313  0262  07BA               	addwf	main@i,f
  1314                           
  1315                           ;main.c: 296:         }else{
  1316  0263  29DC               	goto	l1770
  1317  0264  118A  280B         	ljmp	start
  1318  0266                     __end_of_main:
  1319                           
  1320                           	psect	text1
  1321  06AF                     __ptext1:	
  1322 ;; *************** function _lcd_write_string *****************
  1323 ;; Defined at:
  1324 ;;		line 464 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  stringArray     2    5[BANK0 ] PTR unsigned char 
  1327 ;;		 -> STR_4(8), STR_3(5), main@numStr(6), STR_2(5), 
  1328 ;;		 -> STR_1(16), 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;		None
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1340 ;;      Params:         0       2       0       0       0
  1341 ;;      Locals:         0       0       0       0       0
  1342 ;;      Temps:          0       0       0       0       0
  1343 ;;      Totals:         0       2       0       0       0
  1344 ;;Total ram usage:        2 bytes
  1345 ;; Hardware stack levels used: 1
  1346 ;; Hardware stack levels required when called: 3
  1347 ;; This function calls:
  1348 ;;		_lcd_write_byte
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           
  1355                           ;psect for function _lcd_write_string
  1356  06AF                     _lcd_write_string:
  1357  06AF                     l1514:	
  1358                           ;incstack = 0
  1359                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1360                           
  1361                           
  1362                           ;main.c: 466:     while (*stringArray){
  1363  06AF  2EC4               	goto	l1520
  1364  06B0                     l1516:
  1365                           
  1366                           ;main.c: 467:         lcd_write_byte(*stringArray++, 1);
  1367  06B0  01FA               	clrf	lcd_write_byte@RS
  1368  06B1  0AFA               	incf	lcd_write_byte@RS,f
  1369  06B2  0826               	movf	lcd_write_string@stringArray+1,w
  1370  06B3  00FF               	movwf	btemp+1
  1371  06B4  0825               	movf	lcd_write_string@stringArray,w
  1372  06B5  0084               	movwf	4
  1373  06B6  118A  2621  118A   	fcall	stringtab
  1374  06B9  118A  2653  118A   	fcall	_lcd_write_byte
  1375  06BC                     l1518:
  1376  06BC  3001               	movlw	1
  1377  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1378  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1379  06BF  07A5               	addwf	lcd_write_string@stringArray,f
  1380  06C0  1803               	skipnc
  1381  06C1  0AA6               	incf	lcd_write_string@stringArray+1,f
  1382  06C2  3000               	movlw	0
  1383  06C3  07A6               	addwf	lcd_write_string@stringArray+1,f
  1384  06C4                     l1520:
  1385                           
  1386                           ;main.c: 466:     while (*stringArray){
  1387  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1388  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1389  06C6  0826               	movf	lcd_write_string@stringArray+1,w
  1390  06C7  00FF               	movwf	btemp+1
  1391  06C8  0825               	movf	lcd_write_string@stringArray,w
  1392  06C9  0084               	movwf	4
  1393  06CA  118A  2621  118A   	fcall	stringtab
  1394  06CD  3A00               	xorlw	0
  1395  06CE  1D03               	skipz
  1396  06CF  2ED1               	goto	u961
  1397  06D0  2ED2               	goto	u960
  1398  06D1                     u961:
  1399  06D1  2EB0               	goto	l1516
  1400  06D2                     u960:
  1401  06D2                     l159:
  1402  06D2  0008               	return
  1403  06D3                     __end_of_lcd_write_string:
  1404                           
  1405                           	psect	text2
  1406  0488                     __ptext2:	
  1407 ;; *************** function _lcd_init *****************
  1408 ;; Defined at:
  1409 ;;		line 378 in file "main.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         0       0       0       0       0
  1424 ;;      Locals:         0       0       0       0       0
  1425 ;;      Temps:          0       2       0       0       0
  1426 ;;      Totals:         0       2       0       0       0
  1427 ;;Total ram usage:        2 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; Hardware stack levels required when called: 3
  1430 ;; This function calls:
  1431 ;;		_lcd_write_byte
  1432 ;;		_lcd_write_nibble
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           
  1439                           ;psect for function _lcd_init
  1440  0488                     _lcd_init:
  1441  0488                     l1486:	
  1442                           ;incstack = 0
  1443                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1444                           
  1445                           
  1446                           ;main.c: 381:     lcd_write_nibble(0x03, 0);
  1447  0488  01F3               	clrf	lcd_write_nibble@RS
  1448  0489  3003               	movlw	3
  1449  048A  118A  2555  118A   	fcall	_lcd_write_nibble
  1450  048D                     l1488:
  1451                           
  1452                           ;main.c: 382:     _delay((unsigned long)((6)*(8000000/4000.0)));
  1453  048D  3010               	movlw	16
  1454  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1455  048F  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0490  00A6               	movwf	??_lcd_init+1
  1457  0491  3093               	movlw	147
  1458  0492  00A5               	movwf	??_lcd_init
  1459  0493                     u1277:
  1460  0493  0BA5               	decfsz	??_lcd_init,f
  1461  0494  2C93               	goto	u1277
  1462  0495  0BA6               	decfsz	??_lcd_init+1,f
  1463  0496  2C93               	goto	u1277
  1464  0497  2C98               	nop2
  1465  0498                     l1490:
  1466                           
  1467                           ;main.c: 383:     lcd_write_nibble(0x03, 0);
  1468  0498  01F3               	clrf	lcd_write_nibble@RS
  1469  0499  3003               	movlw	3
  1470  049A  118A  2555  118A   	fcall	_lcd_write_nibble
  1471                           
  1472                           ;main.c: 384:     _delay((unsigned long)((150)*(8000000/4000000.0)));
  1473  049D  3063               	movlw	99
  1474  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1475  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1476  04A0  00A5               	movwf	??_lcd_init
  1477  04A1                     u1287:
  1478  04A1  0BA5               	decfsz	??_lcd_init,f
  1479  04A2  2CA1               	goto	u1287
  1480  04A3                     l1492:
  1481                           
  1482                           ;main.c: 385:     lcd_write_nibble(0x03, 0);
  1483  04A3  01F3               	clrf	lcd_write_nibble@RS
  1484  04A4  3003               	movlw	3
  1485  04A5  118A  2555  118A   	fcall	_lcd_write_nibble
  1486  04A8                     l1494:
  1487                           
  1488                           ;main.c: 386:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1489  04A8  3002               	movlw	2
  1490  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1491  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1492  04AB  00A5               	movwf	??_lcd_init
  1493  04AC                     u1297:
  1494  04AC  0BA5               	decfsz	??_lcd_init,f
  1495  04AD  2CAC               	goto	u1297
  1496  04AE  0000               	nop
  1497                           
  1498                           ;main.c: 387:     lcd_write_nibble(0x02, 0);
  1499  04AF  01F3               	clrf	lcd_write_nibble@RS
  1500  04B0  3002               	movlw	2
  1501  04B1  118A  2555  118A   	fcall	_lcd_write_nibble
  1502  04B4                     l1496:
  1503                           
  1504                           ;main.c: 388:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1505  04B4  3002               	movlw	2
  1506  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  1507  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  1508  04B7  00A5               	movwf	??_lcd_init
  1509  04B8                     u1307:
  1510  04B8  0BA5               	decfsz	??_lcd_init,f
  1511  04B9  2CB8               	goto	u1307
  1512  04BA  0000               	nop
  1513  04BB                     l1498:
  1514                           
  1515                           ;main.c: 390:     lcd_write_byte(0x28, 0);
  1516  04BB  01FA               	clrf	lcd_write_byte@RS
  1517  04BC  3028               	movlw	40
  1518  04BD  118A  2653  118A   	fcall	_lcd_write_byte
  1519                           
  1520                           ;main.c: 391:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1521  04C0  3002               	movlw	2
  1522  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  1523  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  1524  04C3  00A5               	movwf	??_lcd_init
  1525  04C4                     u1317:
  1526  04C4  0BA5               	decfsz	??_lcd_init,f
  1527  04C5  2CC4               	goto	u1317
  1528  04C6  0000               	nop
  1529  04C7                     l1500:
  1530                           
  1531                           ;main.c: 392:     lcd_write_byte(0x08, 0);
  1532  04C7  01FA               	clrf	lcd_write_byte@RS
  1533  04C8  3008               	movlw	8
  1534  04C9  118A  2653  118A   	fcall	_lcd_write_byte
  1535  04CC                     l1502:
  1536                           
  1537                           ;main.c: 393:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1538  04CC  3002               	movlw	2
  1539  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1540  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1541  04CF  00A5               	movwf	??_lcd_init
  1542  04D0                     u1327:
  1543  04D0  0BA5               	decfsz	??_lcd_init,f
  1544  04D1  2CD0               	goto	u1327
  1545  04D2  0000               	nop
  1546                           
  1547                           ;main.c: 394:     lcd_write_byte(0x01, 0);
  1548  04D3  01FA               	clrf	lcd_write_byte@RS
  1549  04D4  3001               	movlw	1
  1550  04D5  118A  2653  118A   	fcall	_lcd_write_byte
  1551  04D8                     l1504:
  1552                           
  1553                           ;main.c: 395:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  1554  04D8  3006               	movlw	6
  1555  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1556  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  1557  04DB  00A6               	movwf	??_lcd_init+1
  1558  04DC  302F               	movlw	47
  1559  04DD  00A5               	movwf	??_lcd_init
  1560  04DE                     u1337:
  1561  04DE  0BA5               	decfsz	??_lcd_init,f
  1562  04DF  2CDE               	goto	u1337
  1563  04E0  0BA6               	decfsz	??_lcd_init+1,f
  1564  04E1  2CDE               	goto	u1337
  1565  04E2  2CE3               	nop2
  1566  04E3                     l1506:
  1567                           
  1568                           ;main.c: 396:     lcd_write_byte(0x06, 0);
  1569  04E3  01FA               	clrf	lcd_write_byte@RS
  1570  04E4  3006               	movlw	6
  1571  04E5  118A  2653  118A   	fcall	_lcd_write_byte
  1572                           
  1573                           ;main.c: 397:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1574  04E8  3002               	movlw	2
  1575  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  1576  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  1577  04EB  00A5               	movwf	??_lcd_init
  1578  04EC                     u1347:
  1579  04EC  0BA5               	decfsz	??_lcd_init,f
  1580  04ED  2CEC               	goto	u1347
  1581  04EE  0000               	nop
  1582  04EF                     l1508:
  1583                           
  1584                           ;main.c: 398:     lcd_write_byte(0x0C, 0);
  1585  04EF  01FA               	clrf	lcd_write_byte@RS
  1586  04F0  300C               	movlw	12
  1587  04F1  118A  2653  118A   	fcall	_lcd_write_byte
  1588  04F4                     l1510:
  1589                           
  1590                           ;main.c: 399:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1591  04F4  3002               	movlw	2
  1592  04F5  1283               	bcf	3,5	;RP0=0, select bank0
  1593  04F6  1303               	bcf	3,6	;RP1=0, select bank0
  1594  04F7  00A5               	movwf	??_lcd_init
  1595  04F8                     u1357:
  1596  04F8  0BA5               	decfsz	??_lcd_init,f
  1597  04F9  2CF8               	goto	u1357
  1598  04FA  0000               	nop
  1599  04FB                     l132:
  1600  04FB  0008               	return
  1601  04FC                     __end_of_lcd_init:
  1602                           
  1603                           	psect	text3
  1604  0403                     __ptext3:	
  1605 ;; *************** function _lcd_cursor *****************
  1606 ;; Defined at:
  1607 ;;		line 438 in file "main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  row             1    wreg     unsigned char 
  1610 ;;  column          1    5[BANK0 ] unsigned char 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  row             1    8[BANK0 ] unsigned char 
  1613 ;;  position        1    9[BANK0 ] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         0       1       0       0       0
  1624 ;;      Locals:         0       2       0       0       0
  1625 ;;      Temps:          0       2       0       0       0
  1626 ;;      Totals:         0       5       0       0       0
  1627 ;;Total ram usage:        5 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 3
  1630 ;; This function calls:
  1631 ;;		___awmod
  1632 ;;		___bmul
  1633 ;;		_lcd_write_byte
  1634 ;; This function is called by:
  1635 ;;		_main
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           
  1640                           ;psect for function _lcd_cursor
  1641  0403                     _lcd_cursor:
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _lcd_cursor: [wreg+status,2+status,0+pclath+cstack]
  1645                           ;lcd_cursor@row stored from wreg
  1646  0403  1283               	bcf	3,5	;RP0=0, select bank0
  1647  0404  1303               	bcf	3,6	;RP1=0, select bank0
  1648  0405  00A8               	movwf	lcd_cursor@row
  1649  0406                     l1522:
  1650                           
  1651                           ;main.c: 439:     char position;;main.c: 442:  position = (row * 20) + column;
  1652  0406  3014               	movlw	20
  1653  0407  00A6               	movwf	??_lcd_cursor
  1654  0408  0826               	movf	??_lcd_cursor,w
  1655  0409  00F3               	movwf	___bmul@multiplicand
  1656  040A  0828               	movf	lcd_cursor@row,w
  1657  040B  118A  26D3  118A   	fcall	___bmul
  1658  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1659  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0410  0725               	addwf	lcd_cursor@column,w
  1661  0411  00A7               	movwf	??_lcd_cursor+1
  1662  0412  0827               	movf	??_lcd_cursor+1,w
  1663  0413  00A9               	movwf	lcd_cursor@position
  1664  0414                     l1524:
  1665                           
  1666                           ;main.c: 445:  if(position < 20) {
  1667  0414  3014               	movlw	20
  1668  0415  0229               	subwf	lcd_cursor@position,w
  1669  0416  1803               	skipnc
  1670  0417  2C19               	goto	u971
  1671  0418  2C1A               	goto	u970
  1672  0419                     u971:
  1673  0419  2C21               	goto	l1528
  1674  041A                     u970:
  1675  041A                     l1526:
  1676                           
  1677                           ;main.c: 446:   lcd_write_byte(0x80 | position, 0);
  1678  041A  01FA               	clrf	lcd_write_byte@RS
  1679  041B  0829               	movf	lcd_cursor@position,w
  1680  041C  3880               	iorlw	128
  1681  041D  118A  2653  118A   	fcall	_lcd_write_byte
  1682                           
  1683                           ;main.c: 447:  } else if(position >= 20 && position < 40) {
  1684  0420  2C87               	goto	l150
  1685  0421                     l1528:
  1686  0421  3014               	movlw	20
  1687  0422  0229               	subwf	lcd_cursor@position,w
  1688  0423  1C03               	skipc
  1689  0424  2C26               	goto	u981
  1690  0425  2C27               	goto	u980
  1691  0426                     u981:
  1692  0426  2C43               	goto	l1534
  1693  0427                     u980:
  1694  0427                     l1530:
  1695  0427  3028               	movlw	40
  1696  0428  0229               	subwf	lcd_cursor@position,w
  1697  0429  1803               	skipnc
  1698  042A  2C2C               	goto	u991
  1699  042B  2C2D               	goto	u990
  1700  042C                     u991:
  1701  042C  2C43               	goto	l1534
  1702  042D                     u990:
  1703  042D                     l1532:
  1704                           
  1705                           ;main.c: 448:   lcd_write_byte(0x80 | (position % 20 + 0x40), 0);
  1706  042D  01FA               	clrf	lcd_write_byte@RS
  1707  042E  3014               	movlw	20
  1708  042F  00F3               	movwf	___awmod@divisor
  1709  0430  3000               	movlw	0
  1710  0431  00F4               	movwf	___awmod@divisor+1
  1711  0432  0829               	movf	lcd_cursor@position,w
  1712  0433  00A6               	movwf	??_lcd_cursor
  1713  0434  01A7               	clrf	??_lcd_cursor+1
  1714  0435  0826               	movf	??_lcd_cursor,w
  1715  0436  00F5               	movwf	___awmod@dividend
  1716  0437  0827               	movf	??_lcd_cursor+1,w
  1717  0438  00F6               	movwf	___awmod@dividend+1
  1718  0439  118A  24FC  118A   	fcall	___awmod
  1719  043C  0873               	movf	?___awmod,w
  1720  043D  3E40               	addlw	64
  1721  043E  3880               	iorlw	128
  1722  043F  118A  2653  118A   	fcall	_lcd_write_byte
  1723                           
  1724                           ;main.c: 449:     } else if(position >= 41 && position < 60) {
  1725  0442  2C87               	goto	l150
  1726  0443                     l1534:
  1727  0443  3029               	movlw	41
  1728  0444  0229               	subwf	lcd_cursor@position,w
  1729  0445  1C03               	skipc
  1730  0446  2C48               	goto	u1001
  1731  0447  2C49               	goto	u1000
  1732  0448                     u1001:
  1733  0448  2C65               	goto	l1540
  1734  0449                     u1000:
  1735  0449                     l1536:
  1736  0449  303C               	movlw	60
  1737  044A  0229               	subwf	lcd_cursor@position,w
  1738  044B  1803               	skipnc
  1739  044C  2C4E               	goto	u1011
  1740  044D  2C4F               	goto	u1010
  1741  044E                     u1011:
  1742  044E  2C65               	goto	l1540
  1743  044F                     u1010:
  1744  044F                     l1538:
  1745                           
  1746                           ;main.c: 450:   lcd_write_byte(0x80 | (position % 40 + 0x14), 0);
  1747  044F  01FA               	clrf	lcd_write_byte@RS
  1748  0450  3028               	movlw	40
  1749  0451  00F3               	movwf	___awmod@divisor
  1750  0452  3000               	movlw	0
  1751  0453  00F4               	movwf	___awmod@divisor+1
  1752  0454  0829               	movf	lcd_cursor@position,w
  1753  0455  00A6               	movwf	??_lcd_cursor
  1754  0456  01A7               	clrf	??_lcd_cursor+1
  1755  0457  0826               	movf	??_lcd_cursor,w
  1756  0458  00F5               	movwf	___awmod@dividend
  1757  0459  0827               	movf	??_lcd_cursor+1,w
  1758  045A  00F6               	movwf	___awmod@dividend+1
  1759  045B  118A  24FC  118A   	fcall	___awmod
  1760  045E  0873               	movf	?___awmod,w
  1761  045F  3E14               	addlw	20
  1762  0460  3880               	iorlw	128
  1763  0461  118A  2653  118A   	fcall	_lcd_write_byte
  1764                           
  1765                           ;main.c: 451:  } else if(position >= 20 && position < 40) {
  1766  0464  2C87               	goto	l150
  1767  0465                     l1540:
  1768  0465  3014               	movlw	20
  1769  0466  0229               	subwf	lcd_cursor@position,w
  1770  0467  1C03               	skipc
  1771  0468  2C6A               	goto	u1021
  1772  0469  2C6B               	goto	u1020
  1773  046A                     u1021:
  1774  046A  2C87               	goto	l144
  1775  046B                     u1020:
  1776  046B                     l1542:
  1777  046B  3028               	movlw	40
  1778  046C  0229               	subwf	lcd_cursor@position,w
  1779  046D  1803               	skipnc
  1780  046E  2C70               	goto	u1031
  1781  046F  2C71               	goto	u1030
  1782  0470                     u1031:
  1783  0470  2C87               	goto	l144
  1784  0471                     u1030:
  1785  0471                     l1544:
  1786                           
  1787                           ;main.c: 452:   lcd_write_byte(0x80 | (position % 60 + 0x54), 0);
  1788  0471  01FA               	clrf	lcd_write_byte@RS
  1789  0472  303C               	movlw	60
  1790  0473  00F3               	movwf	___awmod@divisor
  1791  0474  3000               	movlw	0
  1792  0475  00F4               	movwf	___awmod@divisor+1
  1793  0476  0829               	movf	lcd_cursor@position,w
  1794  0477  00A6               	movwf	??_lcd_cursor
  1795  0478  01A7               	clrf	??_lcd_cursor+1
  1796  0479  0826               	movf	??_lcd_cursor,w
  1797  047A  00F5               	movwf	___awmod@dividend
  1798  047B  0827               	movf	??_lcd_cursor+1,w
  1799  047C  00F6               	movwf	___awmod@dividend+1
  1800  047D  118A  24FC  118A   	fcall	___awmod
  1801  0480  0873               	movf	?___awmod,w
  1802  0481  3E54               	addlw	84
  1803  0482  3880               	iorlw	128
  1804  0483  118A  2653  118A   	fcall	_lcd_write_byte
  1805  0486  2C87               	goto	l150
  1806  0487                     l144:
  1807  0487                     l150:
  1808  0487  0008               	return
  1809  0488                     __end_of_lcd_cursor:
  1810                           
  1811                           	psect	text4
  1812  06D3                     __ptext4:	
  1813 ;; *************** function ___bmul *****************
  1814 ;; Defined at:
  1815 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  multiplier      1    wreg     unsigned char 
  1818 ;;  multiplicand    1    3[COMMON] unsigned char 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  multiplier      1    6[COMMON] unsigned char 
  1821 ;;  product         1    5[COMMON] unsigned char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      unsigned char 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2, status,0
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1831 ;;      Params:         1       0       0       0       0
  1832 ;;      Locals:         2       0       0       0       0
  1833 ;;      Temps:          1       0       0       0       0
  1834 ;;      Totals:         4       0       0       0       0
  1835 ;;Total ram usage:        4 bytes
  1836 ;; Hardware stack levels used: 1
  1837 ;; Hardware stack levels required when called: 1
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_lcd_cursor
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function ___bmul
  1847  06D3                     ___bmul:
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1851                           ;___bmul@multiplier stored from wreg
  1852  06D3  00F6               	movwf	___bmul@multiplier
  1853  06D4                     l1386:
  1854  06D4  01F5               	clrf	___bmul@product
  1855  06D5                     l1388:
  1856  06D5  1C76               	btfss	___bmul@multiplier,0
  1857  06D6  2ED8               	goto	u721
  1858  06D7  2ED9               	goto	u720
  1859  06D8                     u721:
  1860  06D8  2EDD               	goto	l1392
  1861  06D9                     u720:
  1862  06D9                     l1390:
  1863  06D9  0873               	movf	___bmul@multiplicand,w
  1864  06DA  00F4               	movwf	??___bmul
  1865  06DB  0874               	movf	??___bmul,w
  1866  06DC  07F5               	addwf	___bmul@product,f
  1867  06DD                     l1392:
  1868  06DD  1003               	clrc
  1869  06DE  0DF3               	rlf	___bmul@multiplicand,f
  1870  06DF                     l1394:
  1871  06DF  1003               	clrc
  1872  06E0  0CF6               	rrf	___bmul@multiplier,f
  1873  06E1  0876               	movf	___bmul@multiplier,w
  1874  06E2  1D03               	btfss	3,2
  1875  06E3  2EE5               	goto	u731
  1876  06E4  2EE6               	goto	u730
  1877  06E5                     u731:
  1878  06E5  2ED5               	goto	l1388
  1879  06E6                     u730:
  1880  06E6                     l1396:
  1881  06E6  0875               	movf	___bmul@product,w
  1882  06E7                     l296:
  1883  06E7  0008               	return
  1884  06E8                     __end_of___bmul:
  1885                           
  1886                           	psect	text5
  1887  04FC                     __ptext5:	
  1888 ;; *************** function ___awmod *****************
  1889 ;; Defined at:
  1890 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  divisor         2    3[COMMON] int 
  1893 ;;  dividend        2    5[COMMON] int 
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  sign            1    9[COMMON] unsigned char 
  1896 ;;  counter         1    8[COMMON] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  2    3[COMMON] int 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2, status,0
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1906 ;;      Params:         4       0       0       0       0
  1907 ;;      Locals:         2       0       0       0       0
  1908 ;;      Temps:          1       0       0       0       0
  1909 ;;      Totals:         7       0       0       0       0
  1910 ;;Total ram usage:        7 bytes
  1911 ;; Hardware stack levels used: 1
  1912 ;; Hardware stack levels required when called: 1
  1913 ;; This function calls:
  1914 ;;		Nothing
  1915 ;; This function is called by:
  1916 ;;		_lcd_cursor
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           
  1921                           ;psect for function ___awmod
  1922  04FC                     ___awmod:
  1923  04FC                     l1400:	
  1924                           ;incstack = 0
  1925                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1926                           
  1927  04FC  01F9               	clrf	___awmod@sign
  1928  04FD                     l1402:
  1929  04FD  1FF6               	btfss	___awmod@dividend+1,7
  1930  04FE  2D00               	goto	u741
  1931  04FF  2D01               	goto	u740
  1932  0500                     u741:
  1933  0500  2D08               	goto	l1408
  1934  0501                     u740:
  1935  0501                     l1404:
  1936  0501  09F5               	comf	___awmod@dividend,f
  1937  0502  09F6               	comf	___awmod@dividend+1,f
  1938  0503  0AF5               	incf	___awmod@dividend,f
  1939  0504  1903               	skipnz
  1940  0505  0AF6               	incf	___awmod@dividend+1,f
  1941  0506                     l1406:
  1942  0506  01F9               	clrf	___awmod@sign
  1943  0507  0AF9               	incf	___awmod@sign,f
  1944  0508                     l1408:
  1945  0508  1FF4               	btfss	___awmod@divisor+1,7
  1946  0509  2D0B               	goto	u751
  1947  050A  2D0C               	goto	u750
  1948  050B                     u751:
  1949  050B  2D11               	goto	l1412
  1950  050C                     u750:
  1951  050C                     l1410:
  1952  050C  09F3               	comf	___awmod@divisor,f
  1953  050D  09F4               	comf	___awmod@divisor+1,f
  1954  050E  0AF3               	incf	___awmod@divisor,f
  1955  050F  1903               	skipnz
  1956  0510  0AF4               	incf	___awmod@divisor+1,f
  1957  0511                     l1412:
  1958  0511  0873               	movf	___awmod@divisor,w
  1959  0512  0474               	iorwf	___awmod@divisor+1,w
  1960  0513  1903               	btfsc	3,2
  1961  0514  2D16               	goto	u761
  1962  0515  2D17               	goto	u760
  1963  0516                     u761:
  1964  0516  2D46               	goto	l1430
  1965  0517                     u760:
  1966  0517                     l1414:
  1967  0517  01F8               	clrf	___awmod@counter
  1968  0518  0AF8               	incf	___awmod@counter,f
  1969  0519  2D25               	goto	l1420
  1970  051A                     l1416:
  1971  051A  3001               	movlw	1
  1972  051B                     u775:
  1973  051B  1003               	clrc
  1974  051C  0DF3               	rlf	___awmod@divisor,f
  1975  051D  0DF4               	rlf	___awmod@divisor+1,f
  1976  051E  3EFF               	addlw	-1
  1977  051F  1D03               	skipz
  1978  0520  2D1B               	goto	u775
  1979  0521                     l1418:
  1980  0521  3001               	movlw	1
  1981  0522  00F7               	movwf	??___awmod
  1982  0523  0877               	movf	??___awmod,w
  1983  0524  07F8               	addwf	___awmod@counter,f
  1984  0525                     l1420:
  1985  0525  1FF4               	btfss	___awmod@divisor+1,7
  1986  0526  2D28               	goto	u781
  1987  0527  2D29               	goto	u780
  1988  0528                     u781:
  1989  0528  2D1A               	goto	l1416
  1990  0529                     u780:
  1991  0529                     l1422:
  1992  0529  0874               	movf	___awmod@divisor+1,w
  1993  052A  0276               	subwf	___awmod@dividend+1,w
  1994  052B  1D03               	skipz
  1995  052C  2D2F               	goto	u795
  1996  052D  0873               	movf	___awmod@divisor,w
  1997  052E  0275               	subwf	___awmod@dividend,w
  1998  052F                     u795:
  1999  052F  1C03               	skipc
  2000  0530  2D32               	goto	u791
  2001  0531  2D33               	goto	u790
  2002  0532                     u791:
  2003  0532  2D39               	goto	l1426
  2004  0533                     u790:
  2005  0533                     l1424:
  2006  0533  0873               	movf	___awmod@divisor,w
  2007  0534  02F5               	subwf	___awmod@dividend,f
  2008  0535  0874               	movf	___awmod@divisor+1,w
  2009  0536  1C03               	skipc
  2010  0537  03F6               	decf	___awmod@dividend+1,f
  2011  0538  02F6               	subwf	___awmod@dividend+1,f
  2012  0539                     l1426:
  2013  0539  3001               	movlw	1
  2014  053A                     u805:
  2015  053A  1003               	clrc
  2016  053B  0CF4               	rrf	___awmod@divisor+1,f
  2017  053C  0CF3               	rrf	___awmod@divisor,f
  2018  053D  3EFF               	addlw	-1
  2019  053E  1D03               	skipz
  2020  053F  2D3A               	goto	u805
  2021  0540                     l1428:
  2022  0540  3001               	movlw	1
  2023  0541  02F8               	subwf	___awmod@counter,f
  2024  0542  1D03               	btfss	3,2
  2025  0543  2D45               	goto	u811
  2026  0544  2D46               	goto	u810
  2027  0545                     u811:
  2028  0545  2D29               	goto	l1422
  2029  0546                     u810:
  2030  0546                     l1430:
  2031  0546  0879               	movf	___awmod@sign,w
  2032  0547  1903               	btfsc	3,2
  2033  0548  2D4A               	goto	u821
  2034  0549  2D4B               	goto	u820
  2035  054A                     u821:
  2036  054A  2D50               	goto	l1434
  2037  054B                     u820:
  2038  054B                     l1432:
  2039  054B  09F5               	comf	___awmod@dividend,f
  2040  054C  09F6               	comf	___awmod@dividend+1,f
  2041  054D  0AF5               	incf	___awmod@dividend,f
  2042  054E  1903               	skipnz
  2043  054F  0AF6               	incf	___awmod@dividend+1,f
  2044  0550                     l1434:
  2045  0550  0876               	movf	___awmod@dividend+1,w
  2046  0551  00F4               	movwf	?___awmod+1
  2047  0552  0875               	movf	___awmod@dividend,w
  2048  0553  00F3               	movwf	?___awmod
  2049  0554                     l436:
  2050  0554  0008               	return
  2051  0555                     __end_of___awmod:
  2052                           
  2053                           	psect	text6
  2054  06E8                     __ptext6:	
  2055 ;; *************** function _lcd_clear *****************
  2056 ;; Defined at:
  2057 ;;		line 458 in file "main.c"
  2058 ;; Parameters:    Size  Location     Type
  2059 ;;		None
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;		None
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0, pclath, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2071 ;;      Params:         0       0       0       0       0
  2072 ;;      Locals:         0       0       0       0       0
  2073 ;;      Temps:          0       2       0       0       0
  2074 ;;      Totals:         0       2       0       0       0
  2075 ;;Total ram usage:        2 bytes
  2076 ;; Hardware stack levels used: 1
  2077 ;; Hardware stack levels required when called: 3
  2078 ;; This function calls:
  2079 ;;		_lcd_write_byte
  2080 ;; This function is called by:
  2081 ;;		_main
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           
  2086                           ;psect for function _lcd_clear
  2087  06E8                     _lcd_clear:
  2088  06E8                     l1548:	
  2089                           ;incstack = 0
  2090                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  2091                           
  2092                           
  2093                           ;main.c: 459:     lcd_write_byte(0x01, 0);
  2094  06E8  01FA               	clrf	lcd_write_byte@RS
  2095  06E9  3001               	movlw	1
  2096  06EA  118A  2653  118A   	fcall	_lcd_write_byte
  2097  06ED                     l1550:
  2098                           
  2099                           ;main.c: 460:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  2100  06ED  3006               	movlw	6
  2101  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  2102  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  2103  06F0  00A6               	movwf	??_lcd_clear+1
  2104  06F1  302F               	movlw	47
  2105  06F2  00A5               	movwf	??_lcd_clear
  2106  06F3                     u1367:
  2107  06F3  0BA5               	decfsz	??_lcd_clear,f
  2108  06F4  2EF3               	goto	u1367
  2109  06F5  0BA6               	decfsz	??_lcd_clear+1,f
  2110  06F6  2EF3               	goto	u1367
  2111  06F7  2EF8               	nop2
  2112  06F8                     l153:
  2113  06F8  0008               	return
  2114  06F9                     __end_of_lcd_clear:
  2115                           
  2116                           	psect	text7
  2117  0653                     __ptext7:	
  2118 ;; *************** function _lcd_write_byte *****************
  2119 ;; Defined at:
  2120 ;;		line 423 in file "main.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;  byteIn          1    wreg     unsigned char 
  2123 ;;  RS              1   10[COMMON] unsigned char 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  byteIn          1    4[BANK0 ] unsigned char 
  2126 ;;  lowerNibble     1    3[BANK0 ] unsigned char 
  2127 ;;  upperNibble     1    2[BANK0 ] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0, pclath, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         1       0       0       0       0
  2138 ;;      Locals:         0       3       0       0       0
  2139 ;;      Temps:          0       2       0       0       0
  2140 ;;      Totals:         1       5       0       0       0
  2141 ;;Total ram usage:        6 bytes
  2142 ;; Hardware stack levels used: 1
  2143 ;; Hardware stack levels required when called: 2
  2144 ;; This function calls:
  2145 ;;		_lcd_write_nibble
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;;		_lcd_init
  2149 ;;		_lcd_cursor
  2150 ;;		_lcd_clear
  2151 ;;		_lcd_write_string
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           
  2156                           ;psect for function _lcd_write_byte
  2157  0653                     _lcd_write_byte:
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _lcd_write_byte: [wreg+status,2+status,0+pclath+cstack]
  2161                           ;lcd_write_byte@byteIn stored from wreg
  2162  0653  1283               	bcf	3,5	;RP0=0, select bank0
  2163  0654  1303               	bcf	3,6	;RP1=0, select bank0
  2164  0655  00A4               	movwf	lcd_write_byte@byteIn
  2165  0656                     l1338:
  2166                           
  2167                           ;main.c: 425:     char upperNibble, lowerNibble;;main.c: 427:     upperNibble = byteIn >
      +                          > 4;
  2168  0656  0824               	movf	lcd_write_byte@byteIn,w
  2169  0657  00A0               	movwf	??_lcd_write_byte
  2170  0658  3004               	movlw	4
  2171  0659                     u675:
  2172  0659  1003               	clrc
  2173  065A  0CA0               	rrf	??_lcd_write_byte,f
  2174  065B  3EFF               	addlw	-1
  2175  065C  1D03               	skipz
  2176  065D  2E59               	goto	u675
  2177  065E  0820               	movf	??_lcd_write_byte,w
  2178  065F  00A1               	movwf	??_lcd_write_byte+1
  2179  0660  0821               	movf	??_lcd_write_byte+1,w
  2180  0661  00A2               	movwf	lcd_write_byte@upperNibble
  2181  0662                     l1340:
  2182                           
  2183                           ;main.c: 428:     lowerNibble = byteIn & 0x0F;
  2184  0662  0824               	movf	lcd_write_byte@byteIn,w
  2185  0663  390F               	andlw	15
  2186  0664  00A0               	movwf	??_lcd_write_byte
  2187  0665  0820               	movf	??_lcd_write_byte,w
  2188  0666  00A3               	movwf	lcd_write_byte@lowerNibble
  2189  0667                     l1342:
  2190                           
  2191                           ;main.c: 430:     lcd_write_nibble(upperNibble, RS);
  2192  0667  087A               	movf	lcd_write_byte@RS,w
  2193  0668  00A0               	movwf	??_lcd_write_byte
  2194  0669  0820               	movf	??_lcd_write_byte,w
  2195  066A  00F3               	movwf	lcd_write_nibble@RS
  2196  066B  0822               	movf	lcd_write_byte@upperNibble,w
  2197  066C  118A  2555  118A   	fcall	_lcd_write_nibble
  2198  066F                     l1344:
  2199                           
  2200                           ;main.c: 431:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2201  066F  3002               	movlw	2
  2202  0670  1283               	bcf	3,5	;RP0=0, select bank0
  2203  0671  1303               	bcf	3,6	;RP1=0, select bank0
  2204  0672  00A0               	movwf	??_lcd_write_byte
  2205  0673                     u1377:
  2206  0673  0BA0               	decfsz	??_lcd_write_byte,f
  2207  0674  2E73               	goto	u1377
  2208  0675  0000               	nop
  2209  0676                     l1346:
  2210                           
  2211                           ;main.c: 432:     lcd_write_nibble(lowerNibble, RS);
  2212  0676  087A               	movf	lcd_write_byte@RS,w
  2213  0677  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0678  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0679  00A0               	movwf	??_lcd_write_byte
  2216  067A  0820               	movf	??_lcd_write_byte,w
  2217  067B  00F3               	movwf	lcd_write_nibble@RS
  2218  067C  0823               	movf	lcd_write_byte@lowerNibble,w
  2219  067D  118A  2555  118A   	fcall	_lcd_write_nibble
  2220  0680                     l140:
  2221  0680  0008               	return
  2222  0681                     __end_of_lcd_write_byte:
  2223                           
  2224                           	psect	text8
  2225  0555                     __ptext8:	
  2226 ;; *************** function _lcd_write_nibble *****************
  2227 ;; Defined at:
  2228 ;;		line 404 in file "main.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  byteIn          1    wreg     unsigned char 
  2231 ;;  RS              1    3[COMMON] unsigned char 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;  byteIn          1    6[COMMON] unsigned char 
  2234 ;; Return value:  Size  Location     Type
  2235 ;;                  1    wreg      void 
  2236 ;; Registers used:
  2237 ;;		wreg, status,2, status,0
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         1       0       0       0       0
  2244 ;;      Locals:         1       0       0       0       0
  2245 ;;      Temps:          2       0       0       0       0
  2246 ;;      Totals:         4       0       0       0       0
  2247 ;;Total ram usage:        4 bytes
  2248 ;; Hardware stack levels used: 1
  2249 ;; Hardware stack levels required when called: 1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_lcd_init
  2254 ;;		_lcd_write_byte
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _lcd_write_nibble
  2260  0555                     _lcd_write_nibble:
  2261                           
  2262                           ;incstack = 0
  2263                           ; Regs used in _lcd_write_nibble: [wreg+status,2+status,0]
  2264                           ;lcd_write_nibble@byteIn stored from wreg
  2265  0555  00F6               	movwf	lcd_write_nibble@byteIn
  2266  0556                     l1324:
  2267                           
  2268                           ;main.c: 405:     PORTAbits.RA7 = 1;
  2269  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2270  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2271  0558  1785               	bsf	5,7	;volatile
  2272  0559                     l1326:
  2273                           
  2274                           ;main.c: 407:     if(RS){
  2275  0559  0873               	movf	lcd_write_nibble@RS,w
  2276  055A  1903               	btfsc	3,2
  2277  055B  2D5D               	goto	u641
  2278  055C  2D5E               	goto	u640
  2279  055D                     u641:
  2280  055D  2D60               	goto	l135
  2281  055E                     u640:
  2282  055E                     l1328:
  2283                           
  2284                           ;main.c: 408:         PORTAbits.RA6 = 1;
  2285  055E  1705               	bsf	5,6	;volatile
  2286                           
  2287                           ;main.c: 409:     } else {
  2288  055F  2D61               	goto	l1330
  2289  0560                     l135:
  2290                           
  2291                           ;main.c: 410:         PORTAbits.RA6 = 0;
  2292  0560  1305               	bcf	5,6	;volatile
  2293  0561                     l1330:
  2294                           
  2295                           ;main.c: 412:     PORTBbits.RB4 = (byteIn & 0x08) >> 3;
  2296  0561  0876               	movf	lcd_write_nibble@byteIn,w
  2297  0562  00F4               	movwf	??_lcd_write_nibble
  2298  0563  3003               	movlw	3
  2299  0564                     u655:
  2300  0564  1003               	clrc
  2301  0565  0CF4               	rrf	??_lcd_write_nibble,f
  2302  0566  3EFF               	addlw	-1
  2303  0567  1D03               	skipz
  2304  0568  2D64               	goto	u655
  2305  0569  0874               	movf	??_lcd_write_nibble,w
  2306  056A  3901               	andlw	1
  2307  056B  00F5               	movwf	??_lcd_write_nibble+1
  2308  056C  0EF5               	swapf	??_lcd_write_nibble+1,f
  2309  056D  0806               	movf	6,w	;volatile
  2310  056E  0675               	xorwf	??_lcd_write_nibble+1,w
  2311  056F  39EF               	andlw	-17
  2312  0570  0675               	xorwf	??_lcd_write_nibble+1,w
  2313  0571  0086               	movwf	6	;volatile
  2314                           
  2315                           ;main.c: 413:     PORTBbits.RB3 = (byteIn & 0x04) >> 2;
  2316  0572  0876               	movf	lcd_write_nibble@byteIn,w
  2317  0573  00F4               	movwf	??_lcd_write_nibble
  2318  0574  3002               	movlw	2
  2319  0575                     u665:
  2320  0575  1003               	clrc
  2321  0576  0CF4               	rrf	??_lcd_write_nibble,f
  2322  0577  3EFF               	addlw	-1
  2323  0578  1D03               	skipz
  2324  0579  2D75               	goto	u665
  2325  057A  0874               	movf	??_lcd_write_nibble,w
  2326  057B  3901               	andlw	1
  2327  057C  00F5               	movwf	??_lcd_write_nibble+1
  2328  057D  0DF5               	rlf	??_lcd_write_nibble+1,f
  2329  057E  0DF5               	rlf	??_lcd_write_nibble+1,f
  2330  057F  0DF5               	rlf	??_lcd_write_nibble+1,f
  2331  0580  0806               	movf	6,w	;volatile
  2332  0581  0675               	xorwf	??_lcd_write_nibble+1,w
  2333  0582  39F7               	andlw	-9
  2334  0583  0675               	xorwf	??_lcd_write_nibble+1,w
  2335  0584  0086               	movwf	6	;volatile
  2336                           
  2337                           ;main.c: 414:     PORTBbits.RB2 = (byteIn & 0x02) >> 1;
  2338  0585  0876               	movf	lcd_write_nibble@byteIn,w
  2339  0586  00F4               	movwf	??_lcd_write_nibble
  2340  0587  1003               	clrc
  2341  0588  0C74               	rrf	??_lcd_write_nibble,w
  2342  0589  3901               	andlw	1
  2343  058A  00F5               	movwf	??_lcd_write_nibble+1
  2344  058B  0DF5               	rlf	??_lcd_write_nibble+1,f
  2345  058C  0DF5               	rlf	??_lcd_write_nibble+1,f
  2346  058D  0806               	movf	6,w	;volatile
  2347  058E  0675               	xorwf	??_lcd_write_nibble+1,w
  2348  058F  39FB               	andlw	-5
  2349  0590  0675               	xorwf	??_lcd_write_nibble+1,w
  2350  0591  0086               	movwf	6	;volatile
  2351                           
  2352                           ;main.c: 415:     PORTBbits.RB1 = byteIn & 0x01 ;
  2353  0592  0876               	movf	lcd_write_nibble@byteIn,w
  2354  0593  3901               	andlw	1
  2355  0594  00F4               	movwf	??_lcd_write_nibble
  2356  0595  0DF4               	rlf	??_lcd_write_nibble,f
  2357  0596  0806               	movf	6,w	;volatile
  2358  0597  0674               	xorwf	??_lcd_write_nibble,w
  2359  0598  39FD               	andlw	-3
  2360  0599  0674               	xorwf	??_lcd_write_nibble,w
  2361  059A  0086               	movwf	6	;volatile
  2362  059B                     l1332:
  2363                           
  2364                           ;main.c: 416:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2365  059B  3003               	movlw	3
  2366  059C  00F4               	movwf	??_lcd_write_nibble
  2367  059D                     u1387:
  2368  059D  0BF4               	decfsz	??_lcd_write_nibble,f
  2369  059E  2D9D               	goto	u1387
  2370  059F                     l1334:
  2371                           
  2372                           ;main.c: 417:     PORTAbits.RA7 = 0;
  2373  059F  1283               	bcf	3,5	;RP0=0, select bank0
  2374  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  2375  05A1  1385               	bcf	5,7	;volatile
  2376  05A2                     l137:
  2377  05A2  0008               	return
  2378  05A3                     __end_of_lcd_write_nibble:
  2379                           
  2380                           	psect	text9
  2381  0266                     __ptext9:	
  2382 ;; *************** function _intToString *****************
  2383 ;; Defined at:
  2384 ;;		line 488 in file "main.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  number          2    0[BANK0 ] unsigned short 
  2387 ;;  divisor         2    2[BANK0 ] unsigned short 
  2388 ;;  dest            1    4[BANK0 ] PTR unsigned char 
  2389 ;;		 -> main@numStr(6), 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  whole_portio    2   11[BANK0 ] unsigned short 
  2392 ;;  digits_whole    1   16[BANK0 ] unsigned char 
  2393 ;;  k               1   15[BANK0 ] unsigned char 
  2394 ;;  i               1   14[BANK0 ] unsigned char 
  2395 ;;  digits_decim    1   13[BANK0 ] unsigned char 
  2396 ;;  j               1   10[BANK0 ] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  1    wreg      unsigned char 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2406 ;;      Params:         0       5       0       0       0
  2407 ;;      Locals:         0       7       0       0       0
  2408 ;;      Temps:          0       5       0       0       0
  2409 ;;      Totals:         0      17       0       0       0
  2410 ;;Total ram usage:       17 bytes
  2411 ;; Hardware stack levels used: 1
  2412 ;; Hardware stack levels required when called: 2
  2413 ;; This function calls:
  2414 ;;		___lwdiv
  2415 ;;		___lwmod
  2416 ;;		_numDigits
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           
  2423                           ;psect for function _intToString
  2424  0266                     _intToString:
  2425  0266                     l1554:	
  2426                           ;incstack = 0
  2427                           ; Regs used in _intToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2428                           
  2429                           
  2430                           ;main.c: 489:     char i, k;;main.c: 490:     char j=0;
  2431  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0267  1303               	bcf	3,6	;RP1=0, select bank0
  2433  0268  01AA               	clrf	intToString@j
  2434  0269                     l1556:
  2435                           
  2436                           ;main.c: 491:     char digits_decimal, digits_whole;;main.c: 492:     unsigned short who
      +                          le_portion;;main.c: 494:     whole_portion = number / divisor;
  2437  0269  0823               	movf	intToString@divisor+1,w
  2438  026A  00F4               	movwf	___lwdiv@divisor+1
  2439  026B  0822               	movf	intToString@divisor,w
  2440  026C  00F3               	movwf	___lwdiv@divisor
  2441  026D  0821               	movf	intToString@number+1,w
  2442  026E  00F6               	movwf	___lwdiv@dividend+1
  2443  026F  0820               	movf	intToString@number,w
  2444  0270  00F5               	movwf	___lwdiv@dividend
  2445  0271  118A  25A3  118A   	fcall	___lwdiv
  2446  0274  0874               	movf	?___lwdiv+1,w
  2447  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0277  00AC               	movwf	intToString@whole_portion+1
  2450  0278  0873               	movf	?___lwdiv,w
  2451  0279  00AB               	movwf	intToString@whole_portion
  2452  027A                     l1558:
  2453                           
  2454                           ;main.c: 496:     if(whole_portion == 0){
  2455  027A  082B               	movf	intToString@whole_portion,w
  2456  027B  042C               	iorwf	intToString@whole_portion+1,w
  2457  027C  1D03               	btfss	3,2
  2458  027D  2A7F               	goto	u1041
  2459  027E  2A80               	goto	u1040
  2460  027F                     u1041:
  2461  027F  2A91               	goto	l1566
  2462  0280                     u1040:
  2463  0280                     l1560:
  2464                           
  2465                           ;main.c: 497:         digits_whole = 0;
  2466  0280  01B0               	clrf	intToString@digits_whole
  2467  0281                     l1562:
  2468                           
  2469                           ;main.c: 498:         digits_decimal = numDigits(divisor)-1;
  2470  0281  0823               	movf	intToString@divisor+1,w
  2471  0282  00F4               	movwf	numDigits@num+1
  2472  0283  0822               	movf	intToString@divisor,w
  2473  0284  00F3               	movwf	numDigits@num
  2474  0285  118A  2681  118A   	fcall	_numDigits
  2475  0288  3EFF               	addlw	255
  2476  0289  1283               	bcf	3,5	;RP0=0, select bank0
  2477  028A  1303               	bcf	3,6	;RP1=0, select bank0
  2478  028B  00A5               	movwf	??_intToString
  2479  028C  0825               	movf	??_intToString,w
  2480  028D  00AD               	movwf	intToString@digits_decimal
  2481  028E                     l1564:
  2482                           
  2483                           ;main.c: 499:         k = 1;
  2484  028E  01AF               	clrf	intToString@k
  2485  028F  0AAF               	incf	intToString@k,f
  2486                           
  2487                           ;main.c: 500:     } else {
  2488  0290  2AAD               	goto	l1572
  2489  0291                     l1566:
  2490                           
  2491                           ;main.c: 501:         digits_whole = numDigits(whole_portion);
  2492  0291  082C               	movf	intToString@whole_portion+1,w
  2493  0292  00F4               	movwf	numDigits@num+1
  2494  0293  082B               	movf	intToString@whole_portion,w
  2495  0294  00F3               	movwf	numDigits@num
  2496  0295  118A  2681  118A   	fcall	_numDigits
  2497  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2499  029A  00A5               	movwf	??_intToString
  2500  029B  0825               	movf	??_intToString,w
  2501  029C  00B0               	movwf	intToString@digits_whole
  2502  029D                     l1568:
  2503                           
  2504                           ;main.c: 502:         k = 0;
  2505  029D  01AF               	clrf	intToString@k
  2506  029E                     l1570:
  2507                           
  2508                           ;main.c: 503:         digits_decimal = numDigits(number) - digits_whole;
  2509  029E  0821               	movf	intToString@number+1,w
  2510  029F  00F4               	movwf	numDigits@num+1
  2511  02A0  0820               	movf	intToString@number,w
  2512  02A1  00F3               	movwf	numDigits@num
  2513  02A2  118A  2681  118A   	fcall	_numDigits
  2514  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  2515  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  2516  02A7  00A5               	movwf	??_intToString
  2517  02A8  0830               	movf	intToString@digits_whole,w
  2518  02A9  0225               	subwf	??_intToString,w
  2519  02AA  00A6               	movwf	??_intToString+1
  2520  02AB  0826               	movf	??_intToString+1,w
  2521  02AC  00AD               	movwf	intToString@digits_decimal
  2522  02AD                     l1572:
  2523                           
  2524                           ;main.c: 506:     if (number == 0) {
  2525  02AD  0820               	movf	intToString@number,w
  2526  02AE  0421               	iorwf	intToString@number+1,w
  2527  02AF  1D03               	btfss	3,2
  2528  02B0  2AB2               	goto	u1051
  2529  02B1  2AB3               	goto	u1050
  2530  02B2                     u1051:
  2531  02B2  2ABE               	goto	l1582
  2532  02B3                     u1050:
  2533  02B3                     l1574:
  2534                           
  2535                           ;main.c: 507:         dest[0] = '0';
  2536  02B3  3030               	movlw	48
  2537  02B4  00A5               	movwf	??_intToString
  2538  02B5  0824               	movf	intToString@dest,w
  2539  02B6  0084               	movwf	4
  2540  02B7  0825               	movf	??_intToString,w
  2541  02B8  1383               	bcf	3,7	;select IRP bank0
  2542  02B9  0080               	movwf	0
  2543  02BA                     l1576:
  2544                           
  2545                           ;main.c: 508:         dest[1] = '\0';
  2546  02BA  0A24               	incf	intToString@dest,w
  2547  02BB  0084               	movwf	4
  2548  02BC  0180               	clrf	0
  2549  02BD  2B6C               	goto	l176
  2550  02BE                     l1582:
  2551                           
  2552                           ;main.c: 511:         for (i = 0; i < digits_decimal; i++) {
  2553  02BE  01AE               	clrf	intToString@i
  2554  02BF  2AF7               	goto	l1590
  2555  02C0                     l1584:
  2556                           
  2557                           ;main.c: 512:             dest[digits_whole+digits_decimal - i +k] = (number % 10) + 48;
  2558  02C0  300A               	movlw	10
  2559  02C1  00F3               	movwf	___lwmod@divisor
  2560  02C2  3000               	movlw	0
  2561  02C3  00F4               	movwf	___lwmod@divisor+1
  2562  02C4  0821               	movf	intToString@number+1,w
  2563  02C5  00F6               	movwf	___lwmod@dividend+1
  2564  02C6  0820               	movf	intToString@number,w
  2565  02C7  00F5               	movwf	___lwmod@dividend
  2566  02C8  118A  25E7  118A   	fcall	___lwmod
  2567  02CB  0873               	movf	?___lwmod,w
  2568  02CC  3E30               	addlw	48
  2569  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2570  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2571  02CF  00A5               	movwf	??_intToString
  2572  02D0  0824               	movf	intToString@dest,w
  2573  02D1  00A6               	movwf	??_intToString+1
  2574  02D2  082E               	movf	intToString@i,w
  2575  02D3  02A6               	subwf	??_intToString+1,f
  2576  02D4  082F               	movf	intToString@k,w
  2577  02D5  0726               	addwf	??_intToString+1,w
  2578  02D6  00A7               	movwf	??_intToString+2
  2579  02D7  082D               	movf	intToString@digits_decimal,w
  2580  02D8  0727               	addwf	??_intToString+2,w
  2581  02D9  00A8               	movwf	??_intToString+3
  2582  02DA  0830               	movf	intToString@digits_whole,w
  2583  02DB  0728               	addwf	??_intToString+3,w
  2584  02DC  00A9               	movwf	??_intToString+4
  2585  02DD  0829               	movf	??_intToString+4,w
  2586  02DE  0084               	movwf	4
  2587  02DF  0825               	movf	??_intToString,w
  2588  02E0  1383               	bcf	3,7	;select IRP bank0
  2589  02E1  0080               	movwf	0
  2590  02E2                     l1586:
  2591                           
  2592                           ;main.c: 513:             number = number / 10;
  2593  02E2  300A               	movlw	10
  2594  02E3  00F3               	movwf	___lwdiv@divisor
  2595  02E4  3000               	movlw	0
  2596  02E5  00F4               	movwf	___lwdiv@divisor+1
  2597  02E6  0821               	movf	intToString@number+1,w
  2598  02E7  00F6               	movwf	___lwdiv@dividend+1
  2599  02E8  0820               	movf	intToString@number,w
  2600  02E9  00F5               	movwf	___lwdiv@dividend
  2601  02EA  118A  25A3  118A   	fcall	___lwdiv
  2602  02ED  0874               	movf	?___lwdiv+1,w
  2603  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  2604  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  2605  02F0  00A1               	movwf	intToString@number+1
  2606  02F1  0873               	movf	?___lwdiv,w
  2607  02F2  00A0               	movwf	intToString@number
  2608  02F3                     l1588:
  2609                           
  2610                           ;main.c: 514:         }
  2611  02F3  3001               	movlw	1
  2612  02F4  00A5               	movwf	??_intToString
  2613  02F5  0825               	movf	??_intToString,w
  2614  02F6  07AE               	addwf	intToString@i,f
  2615  02F7                     l1590:
  2616  02F7  082D               	movf	intToString@digits_decimal,w
  2617  02F8  022E               	subwf	intToString@i,w
  2618  02F9  1C03               	skipc
  2619  02FA  2AFC               	goto	u1061
  2620  02FB  2AFD               	goto	u1060
  2621  02FC                     u1061:
  2622  02FC  2AC0               	goto	l1584
  2623  02FD                     u1060:
  2624  02FD                     l1592:
  2625                           
  2626                           ;main.c: 515:         if(digits_decimal != 0){
  2627  02FD  082D               	movf	intToString@digits_decimal,w
  2628  02FE  1903               	btfsc	3,2
  2629  02FF  2B01               	goto	u1071
  2630  0300  2B02               	goto	u1070
  2631  0301                     u1071:
  2632  0301  2B11               	goto	l1598
  2633  0302                     u1070:
  2634  0302                     l1594:
  2635                           
  2636                           ;main.c: 516:             dest[digits_whole+k] = '.';
  2637  0302  302E               	movlw	46
  2638  0303  00A5               	movwf	??_intToString
  2639  0304  082F               	movf	intToString@k,w
  2640  0305  0724               	addwf	intToString@dest,w
  2641  0306  00A6               	movwf	??_intToString+1
  2642  0307  0830               	movf	intToString@digits_whole,w
  2643  0308  0726               	addwf	??_intToString+1,w
  2644  0309  00A7               	movwf	??_intToString+2
  2645  030A  0827               	movf	??_intToString+2,w
  2646  030B  0084               	movwf	4
  2647  030C  0825               	movf	??_intToString,w
  2648  030D  1383               	bcf	3,7	;select IRP bank0
  2649  030E  0080               	movwf	0
  2650  030F                     l1596:
  2651                           
  2652                           ;main.c: 517:             j=1;
  2653  030F  01AA               	clrf	intToString@j
  2654  0310  0AAA               	incf	intToString@j,f
  2655  0311                     l1598:
  2656                           
  2657                           ;main.c: 520:         for (i = 0; i < digits_whole+k; i++) {
  2658  0311  01AE               	clrf	intToString@i
  2659  0312  2B4A               	goto	l1606
  2660  0313                     l1600:
  2661                           
  2662                           ;main.c: 521:             dest[digits_whole - i - 1 + k] = (number % 10) + 48;
  2663  0313  300A               	movlw	10
  2664  0314  00F3               	movwf	___lwmod@divisor
  2665  0315  3000               	movlw	0
  2666  0316  00F4               	movwf	___lwmod@divisor+1
  2667  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0318  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0319  0821               	movf	intToString@number+1,w
  2670  031A  00F6               	movwf	___lwmod@dividend+1
  2671  031B  0820               	movf	intToString@number,w
  2672  031C  00F5               	movwf	___lwmod@dividend
  2673  031D  118A  25E7  118A   	fcall	___lwmod
  2674  0320  0873               	movf	?___lwmod,w
  2675  0321  3E30               	addlw	48
  2676  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2677  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2678  0324  00A5               	movwf	??_intToString
  2679  0325  0824               	movf	intToString@dest,w
  2680  0326  00A6               	movwf	??_intToString+1
  2681  0327  082E               	movf	intToString@i,w
  2682  0328  02A6               	subwf	??_intToString+1,f
  2683  0329  0830               	movf	intToString@digits_whole,w
  2684  032A  0726               	addwf	??_intToString+1,w
  2685  032B  00A7               	movwf	??_intToString+2
  2686  032C  082F               	movf	intToString@k,w
  2687  032D  0727               	addwf	??_intToString+2,w
  2688  032E  00A8               	movwf	??_intToString+3
  2689  032F  0828               	movf	??_intToString+3,w
  2690  0330  3EFF               	addlw	-1
  2691  0331  0084               	movwf	4
  2692  0332  0825               	movf	??_intToString,w
  2693  0333  1383               	bcf	3,7	;select IRP bank0
  2694  0334  0080               	movwf	0
  2695  0335                     l1602:
  2696                           
  2697                           ;main.c: 522:             number = number / 10;
  2698  0335  300A               	movlw	10
  2699  0336  00F3               	movwf	___lwdiv@divisor
  2700  0337  3000               	movlw	0
  2701  0338  00F4               	movwf	___lwdiv@divisor+1
  2702  0339  0821               	movf	intToString@number+1,w
  2703  033A  00F6               	movwf	___lwdiv@dividend+1
  2704  033B  0820               	movf	intToString@number,w
  2705  033C  00F5               	movwf	___lwdiv@dividend
  2706  033D  118A  25A3  118A   	fcall	___lwdiv
  2707  0340  0874               	movf	?___lwdiv+1,w
  2708  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0343  00A1               	movwf	intToString@number+1
  2711  0344  0873               	movf	?___lwdiv,w
  2712  0345  00A0               	movwf	intToString@number
  2713  0346                     l1604:
  2714                           
  2715                           ;main.c: 523:         }
  2716  0346  3001               	movlw	1
  2717  0347  00A5               	movwf	??_intToString
  2718  0348  0825               	movf	??_intToString,w
  2719  0349  07AE               	addwf	intToString@i,f
  2720  034A                     l1606:
  2721  034A  0830               	movf	intToString@digits_whole,w
  2722  034B  072F               	addwf	intToString@k,w
  2723  034C  00A5               	movwf	??_intToString
  2724  034D  01A6               	clrf	??_intToString+1
  2725  034E  0DA6               	rlf	??_intToString+1,f
  2726  034F  0826               	movf	??_intToString+1,w
  2727  0350  3A80               	xorlw	128
  2728  0351  3C80               	sublw	128
  2729  0352  1D03               	skipz
  2730  0353  2B56               	goto	u1085
  2731  0354  0825               	movf	??_intToString,w
  2732  0355  022E               	subwf	intToString@i,w
  2733  0356                     u1085:
  2734  0356  1C03               	skipc
  2735  0357  2B59               	goto	u1081
  2736  0358  2B5A               	goto	u1080
  2737  0359                     u1081:
  2738  0359  2B13               	goto	l1600
  2739  035A                     u1080:
  2740  035A                     l1608:
  2741                           
  2742                           ;main.c: 524:         dest[digits_whole+digits_decimal + j + k] = '\0';
  2743  035A  1283               	bcf	3,5	;RP0=0, select bank0
  2744  035B  1303               	bcf	3,6	;RP1=0, select bank0
  2745  035C  082F               	movf	intToString@k,w
  2746  035D  0724               	addwf	intToString@dest,w
  2747  035E  00A5               	movwf	??_intToString
  2748  035F  082A               	movf	intToString@j,w
  2749  0360  0725               	addwf	??_intToString,w
  2750  0361  00A6               	movwf	??_intToString+1
  2751  0362  0830               	movf	intToString@digits_whole,w
  2752  0363  0726               	addwf	??_intToString+1,w
  2753  0364  00A7               	movwf	??_intToString+2
  2754  0365  082D               	movf	intToString@digits_decimal,w
  2755  0366  0727               	addwf	??_intToString+2,w
  2756  0367  00A8               	movwf	??_intToString+3
  2757  0368  0828               	movf	??_intToString+3,w
  2758  0369  0084               	movwf	4
  2759  036A  1383               	bcf	3,7	;select IRP bank0
  2760  036B  0180               	clrf	0
  2761  036C                     l176:
  2762  036C  0008               	return
  2763  036D                     __end_of_intToString:
  2764                           
  2765                           	psect	text10
  2766  0681                     __ptext10:	
  2767 ;; *************** function _numDigits *****************
  2768 ;; Defined at:
  2769 ;;		line 474 in file "main.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  num             2    3[COMMON] unsigned short 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      unsigned char 
  2776 ;; Registers used:
  2777 ;;		wreg
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2783 ;;      Params:         2       0       0       0       0
  2784 ;;      Locals:         0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0
  2786 ;;      Totals:         2       0       0       0       0
  2787 ;;Total ram usage:        2 bytes
  2788 ;; Hardware stack levels used: 1
  2789 ;; Hardware stack levels required when called: 1
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_intToString
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function _numDigits
  2799  0681                     _numDigits:
  2800  0681                     l1350:	
  2801                           ;incstack = 0
  2802                           ; Regs used in _numDigits: [wreg]
  2803                           
  2804                           
  2805                           ;main.c: 475:     if (num < 10)
  2806  0681  3000               	movlw	0
  2807  0682  0274               	subwf	numDigits@num+1,w
  2808  0683  300A               	movlw	10
  2809  0684  1903               	skipnz
  2810  0685  0273               	subwf	numDigits@num,w
  2811  0686  1803               	skipnc
  2812  0687  2E89               	goto	u681
  2813  0688  2E8A               	goto	u680
  2814  0689                     u681:
  2815  0689  2E8C               	goto	l1358
  2816  068A                     u680:
  2817  068A                     l1352:
  2818                           
  2819                           ;main.c: 476:         return 1;
  2820  068A  3001               	movlw	1
  2821  068B  2EAE               	goto	l163
  2822  068C                     l1358:
  2823  068C  3000               	movlw	0
  2824  068D  0274               	subwf	numDigits@num+1,w
  2825  068E  3064               	movlw	100
  2826  068F  1903               	skipnz
  2827  0690  0273               	subwf	numDigits@num,w
  2828  0691  1803               	skipnc
  2829  0692  2E94               	goto	u691
  2830  0693  2E95               	goto	u690
  2831  0694                     u691:
  2832  0694  2E97               	goto	l1366
  2833  0695                     u690:
  2834  0695                     l1360:
  2835                           
  2836                           ;main.c: 478:         return 2;
  2837  0695  3002               	movlw	2
  2838  0696  2EAE               	goto	l163
  2839  0697                     l1366:
  2840  0697  3003               	movlw	3
  2841  0698  0274               	subwf	numDigits@num+1,w
  2842  0699  30E8               	movlw	232
  2843  069A  1903               	skipnz
  2844  069B  0273               	subwf	numDigits@num,w
  2845  069C  1803               	skipnc
  2846  069D  2E9F               	goto	u701
  2847  069E  2EA0               	goto	u700
  2848  069F                     u701:
  2849  069F  2EA2               	goto	l1374
  2850  06A0                     u700:
  2851  06A0                     l1368:
  2852                           
  2853                           ;main.c: 480:         return 3;
  2854  06A0  3003               	movlw	3
  2855  06A1  2EAE               	goto	l163
  2856  06A2                     l1374:
  2857  06A2  3027               	movlw	39
  2858  06A3  0274               	subwf	numDigits@num+1,w
  2859  06A4  3010               	movlw	16
  2860  06A5  1903               	skipnz
  2861  06A6  0273               	subwf	numDigits@num,w
  2862  06A7  1803               	skipnc
  2863  06A8  2EAA               	goto	u711
  2864  06A9  2EAB               	goto	u710
  2865  06AA                     u711:
  2866  06AA  2EAD               	goto	l1382
  2867  06AB                     u710:
  2868  06AB                     l1376:
  2869                           
  2870                           ;main.c: 482:         return 4;
  2871  06AB  3004               	movlw	4
  2872  06AC  2EAE               	goto	l163
  2873  06AD                     l1382:
  2874                           
  2875                           ;main.c: 484:         return 5;
  2876  06AD  3005               	movlw	5
  2877  06AE                     l163:
  2878  06AE  0008               	return
  2879  06AF                     __end_of_numDigits:
  2880                           
  2881                           	psect	text11
  2882  05E7                     __ptext11:	
  2883 ;; *************** function ___lwmod *****************
  2884 ;; Defined at:
  2885 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  divisor         2    3[COMMON] unsigned int 
  2888 ;;  dividend        2    5[COMMON] unsigned int 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  counter         1    8[COMMON] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2    3[COMMON] unsigned int 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2900 ;;      Params:         4       0       0       0       0
  2901 ;;      Locals:         1       0       0       0       0
  2902 ;;      Temps:          1       0       0       0       0
  2903 ;;      Totals:         6       0       0       0       0
  2904 ;;Total ram usage:        6 bytes
  2905 ;; Hardware stack levels used: 1
  2906 ;; Hardware stack levels required when called: 1
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_intToString
  2911 ;; This function uses a non-reentrant model
  2912 ;;
  2913                           
  2914                           
  2915                           ;psect for function ___lwmod
  2916  05E7                     ___lwmod:
  2917  05E7                     l1464:	
  2918                           ;incstack = 0
  2919                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2920                           
  2921  05E7  0873               	movf	___lwmod@divisor,w
  2922  05E8  0474               	iorwf	___lwmod@divisor+1,w
  2923  05E9  1903               	btfsc	3,2
  2924  05EA  2DEC               	goto	u901
  2925  05EB  2DED               	goto	u900
  2926  05EC                     u901:
  2927  05EC  2E1C               	goto	l1482
  2928  05ED                     u900:
  2929  05ED                     l1466:
  2930  05ED  01F8               	clrf	___lwmod@counter
  2931  05EE  0AF8               	incf	___lwmod@counter,f
  2932  05EF  2DFB               	goto	l1472
  2933  05F0                     l1468:
  2934  05F0  3001               	movlw	1
  2935  05F1                     u915:
  2936  05F1  1003               	clrc
  2937  05F2  0DF3               	rlf	___lwmod@divisor,f
  2938  05F3  0DF4               	rlf	___lwmod@divisor+1,f
  2939  05F4  3EFF               	addlw	-1
  2940  05F5  1D03               	skipz
  2941  05F6  2DF1               	goto	u915
  2942  05F7                     l1470:
  2943  05F7  3001               	movlw	1
  2944  05F8  00F7               	movwf	??___lwmod
  2945  05F9  0877               	movf	??___lwmod,w
  2946  05FA  07F8               	addwf	___lwmod@counter,f
  2947  05FB                     l1472:
  2948  05FB  1FF4               	btfss	___lwmod@divisor+1,7
  2949  05FC  2DFE               	goto	u921
  2950  05FD  2DFF               	goto	u920
  2951  05FE                     u921:
  2952  05FE  2DF0               	goto	l1468
  2953  05FF                     u920:
  2954  05FF                     l1474:
  2955  05FF  0874               	movf	___lwmod@divisor+1,w
  2956  0600  0276               	subwf	___lwmod@dividend+1,w
  2957  0601  1D03               	skipz
  2958  0602  2E05               	goto	u935
  2959  0603  0873               	movf	___lwmod@divisor,w
  2960  0604  0275               	subwf	___lwmod@dividend,w
  2961  0605                     u935:
  2962  0605  1C03               	skipc
  2963  0606  2E08               	goto	u931
  2964  0607  2E09               	goto	u930
  2965  0608                     u931:
  2966  0608  2E0F               	goto	l1478
  2967  0609                     u930:
  2968  0609                     l1476:
  2969  0609  0873               	movf	___lwmod@divisor,w
  2970  060A  02F5               	subwf	___lwmod@dividend,f
  2971  060B  0874               	movf	___lwmod@divisor+1,w
  2972  060C  1C03               	skipc
  2973  060D  03F6               	decf	___lwmod@dividend+1,f
  2974  060E  02F6               	subwf	___lwmod@dividend+1,f
  2975  060F                     l1478:
  2976  060F  3001               	movlw	1
  2977  0610                     u945:
  2978  0610  1003               	clrc
  2979  0611  0CF4               	rrf	___lwmod@divisor+1,f
  2980  0612  0CF3               	rrf	___lwmod@divisor,f
  2981  0613  3EFF               	addlw	-1
  2982  0614  1D03               	skipz
  2983  0615  2E10               	goto	u945
  2984  0616                     l1480:
  2985  0616  3001               	movlw	1
  2986  0617  02F8               	subwf	___lwmod@counter,f
  2987  0618  1D03               	btfss	3,2
  2988  0619  2E1B               	goto	u951
  2989  061A  2E1C               	goto	u950
  2990  061B                     u951:
  2991  061B  2DFF               	goto	l1474
  2992  061C                     u950:
  2993  061C                     l1482:
  2994  061C  0876               	movf	___lwmod@dividend+1,w
  2995  061D  00F4               	movwf	?___lwmod+1
  2996  061E  0875               	movf	___lwmod@dividend,w
  2997  061F  00F3               	movwf	?___lwmod
  2998  0620                     l552:
  2999  0620  0008               	return
  3000  0621                     __end_of___lwmod:
  3001                           
  3002                           	psect	text12
  3003  05A3                     __ptext12:	
  3004 ;; *************** function ___lwdiv *****************
  3005 ;; Defined at:
  3006 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  divisor         2    3[COMMON] unsigned int 
  3009 ;;  dividend        2    5[COMMON] unsigned int 
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;  quotient        2    8[COMMON] unsigned int 
  3012 ;;  counter         1   10[COMMON] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  2    3[COMMON] unsigned int 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3022 ;;      Params:         4       0       0       0       0
  3023 ;;      Locals:         3       0       0       0       0
  3024 ;;      Temps:          1       0       0       0       0
  3025 ;;      Totals:         8       0       0       0       0
  3026 ;;Total ram usage:        8 bytes
  3027 ;; Hardware stack levels used: 1
  3028 ;; Hardware stack levels required when called: 1
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_intToString
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           
  3037                           ;psect for function ___lwdiv
  3038  05A3                     ___lwdiv:
  3039  05A3                     l1438:	
  3040                           ;incstack = 0
  3041                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3042                           
  3043  05A3  01F8               	clrf	___lwdiv@quotient
  3044  05A4  01F9               	clrf	___lwdiv@quotient+1
  3045  05A5                     l1440:
  3046  05A5  0873               	movf	___lwdiv@divisor,w
  3047  05A6  0474               	iorwf	___lwdiv@divisor+1,w
  3048  05A7  1903               	btfsc	3,2
  3049  05A8  2DAA               	goto	u831
  3050  05A9  2DAB               	goto	u830
  3051  05AA                     u831:
  3052  05AA  2DE2               	goto	l1460
  3053  05AB                     u830:
  3054  05AB                     l1442:
  3055  05AB  01FA               	clrf	___lwdiv@counter
  3056  05AC  0AFA               	incf	___lwdiv@counter,f
  3057  05AD  2DB9               	goto	l1448
  3058  05AE                     l1444:
  3059  05AE  3001               	movlw	1
  3060  05AF                     u845:
  3061  05AF  1003               	clrc
  3062  05B0  0DF3               	rlf	___lwdiv@divisor,f
  3063  05B1  0DF4               	rlf	___lwdiv@divisor+1,f
  3064  05B2  3EFF               	addlw	-1
  3065  05B3  1D03               	skipz
  3066  05B4  2DAF               	goto	u845
  3067  05B5                     l1446:
  3068  05B5  3001               	movlw	1
  3069  05B6  00F7               	movwf	??___lwdiv
  3070  05B7  0877               	movf	??___lwdiv,w
  3071  05B8  07FA               	addwf	___lwdiv@counter,f
  3072  05B9                     l1448:
  3073  05B9  1FF4               	btfss	___lwdiv@divisor+1,7
  3074  05BA  2DBC               	goto	u851
  3075  05BB  2DBD               	goto	u850
  3076  05BC                     u851:
  3077  05BC  2DAE               	goto	l1444
  3078  05BD                     u850:
  3079  05BD                     l1450:
  3080  05BD  3001               	movlw	1
  3081  05BE                     u865:
  3082  05BE  1003               	clrc
  3083  05BF  0DF8               	rlf	___lwdiv@quotient,f
  3084  05C0  0DF9               	rlf	___lwdiv@quotient+1,f
  3085  05C1  3EFF               	addlw	-1
  3086  05C2  1D03               	skipz
  3087  05C3  2DBE               	goto	u865
  3088  05C4  0874               	movf	___lwdiv@divisor+1,w
  3089  05C5  0276               	subwf	___lwdiv@dividend+1,w
  3090  05C6  1D03               	skipz
  3091  05C7  2DCA               	goto	u875
  3092  05C8  0873               	movf	___lwdiv@divisor,w
  3093  05C9  0275               	subwf	___lwdiv@dividend,w
  3094  05CA                     u875:
  3095  05CA  1C03               	skipc
  3096  05CB  2DCD               	goto	u871
  3097  05CC  2DCE               	goto	u870
  3098  05CD                     u871:
  3099  05CD  2DD5               	goto	l1456
  3100  05CE                     u870:
  3101  05CE                     l1452:
  3102  05CE  0873               	movf	___lwdiv@divisor,w
  3103  05CF  02F5               	subwf	___lwdiv@dividend,f
  3104  05D0  0874               	movf	___lwdiv@divisor+1,w
  3105  05D1  1C03               	skipc
  3106  05D2  03F6               	decf	___lwdiv@dividend+1,f
  3107  05D3  02F6               	subwf	___lwdiv@dividend+1,f
  3108  05D4                     l1454:
  3109  05D4  1478               	bsf	___lwdiv@quotient,0
  3110  05D5                     l1456:
  3111  05D5  3001               	movlw	1
  3112  05D6                     u885:
  3113  05D6  1003               	clrc
  3114  05D7  0CF4               	rrf	___lwdiv@divisor+1,f
  3115  05D8  0CF3               	rrf	___lwdiv@divisor,f
  3116  05D9  3EFF               	addlw	-1
  3117  05DA  1D03               	skipz
  3118  05DB  2DD6               	goto	u885
  3119  05DC                     l1458:
  3120  05DC  3001               	movlw	1
  3121  05DD  02FA               	subwf	___lwdiv@counter,f
  3122  05DE  1D03               	btfss	3,2
  3123  05DF  2DE1               	goto	u891
  3124  05E0  2DE2               	goto	u890
  3125  05E1                     u891:
  3126  05E1  2DBD               	goto	l1450
  3127  05E2                     u890:
  3128  05E2                     l1460:
  3129  05E2  0879               	movf	___lwdiv@quotient+1,w
  3130  05E3  00F4               	movwf	?___lwdiv+1
  3131  05E4  0878               	movf	___lwdiv@quotient,w
  3132  05E5  00F3               	movwf	?___lwdiv
  3133  05E6                     l542:
  3134  05E6  0008               	return
  3135  05E7                     __end_of___lwdiv:
  3136                           
  3137                           	psect	text13
  3138  036D                     __ptext13:	
  3139 ;; *************** function _isr *****************
  3140 ;; Defined at:
  3141 ;;		line 304 in file "main.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      void 
  3148 ;; Registers used:
  3149 ;;		wreg, status,2, status,0
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3155 ;;      Params:         0       0       0       0       0
  3156 ;;      Locals:         0       0       0       0       0
  3157 ;;      Temps:          3       0       0       0       0
  3158 ;;      Totals:         3       0       0       0       0
  3159 ;;Total ram usage:        3 bytes
  3160 ;; Hardware stack levels used: 1
  3161 ;; This function calls:
  3162 ;;		Nothing
  3163 ;; This function is called by:
  3164 ;;		Interrupt level 1
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           
  3169                           ;psect for function _isr
  3170  036D                     _isr:
  3171  036D                     i1l1804:
  3172                           
  3173                           ;main.c: 306:     if (TMR0IE && TMR0IF) {
  3174  036D  1E8B               	btfss	11,5	;volatile
  3175  036E  2B70               	goto	u112_21
  3176  036F  2B71               	goto	u112_20
  3177  0370                     u112_21:
  3178  0370  2B86               	goto	i1l107
  3179  0371                     u112_20:
  3180  0371                     i1l1806:
  3181  0371  1D0B               	btfss	11,2	;volatile
  3182  0372  2B74               	goto	u113_21
  3183  0373  2B75               	goto	u113_20
  3184  0374                     u113_21:
  3185  0374  2B86               	goto	i1l107
  3186  0375                     u113_20:
  3187  0375                     i1l1808:
  3188                           
  3189                           ;main.c: 308:         if (ADCON0 & 0b00000100){
  3190  0375  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0376  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0377  1D1F               	btfss	31,2	;volatile
  3193  0378  2B7A               	goto	u114_21
  3194  0379  2B7B               	goto	u114_20
  3195  037A                     u114_21:
  3196  037A  2B81               	goto	i1l1814
  3197  037B                     u114_20:
  3198  037B                     i1l1810:
  3199                           
  3200                           ;main.c: 310:             ADCON0 &= 0b11111011;
  3201  037B  30FB               	movlw	251
  3202  037C  00F0               	movwf	??_isr
  3203  037D  0870               	movf	??_isr,w
  3204  037E  059F               	andwf	31,f	;volatile
  3205  037F                     i1l1812:
  3206                           
  3207                           ;main.c: 311:             PORTB |= 0b01000000;
  3208  037F  1706               	bsf	6,6	;volatile
  3209                           
  3210                           ;main.c: 313:         } else if ((ADCON0 & 0b00111000) == 0b00001000){
  3211  0380  2B83               	goto	i1l1818
  3212  0381                     i1l1814:
  3213  0381  081F               	movf	31,w	;volatile
  3214  0382                     i1l1816:
  3215                           
  3216                           ;main.c: 314:             ADCON0 |= 0b00000100;
  3217  0382  151F               	bsf	31,2	;volatile
  3218  0383                     i1l1818:	
  3219                           ;main.c: 316:         } else {
  3220                           
  3221                           
  3222                           ;main.c: 320:         TMR0 = 0;
  3223  0383  0181               	clrf	1	;volatile
  3224  0384                     i1l1820:
  3225                           
  3226                           ;main.c: 321:         TMR0IF = 0;
  3227  0384  110B               	bcf	11,2	;volatile
  3228                           
  3229                           ;main.c: 323:     } else if (TMR1IE && TMR1IF) {
  3230  0385  2BFC               	goto	i1l124
  3231  0386                     i1l107:
  3232  0386  1683               	bsf	3,5	;RP0=1, select bank1
  3233  0387  1303               	bcf	3,6	;RP1=0, select bank1
  3234  0388  1C0C               	btfss	12,0	;volatile
  3235  0389  2B8B               	goto	u115_21
  3236  038A  2B8C               	goto	u115_20
  3237  038B                     u115_21:
  3238  038B  2B99               	goto	i1l1830
  3239  038C                     u115_20:
  3240  038C                     i1l1822:
  3241  038C  1283               	bcf	3,5	;RP0=0, select bank0
  3242  038D  1303               	bcf	3,6	;RP1=0, select bank0
  3243  038E  1C0C               	btfss	12,0	;volatile
  3244  038F  2B91               	goto	u116_21
  3245  0390  2B92               	goto	u116_20
  3246  0391                     u116_21:
  3247  0391  2B99               	goto	i1l1830
  3248  0392                     u116_20:
  3249  0392                     i1l1824:
  3250                           
  3251                           ;main.c: 325:         events |= 0b00010000;
  3252  0392  163F               	bsf	_events,4	;volatile
  3253  0393                     i1l1826:
  3254                           
  3255                           ;main.c: 327:         TMR1H = 0x9E;
  3256  0393  309E               	movlw	158
  3257  0394  008F               	movwf	15	;volatile
  3258                           
  3259                           ;main.c: 328:         TMR1L = 0x40;
  3260  0395  3040               	movlw	64
  3261  0396  008E               	movwf	14	;volatile
  3262  0397                     i1l1828:
  3263                           
  3264                           ;main.c: 329:         TMR1IF = 0;
  3265  0397  100C               	bcf	12,0	;volatile
  3266                           
  3267                           ;main.c: 331:     } else if (TMR2IE & TMR2IF) {
  3268  0398  2BFC               	goto	i1l124
  3269  0399                     i1l1830:
  3270  0399  3001               	movlw	1
  3271  039A  1683               	bsf	3,5	;RP0=1, select bank1
  3272  039B  1303               	bcf	3,6	;RP1=0, select bank1
  3273  039C  1C8C               	btfss	12,1	;volatile
  3274  039D  3900               	andlw	0
  3275  039E  1283               	bcf	3,5	;RP0=0, select bank0
  3276  039F  1303               	bcf	3,6	;RP1=0, select bank0
  3277  03A0  1C8C               	btfss	12,1	;volatile
  3278  03A1  3900               	andlw	0
  3279  03A2  3800               	iorlw	0
  3280  03A3  1903               	skipnz
  3281  03A4  2BA6               	goto	u117_21
  3282  03A5  2BA7               	goto	u117_20
  3283  03A6                     u117_21:
  3284  03A6  2BAF               	goto	i1l115
  3285  03A7                     u117_20:
  3286  03A7                     i1l1832:
  3287                           
  3288                           ;main.c: 332:         PR2 = 80;
  3289  03A7  3050               	movlw	80
  3290  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  3291  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  3292  03AA  0092               	movwf	18	;volatile
  3293  03AB                     i1l1834:
  3294                           
  3295                           ;main.c: 334:         TMR2IF = 0;
  3296  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  3297  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  3298  03AD  108C               	bcf	12,1	;volatile
  3299                           
  3300                           ;main.c: 336:     } else if (ADIE && ADIF){
  3301  03AE  2BFC               	goto	i1l124
  3302  03AF                     i1l115:
  3303  03AF  1683               	bsf	3,5	;RP0=1, select bank1
  3304  03B0  1303               	bcf	3,6	;RP1=0, select bank1
  3305  03B1  1F0C               	btfss	12,6	;volatile
  3306  03B2  2BB4               	goto	u118_21
  3307  03B3  2BB5               	goto	u118_20
  3308  03B4                     u118_21:
  3309  03B4  2BF0               	goto	i1l117
  3310  03B5                     u118_20:
  3311  03B5                     i1l1836:
  3312  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  3313  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  3314  03B7  1F0C               	btfss	12,6	;volatile
  3315  03B8  2BBA               	goto	u119_21
  3316  03B9  2BBB               	goto	u119_20
  3317  03BA                     u119_21:
  3318  03BA  2BF0               	goto	i1l117
  3319  03BB                     u119_20:
  3320  03BB                     i1l1838:
  3321                           
  3322                           ;main.c: 338:         if (ADCON0 & 0b00000100){
  3323  03BB  1D1F               	btfss	31,2	;volatile
  3324  03BC  2BBE               	goto	u120_21
  3325  03BD  2BBF               	goto	u120_20
  3326  03BE                     u120_21:
  3327  03BE  2BC0               	goto	i1l1842
  3328  03BF                     u120_20:
  3329  03BF                     i1l1840:
  3330                           
  3331                           ;main.c: 340:             PORTB |= 0b01000000;
  3332  03BF  1706               	bsf	6,6	;volatile
  3333  03C0                     i1l1842:
  3334                           
  3335                           ;main.c: 344:         if ((ADCON0 & 0b00111000) == 0b00001000){
  3336  03C0  3038               	movlw	56
  3337  03C1  051F               	andwf	31,w	;volatile
  3338  03C2  00F0               	movwf	??_isr
  3339  03C3  3008               	movlw	8
  3340  03C4  0670               	xorwf	??_isr,w
  3341  03C5  1D03               	btfss	3,2
  3342  03C6  2BC8               	goto	u121_21
  3343  03C7  2BC9               	goto	u121_20
  3344  03C8                     u121_21:
  3345  03C8  2BD6               	goto	i1l1848
  3346  03C9                     u121_20:
  3347  03C9                     i1l1844:
  3348                           
  3349                           ;main.c: 345:             vbatt = (ADRESH << 8) | ADRESL;
  3350  03C9  081E               	movf	30,w	;volatile
  3351  03CA  00BE               	movwf	_vbatt+1	;volatile
  3352  03CB  1683               	bsf	3,5	;RP0=1, select bank1
  3353  03CC  1303               	bcf	3,6	;RP1=0, select bank1
  3354  03CD  081E               	movf	30,w	;volatile
  3355  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  3356  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  3357  03D0  00BD               	movwf	_vbatt	;volatile
  3358  03D1                     i1l1846:
  3359                           
  3360                           ;main.c: 346:             ADCON0 &= 0b11000111;
  3361  03D1  30C7               	movlw	199
  3362  03D2  00F0               	movwf	??_isr
  3363  03D3  0870               	movf	??_isr,w
  3364  03D4  059F               	andwf	31,f	;volatile
  3365                           
  3366                           ;main.c: 348:         } else if ((ADCON0 & 0b00111000) == 0){
  3367  03D5  2BEC               	goto	i1l1858
  3368  03D6                     i1l1848:
  3369  03D6  081F               	movf	31,w	;volatile
  3370  03D7  3938               	andlw	56
  3371  03D8  1D03               	btfss	3,2
  3372  03D9  2BDB               	goto	u122_21
  3373  03DA  2BDC               	goto	u122_20
  3374  03DB                     u122_21:
  3375  03DB  2BEC               	goto	i1l1858
  3376  03DC                     u122_20:
  3377  03DC                     i1l1850:
  3378                           
  3379                           ;main.c: 349:             hvfb = (ADRESH << 8) | ADRESL;
  3380  03DC  081E               	movf	30,w	;volatile
  3381  03DD  00BC               	movwf	_hvfb+1	;volatile
  3382  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  3383  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  3384  03E0  081E               	movf	30,w	;volatile
  3385  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  3386  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  3387  03E3  00BB               	movwf	_hvfb	;volatile
  3388  03E4                     i1l1852:
  3389                           
  3390                           ;main.c: 350:             ADCON0 &= 0b11000111;
  3391  03E4  30C7               	movlw	199
  3392  03E5  00F0               	movwf	??_isr
  3393  03E6  0870               	movf	??_isr,w
  3394  03E7  059F               	andwf	31,f	;volatile
  3395  03E8                     i1l1854:
  3396                           
  3397                           ;main.c: 351:             ADCON0 |= 0b00001000;
  3398  03E8  159F               	bsf	31,3	;volatile
  3399  03E9                     i1l1856:
  3400                           
  3401                           ;main.c: 354:             CCP1CON = 0b00111100;
  3402  03E9  303C               	movlw	60
  3403  03EA  0097               	movwf	23	;volatile
  3404  03EB  0064               	clrwdt	;# 
  3405  03EC                     i1l1858:
  3406                           
  3407                           ;main.c: 359:         ADIF = 0;
  3408  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3409  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3410  03EE  130C               	bcf	12,6	;volatile
  3411                           
  3412                           ;main.c: 361:     } else if (RBIE && RBIF){
  3413  03EF  2BFC               	goto	i1l124
  3414  03F0                     i1l117:
  3415  03F0  1D8B               	btfss	11,3	;volatile
  3416  03F1  2BF3               	goto	u123_21
  3417  03F2  2BF4               	goto	u123_20
  3418  03F3                     u123_21:
  3419  03F3  2BFC               	goto	i1l114
  3420  03F4                     u123_20:
  3421  03F4                     i1l1860:
  3422  03F4  1C0B               	btfss	11,0	;volatile
  3423  03F5  2BF7               	goto	u124_21
  3424  03F6  2BF8               	goto	u124_20
  3425  03F7                     u124_21:
  3426  03F7  2BFC               	goto	i1l114
  3427  03F8                     u124_20:
  3428  03F8                     i1l1862:
  3429                           
  3430                           ;main.c: 363:         events |= 0b00100000;
  3431  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3432  03F9  16BF               	bsf	_events,5	;volatile
  3433                           
  3434                           ;main.c: 365:         RBIF = 0;
  3435  03FA  100B               	bcf	11,0	;volatile
  3436  03FB  2BFC               	goto	i1l124
  3437  03FC                     i1l114:
  3438  03FC                     i1l124:
  3439  03FC  0872               	movf	??_isr+2,w
  3440  03FD  008A               	movwf	10
  3441  03FE  0E71               	swapf	??_isr+1,w
  3442  03FF  0083               	movwf	3
  3443  0400  0EFE               	swapf	btemp,f
  3444  0401  0E7E               	swapf	btemp,w
  3445  0402  0009               	retfie
  3446  0403                     __end_of_isr:
  3447  007E                     btemp	set	126	;btemp
  3448  007E                     wtemp0	set	126
  3449                           
  3450                           	psect	intentry
  3451  0004                     __pintentry:	
  3452                           ;incstack = 0
  3453                           ; Regs used in _isr: [wreg+status,2+status,0]
  3454                           
  3455  0004                     interrupt_function:
  3456  007E                     saved_w	set	btemp
  3457  0004  00FE               	movwf	btemp
  3458  0005  0E03               	swapf	3,w
  3459  0006  00F1               	movwf	??_isr+1
  3460  0007  080A               	movf	10,w
  3461  0008  00F2               	movwf	??_isr+2
  3462  0009  118A  2B6D         	ljmp	_isr
  3463                           
  3464                           	psect	config
  3465                           
  3466                           ;Config register CONFIG1 @ 0x2007
  3467                           ;	Oscillator Selection bits
  3468                           ;	FOSC = INTOSCIO, INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7
      +                          /OSC1/CLKI pin
  3469                           ;	Watchdog Timer Enable bit
  3470                           ;	WDTE = ON, WDT enabled
  3471                           ;	Power-up Timer Enable bit
  3472                           ;	PWRTE = ON, PWRT enabled
  3473                           ;	RA5/MCLR/VPP Pin Function Select bit
  3474                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital I/O, MCLR internally tied to VDD
  3475                           ;	Brown-out Reset Enable bit
  3476                           ;	BOREN = ON, BOR enabled
  3477                           ;	Low-Voltage Programming Enable bit
  3478                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3479                           ;	Data EE Memory Code Protection bit
  3480                           ;	CPD = OFF, Code protection off
  3481                           ;	Flash Program Memory Write Enable bits
  3482                           ;	WRT = OFF, Write protection off
  3483                           ;	In-Circuit Debugger Mode bit
  3484                           ;	DEBUG = 0x1, unprogrammed default
  3485                           ;	CCP1 Pin Selection bit
  3486                           ;	CCPMX = RB0, CCP1 function on RB0
  3487                           ;	Flash Program Memory Code Protection bit
  3488                           ;	CP = OFF, Code protection off
  3489  2007                     	org	8199
  3490  2007  3F54               	dw	16212
  3491                           
  3492                           ;Config register CONFIG2 @ 0x2008
  3493                           ;	Fail-Safe Clock Monitor Enable bit
  3494                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3495                           ;	Internal External Switchover bit
  3496                           ;	IESO = ON, Internal External Switchover mode enabled
  3497  2008                     	org	8200
  3498  2008  3FFF               	dw	16383

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     27      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    intToString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> main@numStr(BANK0[6]), 

    lcd_write_string@stringArray	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[8]), STR_3(CODE[5]), main@numStr(BANK0[6]), STR_2(CODE[5]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_lcd_write_byte
    _lcd_write_string->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_cursor->_lcd_write_byte
    _lcd_clear->_lcd_write_byte
    _lcd_write_byte->___awmod
    _intToString->___lwdiv

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_intToString
    _lcd_write_string->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_cursor->_lcd_write_byte
    _lcd_clear->_lcd_write_byte

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   35077
                                             17 BANK0     10    10      0
                        _intToString
                          _lcd_clear
                         _lcd_cursor
                           _lcd_init
                     _lcd_write_byte
                   _lcd_write_string
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     2     0      2    6445
                                              5 BANK0      2     0      2
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    6510
                                              5 BANK0      2     2      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           5     4      1    7379
                                              5 BANK0      5     4      1
                            ___awmod
                             ___bmul
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     752
                                              3 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0    5944
                                              5 BANK0      2     2      0
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_write_byte                                       6     5      1    5944
                                             10 COMMON     1     0      1
                                              0 BANK0      5     5      0
                            ___awmod (ARG)
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_write_nibble                                     4     3      1     566
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _intToString                                         17    12      5    2706
                                              0 BANK0     17    12      5
                            ___lwdiv
                            ___lwmod
                          _numDigits
 ---------------------------------------------------------------------------------
 (2) _numDigits                                            2     0      2     316
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     463
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              3 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _intToString
     ___lwdiv
     ___lwmod
     _numDigits
   _lcd_clear
     _lcd_write_byte
       ___awmod (ARG)
       _lcd_write_nibble (ARG)
   _lcd_cursor
     ___awmod
     ___bmul
     _lcd_write_byte
   _lcd_init
     _lcd_write_byte
     _lcd_write_nibble
   _lcd_write_byte
   _lcd_write_string
     _lcd_write_byte

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2B      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Aug 16 19:34:36 2021

                          pc 0002               ___bmul@product 0075                           fsr 0004  
                        l140 0680                          l132 04FB                          l150 0487  
                        l135 0560                          l144 0487                          l137 05A2  
                        l153 06F8                          l163 06AE                          l159 06D2  
                        l176 036C                          l436 0554                          l542 05E6  
                        l552 0620                          l296 06E7                          _PR2 0092  
                        u700 06A0                          u701 069F                          u710 06AB  
                        u711 06AA                          u640 055E                          u720 06D9  
                        u641 055D                          u721 06D8                          u810 0546  
                        u730 06E6                          u811 0545                          u731 06E5  
                        u900 05ED                          u820 054B                          u740 0501  
                        u901 05EC                          u821 054A                          u805 053A  
                        u741 0500                          u830 05AB                          u750 050C  
                        u831 05AA                          u655 0564                          u751 050B  
                        u920 05FF                          u680 068A                          u760 0517  
                        u921 05FE                          u681 0689                          u665 0575  
                        u761 0516                          u850 05BD                          u930 0609  
                        u690 0695                          u851 05BC                          u931 0608  
                        u915 05F1                          u691 0694                          u675 0659  
                        u780 0529                          u845 05AF                          u781 0528  
                        u870 05CE                          u950 061C                          u790 0533  
                        u871 05CD                          u951 061B                          u935 0605  
                        u791 0532                          u775 051B                          u960 06D2  
                        u865 05BE                          u945 0610                          u961 06D1  
                        u890 05E2                          u970 041A                          u891 05E1  
                        u875 05CA                          u795 052F                          u971 0419  
                        u980 0427                          u885 05D6                          u981 0426  
                        u990 042D                          u991 042C                          _isr 036D  
                        fsr0 0004                          indf 0000                 ___awmod@sign 0079  
           lcd_cursor@column 0025                         l1400 04FC                         l1330 0561  
                       l1410 050C                         l1402 04FD                         l1332 059B  
                       l1324 0556                         l1340 0662                         l1420 0525  
                       l1412 0511                         l1404 0501                         l1500 04C7  
                       l1350 0681                         l1334 059F                         l1326 0559  
                       l1342 0667                         l1422 0529                         l1414 0517  
                       l1430 0546                         l1406 0506                         l1510 04F4  
                       l1502 04CC                         l1440 05A5                         l1360 0695  
                       l1352 068A                         l1600 0313                         l1328 055E  
                       l1344 066F                         l1432 054B                         l1424 0533  
                       l1416 051A                         l1408 0508                         l1504 04D8  
                       l1520 06C4                         l1450 05BD                         l1442 05AB  
                       l1602 0335                         l1346 0676                         l1338 0656  
                       l1434 0550                         l1426 0539                         l1418 0521  
                       l1530 0427                         l1522 0406                         l1506 04E3  
                       l1514 06AF                         l1452 05CE                         l1444 05AE  
                       l1460 05E2                         l1604 0346                         l1428 0540  
                       l1540 0465                         l1532 042D                         l1524 0414  
                       l1508 04EF                         l1516 06B0                         l1700 0108  
                       l1620 002C                         l1612 0017                         l1454 05D4  
                       l1446 05B5                         l1438 05A3                         l1470 05F7  
                       l1382 06AD                         l1374 06A2                         l1366 0697  
                       l1358 068C                         l1606 034A                         l1550 06ED  
                       l1390 06D9                         l1542 046B                         l1534 0443  
                       l1526 041A                         l1518 06BC                         l1710 0126  
                       l1702 010E                         l1630 003D                         l1622 002E  
                       l1614 0023                         l1456 05D5                         l1448 05B9  
                       l1480 0616                         l1472 05FB                         l1464 05E7  
                       l1376 06AB                         l1368 06A0                         l1608 035A  
                       l1560 0280                         l1392 06DD                         l1544 0471  
                       l1536 0449                         l1528 0421                         l1800 025F  
                       l1720 0144                         l1712 012C                         l1704 0114  
                       l1640 0052                         l1632 003F                         l1624 0032  
                       l1616 0026                         l1458 05DC                         l1474 05FF  
                       l1466 05ED                         l1482 061C                         l1570 029E  
                       l1562 0281                         l1554 0266                         l1394 06DF  
                       l1386 06D4                         l1538 044F                         l1490 0498  
                       l1730 0162                         l1722 014A                         l1714 0132  
                       l1706 011A                         l1650 0073                         l1642 0054  
                       l1634 0043                         l1626 0039                         l1618 002A  
                       l1476 0609                         l1468 05F0                         l1572 02AD  
                       l1564 028E                         l1556 0269                         l1548 06E8  
                       l1396 06E6                         l1388 06D5                         l1492 04A3  
                       l1740 0180                         l1732 0168                         l1724 0150  
                       l1716 0138                         l1708 0120                         l1660 0090  
                       l1652 0078                         l1644 0057                         l1636 0047  
                       l1628 003B                         l1478 060F                         l1590 02F7  
                       l1574 02B3                         l1582 02BE                         l1566 0291  
                       l1558 027A                         l1494 04A8                         l1486 0488  
                       l1750 019E                         l1742 0186                         l1734 016E  
                       l1726 0156                         l1718 013E                         l1670 00AE  
                       l1662 0096                         l1654 007E                         l1646 0060  
                       l1638 004E                         l1592 02FD                         l1584 02C0  
                       l1576 02BA                         l1568 029D                         l1496 04B4  
                       l1488 048D                         l1760 01BC                         l1752 01A4  
                       l1744 018C                         l1736 0174                         l1728 015C  
                       l1680 00CC                         l1672 00B4                         l1664 009C  
                       l1656 0084                         l1648 006A                         l1594 0302  
                       l1586 02E2                         l1498 04BB                         l1770 01DC  
                       l1762 01C2                         l1754 01AA                         l1746 0192  
                       l1738 017A                         l1690 00EA                         l1682 00D2  
                       l1674 00BA                         l1666 00A2                         l1658 008A  
                       l1596 030F                         l1588 02F3                         l1780 01F1  
                       l1772 01E0                         l1764 01C8                         l1756 01B0  
                       l1748 0198                         l1692 00F0                         l1684 00D8  
                       l1676 00C0                         l1668 00A8                         l1598 0311  
                       l1790 022E                         l1782 0202                         l1774 01E4  
                       l1766 01D6                         l1758 01B6                         l1694 00F6  
                       l1686 00DE                         l1678 00C6                         l1792 0237  
                       l1784 020B                         l1776 01E8                         l1768 01D9  
                       l1696 00FC                         l1688 00E4                         l1794 0241  
                       l1786 0214                         l1778 01EC                         l1698 0102  
                       l1796 0249                         l1788 0225                         l1798 0257  
         intToString@divisor 0022                         _ADIE 0466                         _ADIF 0066  
                       ?_isr 0070                         STR_1 0631                         STR_2 064E  
                       STR_3 0649                         STR_4 0641                         u1000 0449  
                       u1001 0448                         u1010 044F                         u1011 044E  
                       u1020 046B                         u1100 01E8                         u1021 046A  
                       u1101 01E7                         u1030 0471                         u1110 025F  
                       u1031 0470                         u1111 025E                         u1040 0280  
                       u1041 027F                         u1050 02B3                         u1051 02B2  
                       u1060 02FD                         u1061 02FC                         u1070 0302  
                       u1071 0301                         u1080 035A                         u1081 0359  
                       u1090 01E0                         u1307 04B8                         u1091 01DF  
                       u1085 0356                         u1317 04C4                         u1327 04D0  
                       u1337 04DE                         u1257 01D0                         u1347 04EC  
                       u1267 0251                         u1357 04F8                         u1277 0493  
                       u1367 06F3                         u1287 04A1                         u1377 0673  
                       u1297 04AC                         u1387 059D                         _PIE1 008C  
                       _RBIE 005B                         _RBIF 0058                         _PIR1 000C  
                       _TMR0 0001       __end_of_lcd_write_byte 0681                         _main 0017  
                       _hvfb 003B                         btemp 007E                         start 000B  
          ___bmul@multiplier 0076                        ??_isr 0070                 ?_intToString 0020  
                      ?_main 0070              __end_of___awmod 0555                        _ANSEL 009B  
                      _T1CON 0010                        _T2CON 0012              __end_of___lwdiv 05E7  
                      i1l114 03FC                        i1l115 03AF                        i1l107 0386  
                      i1l124 03FC                        i1l117 03F0              __end_of___lwmod 0621  
                      _TMR1H 000F                        _TMR1L 000E                        _PORTA 0005  
                      _PORTB 0006                        _TRISA 0085                        _TRISB 0086  
           lcd_write_byte@RS 007A                        _vbatt 003D                        main@i 003A  
                      pclath 000A                        status 0003              ?_lcd_write_byte 007A  
                      wtemp0 007E              intToString@dest 0024                lcd_cursor@row 0028  
            __initialization 000D                 __end_of_main 0266                       ??_main 0031  
                     _ADCON0 001F                       _ADCON1 009F           lcd_cursor@position 0029  
                     _ADRESH 001E                       _ADRESL 009E                       u120_20 03BF  
                     u112_20 0371                       u120_21 03BE                       u112_21 0370  
                     u121_20 03C9                       u113_20 0375                       u121_21 03C8  
                     u113_21 0374                       i1l1810 037B                       i1l1820 0384  
                     i1l1812 037F                       i1l1804 036D                       i1l1822 038C  
                     i1l1830 0399                       i1l1814 0381                       i1l1806 0371  
                     u122_20 03DC                       i1l1840 03BF                       i1l1832 03A7  
                     i1l1824 0392                       i1l1816 0382                       u114_20 037B  
                     i1l1808 0375                       u122_21 03DB                       u114_21 037A  
                     i1l1850 03DC                       i1l1842 03C0                       i1l1834 03AB  
                     i1l1826 0393                       i1l1818 0383                       i1l1860 03F4  
                     i1l1852 03E4                       i1l1844 03C9                       i1l1836 03B5  
                     i1l1828 0397                       i1l1862 03F8                       i1l1854 03E8  
                     i1l1846 03D1                       i1l1838 03BB                       u123_20 03F4  
                     i1l1856 03E9                       i1l1848 03D6                       u115_20 038C  
                     u123_21 03F3                       u115_21 038B                       i1l1858 03EC  
                     u124_20 03F8                       u116_20 0392                       u124_21 03F7  
                     u116_21 0391                       u117_20 03A7                       u117_21 03A6  
                     u118_20 03B5                       u118_21 03B4                       u119_20 03BB  
                     u119_21 03BA                       _INTCON 000B                       _OSCCON 008F  
                     _TMR0IE 005D                       _TMR0IF 005A                       _TMR1IE 0460  
                     _TMR1IF 0060                       _TMR2IE 0461                       _TMR2IF 0061  
                     _WDTCON 0105             __end_of_lcd_init 04FC                       ___bmul 06D3  
                  ??___awmod 0077     __end_of_lcd_write_nibble 05A3                    ??___lwdiv 0077  
                  ??___lwmod 0077                       _events 003F              ___awmod@divisor 0073  
   __end_of_lcd_write_string 06D3              ___awmod@counter 0078                       saved_w 007E  
    __end_of__initialization 0014          ___bmul@multiplicand 0073      intToString@digits_whole 0030  
             __pcstackCOMMON 0070         __size_of_intToString 0107           __size_of_lcd_clear 0011  
                 __pbssBANK0 003B  lcd_write_string@stringArray 0025    lcd_write_byte@lowerNibble 0023  
                 __pmaintext 0017                      ?___bmul 0073                   __pintentry 0004  
         __size_of_numDigits 002E                      _CCP1CON 0017                   _lcd_cursor 0403  
           ??_lcd_write_byte 0020                    ?_lcd_init 0070                   __stringtab 0621  
               intToString@i 002E                 intToString@j 002A                 intToString@k 002F  
          __end_of_lcd_clear 06F9              __size_of___bmul 0015                      ___awmod 04FC  
                    ___lwdiv 05A3                      ___lwmod 05E7                      __ptext1 06AF  
                    __ptext2 0488                      __ptext3 0403                      __ptext4 06D3  
                    __ptext5 04FC                      __ptext6 06E8                      __ptext7 0653  
                    __ptext8 0555                      __ptext9 0266                 __size_of_isr 0096  
           ___awmod@dividend 0075           lcd_write_nibble@RS 0073                   ??_lcd_init 0025  
       end_of_initialization 0014            __end_of_numDigits 06AF    lcd_write_byte@upperNibble 0022  
          ?_lcd_write_nibble 0073                    _PORTAbits 0005                    _PORTBbits 0006  
         ??_lcd_write_nibble 0074            ?_lcd_write_string 0025           ??_lcd_write_string 007B  
                ?_lcd_cursor 0025                   main@numStr 0034            intToString@number 0020  
             __end_of___bmul 06E8          start_initialization 000D                  __end_of_isr 0403  
                   ??___bmul 0074          __size_of_lcd_cursor 0085                ??_intToString 0025  
  intToString@digits_decimal 002D                    ___latbits 0001                __pcstackBANK0 0020  
          __size_of_lcd_init 0074             ___lwdiv@dividend 0075                     ?___awmod 0073  
                   ?___lwdiv 0073                     ?___lwmod 0073                    _lcd_clear 06E8  
                  __pstrings 0621          __end_of_intToString 036D             ___lwdiv@quotient 0078  
       lcd_write_byte@byteIn 0024            interrupt_function 0004                 numDigits@num 0073  
                  _numDigits 0681                   ?_lcd_clear 0070                  __stringbase 0630  
               ??_lcd_cursor 0026    __size_of_lcd_write_nibble 004E    __size_of_lcd_write_string 0024  
                 ?_numDigits 0073      __size_of_lcd_write_byte 002E           __end_of_lcd_cursor 0488  
           __size_of___awmod 0059                  _intToString 0266             __size_of___lwdiv 0044  
           __size_of___lwmod 003A           __end_of__stringtab 0631              ___lwdiv@divisor 0073  
            ___lwdiv@counter 007A                     __ptext10 0681                     __ptext11 05E7  
                   __ptext12 05A3                     __ptext13 036D                     _lcd_init 0488  
              __size_of_main 024F     intToString@whole_portion 002B                  ??_lcd_clear 0025  
     lcd_write_nibble@byteIn 0076                     intlevel1 0000             ___lwmod@dividend 0075  
                ??_numDigits 0075                    stringcode 062B                   _OPTION_REG 0081  
            ___lwmod@divisor 0073              ___lwmod@counter 0078                     stringdir 062B  
                   stringtab 0621             _lcd_write_nibble 0555             _lcd_write_string 06AF  
             _lcd_write_byte 0653  
