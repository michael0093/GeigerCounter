

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Aug 17 20:27:54 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F88
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.20
    28                           ; Generated 12/02/2020 GMT
    29                           ; 
    30                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F88 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009B                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  0105                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001E                     	;# 
   141  001F                     	;# 
   142  0081                     	;# 
   143  0085                     	;# 
   144  0086                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  008F                     	;# 
   149  0090                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  0105                     	;# 
   161  010C                     	;# 
   162  010D                     	;# 
   163  010E                     	;# 
   164  010F                     	;# 
   165  018C                     	;# 
   166  018D                     	;# 
   167  0006                     _PORTBbits	set	6
   168  0005                     _PORTAbits	set	5
   169  001E                     _ADRESH	set	30
   170  000B                     _INTCON	set	11
   171  000C                     _PIR1	set	12
   172  0017                     _CCP1CON	set	23
   173  0015                     _CCPR1L	set	21
   174  0012                     _T2CON	set	18
   175  000E                     _TMR1L	set	14
   176  000F                     _TMR1H	set	15
   177  0010                     _T1CON	set	16
   178  0001                     _TMR0	set	1
   179  001F                     _ADCON0	set	31
   180  0006                     _PORTB	set	6
   181  0005                     _PORTA	set	5
   182  0058                     _RBIF	set	88
   183  005B                     _RBIE	set	91
   184  0066                     _ADIF	set	102
   185  0060                     _TMR1IF	set	96
   186  005A                     _TMR0IF	set	90
   187  005D                     _TMR0IE	set	93
   188  009E                     _ADRESL	set	158
   189  008C                     _PIE1	set	140
   190  0092                     _PR2	set	146
   191  0081                     _OPTION_REG	set	129
   192  009F                     _ADCON1	set	159
   193  009B                     _ANSEL	set	155
   194  0086                     _TRISB	set	134
   195  0085                     _TRISA	set	133
   196  008F                     _OSCCON	set	143
   197  0466                     _ADIE	set	1126
   198  0460                     _TMR1IE	set	1120
   199  0105                     _WDTCON	set	261
   200                           
   201                           	psect	strings
   202  060B                     __pstrings:
   203  060B                     stringtab:
   204  060B                     __stringtab:
   205                           
   206                           ;	String table - string pointers are 1 byte each
   207  060B  1BFF               	btfsc	btemp+1,7
   208  060C  2E15               	ljmp	stringcode
   209  060D  1383               	bcf	3,7
   210  060E  187F               	btfsc	btemp+1,0
   211  060F  1783               	bsf	3,7
   212  0610  0800               	movf	0,w
   213  0611  0A84               	incf	4,f
   214  0612  1903               	skipnz
   215  0613  0AFF               	incf	btemp+1,f
   216  0614  0008               	return
   217  0615                     stringcode:
   218  0615                     stringdir:
   219  0615  3006               	movlw	high stringdir
   220  0616  008A               	movwf	10
   221  0617  0804               	movf	4,w
   222  0618  0A84               	incf	4,f
   223  0619  0782               	addwf	2,f
   224  061A                     __stringbase:
   225  061A  3400               	retlw	0
   226  061B                     __end_of__stringtab:
   227  061B                     STR_1:
   228  061B  3420               	retlw	32	;' '
   229  061C  3447               	retlw	71	;'G'
   230  061D  3445               	retlw	69	;'E'
   231  061E  3449               	retlw	73	;'I'
   232  061F  3447               	retlw	71	;'G'
   233  0620  3445               	retlw	69	;'E'
   234  0621  3452               	retlw	82	;'R'
   235  0622  3420               	retlw	32	;' '
   236  0623  3443               	retlw	67	;'C'
   237  0624  344F               	retlw	79	;'O'
   238  0625  3455               	retlw	85	;'U'
   239  0626  344E               	retlw	78	;'N'
   240  0627  3454               	retlw	84	;'T'
   241  0628  3445               	retlw	69	;'E'
   242  0629  3452               	retlw	82	;'R'
   243  062A  3400               	retlw	0
   244  062B                     STR_4:
   245  062B  3475               	retlw	117	;'u'
   246  062C  3453               	retlw	83	;'S'
   247  062D  342F               	retlw	47	;'/'
   248  062E  3468               	retlw	104	;'h'
   249  062F  3420               	retlw	32	;' '
   250  0630  3420               	retlw	32	;' '
   251  0631  3420               	retlw	32	;' '
   252  0632  3400               	retlw	0
   253  0633                     STR_3:
   254  0633  3443               	retlw	67	;'C'
   255  0634  3450               	retlw	80	;'P'
   256  0635  344D               	retlw	77	;'M'
   257  0636  3420               	retlw	32	;' '
   258  0637  3400               	retlw	0
   259  0638                     STR_2:
   260  0638  3456               	retlw	86	;'V'
   261  0639  3430               	retlw	48	;'0'
   262  063A  342E               	retlw	46	;'.'
   263  063B  3431               	retlw	49	;'1'
   264  063C  3400               	retlw	0
   265                           
   266                           	psect	cinit
   267  000D                     start_initialization:	
   268                           ; #config settings
   269                           
   270  000D                     __initialization:
   271                           
   272                           ; Clear objects allocated to BANK0
   273  000D  1283               	bcf	3,5	;RP0=0, select bank0
   274  000E  1303               	bcf	3,6	;RP1=0, select bank0
   275  000F  01BB               	clrf	__pbssBANK0& (0+127)
   276  0010  01BC               	clrf	(__pbssBANK0+1)& (0+127)
   277  0011  01BD               	clrf	(__pbssBANK0+2)& (0+127)
   278  0012  01BE               	clrf	(__pbssBANK0+3)& (0+127)
   279  0013  01BF               	clrf	(__pbssBANK0+4)& (0+127)
   280  0014                     end_of_initialization:	
   281                           ;End of C runtime variable initialization code
   282                           
   283  0014                     __end_of__initialization:
   284  0014  0183               	clrf	3
   285  0015  118A  2817         	ljmp	_main	;jump to C main() function
   286                           
   287                           	psect	bssBANK0
   288  003B                     __pbssBANK0:
   289  003B                     _hvfb:
   290  003B                     	ds	2
   291  003D                     _vbatt:
   292  003D                     	ds	2
   293  003F                     _events:
   294  003F                     	ds	1
   295                           
   296                           	psect	cstackCOMMON
   297  0070                     __pcstackCOMMON:
   298  0070                     ?_lcd_init:
   299  0070                     ?_lcd_clear:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_main:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_isr:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ??_isr:	
   309                           ; 1 bytes @ 0x0
   310                           
   311                           
   312                           ; 1 bytes @ 0x0
   313  0070                     	ds	3
   314  0073                     ?_lcd_write_nibble:
   315  0073                     ?_numDigits:	
   316                           ; 1 bytes @ 0x3
   317                           
   318  0073                     ?___bmul:	
   319                           ; 1 bytes @ 0x3
   320                           
   321  0073                     ?___awmod:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ?___lwdiv:	
   325                           ; 2 bytes @ 0x3
   326                           
   327  0073                     ?___lwmod:	
   328                           ; 2 bytes @ 0x3
   329                           
   330  0073                     lcd_write_nibble@RS:	
   331                           ; 2 bytes @ 0x3
   332                           
   333  0073                     ___bmul@multiplicand:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     numDigits@num:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ___awmod@divisor:	
   340                           ; 2 bytes @ 0x3
   341                           
   342  0073                     ___lwdiv@divisor:	
   343                           ; 2 bytes @ 0x3
   344                           
   345  0073                     ___lwmod@divisor:	
   346                           ; 2 bytes @ 0x3
   347                           
   348                           
   349                           ; 2 bytes @ 0x3
   350  0073                     	ds	1
   351  0074                     ??_lcd_write_nibble:
   352  0074                     ??___bmul:	
   353                           ; 1 bytes @ 0x4
   354                           
   355                           
   356                           ; 1 bytes @ 0x4
   357  0074                     	ds	1
   358  0075                     ??_numDigits:
   359  0075                     ___bmul@product:	
   360                           ; 1 bytes @ 0x5
   361                           
   362  0075                     ___awmod@dividend:	
   363                           ; 1 bytes @ 0x5
   364                           
   365  0075                     ___lwdiv@dividend:	
   366                           ; 2 bytes @ 0x5
   367                           
   368  0075                     ___lwmod@dividend:	
   369                           ; 2 bytes @ 0x5
   370                           
   371                           
   372                           ; 2 bytes @ 0x5
   373  0075                     	ds	1
   374  0076                     lcd_write_nibble@byteIn:
   375  0076                     ___bmul@multiplier:	
   376                           ; 1 bytes @ 0x6
   377                           
   378                           
   379                           ; 1 bytes @ 0x6
   380  0076                     	ds	1
   381  0077                     ??___awmod:
   382  0077                     ??___lwdiv:	
   383                           ; 1 bytes @ 0x7
   384                           
   385  0077                     ??___lwmod:	
   386                           ; 1 bytes @ 0x7
   387                           
   388                           
   389                           ; 1 bytes @ 0x7
   390  0077                     	ds	1
   391  0078                     ___awmod@counter:
   392  0078                     ___lwmod@counter:	
   393                           ; 1 bytes @ 0x8
   394                           
   395  0078                     ___lwdiv@quotient:	
   396                           ; 1 bytes @ 0x8
   397                           
   398                           
   399                           ; 2 bytes @ 0x8
   400  0078                     	ds	1
   401  0079                     ___awmod@sign:
   402                           
   403                           ; 1 bytes @ 0x9
   404  0079                     	ds	1
   405  007A                     ?_lcd_write_byte:
   406  007A                     lcd_write_byte@RS:	
   407                           ; 1 bytes @ 0xA
   408                           
   409  007A                     ___lwdiv@counter:	
   410                           ; 1 bytes @ 0xA
   411                           
   412                           
   413                           ; 1 bytes @ 0xA
   414  007A                     	ds	1
   415  007B                     ??_lcd_write_string:
   416                           
   417                           	psect	cstackBANK0
   418  0020                     __pcstackBANK0:	
   419                           ; 1 bytes @ 0xB
   420                           
   421  0020                     ??_lcd_write_byte:
   422  0020                     ?_intToString:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0020                     intToString@number:	
   426                           ; 1 bytes @ 0x0
   427                           
   428                           
   429                           ; 2 bytes @ 0x0
   430  0020                     	ds	2
   431  0022                     lcd_write_byte@upperNibble:
   432  0022                     intToString@divisor:	
   433                           ; 1 bytes @ 0x2
   434                           
   435                           
   436                           ; 2 bytes @ 0x2
   437  0022                     	ds	1
   438  0023                     lcd_write_byte@lowerNibble:
   439                           
   440                           ; 1 bytes @ 0x3
   441  0023                     	ds	1
   442  0024                     lcd_write_byte@byteIn:
   443  0024                     intToString@dest:	
   444                           ; 1 bytes @ 0x4
   445                           
   446                           
   447                           ; 1 bytes @ 0x4
   448  0024                     	ds	1
   449  0025                     ??_lcd_init:
   450  0025                     ?_lcd_write_string:	
   451                           ; 1 bytes @ 0x5
   452                           
   453  0025                     ?_lcd_cursor:	
   454                           ; 1 bytes @ 0x5
   455                           
   456  0025                     ??_lcd_clear:	
   457                           ; 1 bytes @ 0x5
   458                           
   459  0025                     ??_intToString:	
   460                           ; 1 bytes @ 0x5
   461                           
   462  0025                     lcd_cursor@column:	
   463                           ; 1 bytes @ 0x5
   464                           
   465  0025                     lcd_write_string@stringArray:	
   466                           ; 1 bytes @ 0x5
   467                           
   468                           
   469                           ; 2 bytes @ 0x5
   470  0025                     	ds	1
   471  0026                     ??_lcd_cursor:
   472                           
   473                           ; 1 bytes @ 0x6
   474  0026                     	ds	2
   475  0028                     lcd_cursor@row:
   476                           
   477                           ; 1 bytes @ 0x8
   478  0028                     	ds	1
   479  0029                     lcd_cursor@position:
   480                           
   481                           ; 1 bytes @ 0x9
   482  0029                     	ds	1
   483  002A                     intToString@j:
   484                           
   485                           ; 1 bytes @ 0xA
   486  002A                     	ds	1
   487  002B                     intToString@whole_portion:
   488                           
   489                           ; 2 bytes @ 0xB
   490  002B                     	ds	2
   491  002D                     intToString@digits_decimal:
   492                           
   493                           ; 1 bytes @ 0xD
   494  002D                     	ds	1
   495  002E                     intToString@i:
   496                           
   497                           ; 1 bytes @ 0xE
   498  002E                     	ds	1
   499  002F                     intToString@k:
   500                           
   501                           ; 1 bytes @ 0xF
   502  002F                     	ds	1
   503  0030                     intToString@digits_whole:
   504                           
   505                           ; 1 bytes @ 0x10
   506  0030                     	ds	1
   507  0031                     ??_main:
   508                           
   509                           ; 1 bytes @ 0x11
   510  0031                     	ds	3
   511  0034                     main@numStr:
   512                           
   513                           ; 6 bytes @ 0x14
   514  0034                     	ds	6
   515  003A                     main@i:
   516                           
   517                           ; 1 bytes @ 0x1A
   518  003A                     	ds	1
   519                           
   520                           	psect	maintext
   521  0017                     __pmaintext:	
   522 ;;
   523 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   524 ;;
   525 ;; *************** function _main *****************
   526 ;; Defined at:
   527 ;;		line 87 in file "main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  numStr          6   20[BANK0 ] unsigned char [6]
   532 ;;  i               1   26[BANK0 ] unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : B00/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         0       0       0       0       0
   543 ;;      Locals:         0       7       0       0       0
   544 ;;      Temps:          0       3       0       0       0
   545 ;;      Totals:         0      10       0       0       0
   546 ;;Total ram usage:       10 bytes
   547 ;; Hardware stack levels required when called: 4
   548 ;; This function calls:
   549 ;;		_intToString
   550 ;;		_lcd_clear
   551 ;;		_lcd_cursor
   552 ;;		_lcd_init
   553 ;;		_lcd_write_byte
   554 ;;		_lcd_write_string
   555 ;; This function is called by:
   556 ;;		Startup code after reset
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           
   561                           ;psect for function _main
   562  0017                     _main:
   563  0017                     l1604:	
   564                           ;incstack = 0
   565                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   566                           
   567                           
   568                           ;main.c: 89:     char numStr[6];;main.c: 92:     OSCCON = 0b01111100;
   569  0017  307C               	movlw	124
   570  0018  1683               	bsf	3,5	;RP0=1, select bank1
   571  0019  1303               	bcf	3,6	;RP1=0, select bank1
   572  001A  008F               	movwf	15	;volatile
   573                           
   574                           ;main.c: 94:     PORTA = 0b00000100;
   575  001B  3004               	movlw	4
   576  001C  1283               	bcf	3,5	;RP0=0, select bank0
   577  001D  1303               	bcf	3,6	;RP1=0, select bank0
   578  001E  0085               	movwf	5	;volatile
   579                           
   580                           ;main.c: 95:     TRISA = 0b00100011;
   581  001F  3023               	movlw	35
   582  0020  1683               	bsf	3,5	;RP0=1, select bank1
   583  0021  1303               	bcf	3,6	;RP1=0, select bank1
   584  0022  0085               	movwf	5	;volatile
   585  0023                     l1606:
   586                           
   587                           ;main.c: 96:     PORTB = 0b00000000;
   588  0023  1283               	bcf	3,5	;RP0=0, select bank0
   589  0024  1303               	bcf	3,6	;RP1=0, select bank0
   590  0025  0186               	clrf	6	;volatile
   591  0026                     l1608:
   592                           
   593                           ;main.c: 97:     TRISB = 0b10100000;
   594  0026  30A0               	movlw	160
   595  0027  1683               	bsf	3,5	;RP0=1, select bank1
   596  0028  1303               	bcf	3,6	;RP1=0, select bank1
   597  0029  0086               	movwf	6	;volatile
   598  002A                     l1610:
   599                           
   600                           ;main.c: 99:     ANSEL = 0b00000011;
   601  002A  3003               	movlw	3
   602  002B  009B               	movwf	27	;volatile
   603  002C                     l1612:
   604                           
   605                           ;main.c: 100:     ADCON1 = 0b10000000;
   606  002C  3080               	movlw	128
   607  002D  009F               	movwf	31	;volatile
   608  002E                     l1614:
   609                           
   610                           ;main.c: 101:     ADCON0 = 0b11000001;
   611  002E  30C1               	movlw	193
   612  002F  1283               	bcf	3,5	;RP0=0, select bank0
   613  0030  1303               	bcf	3,6	;RP1=0, select bank0
   614  0031  009F               	movwf	31	;volatile
   615  0032                     l1616:
   616                           
   617                           ;main.c: 103:     OPTION_REG = 0b11000010;
   618  0032  30C2               	movlw	194
   619  0033  1683               	bsf	3,5	;RP0=1, select bank1
   620  0034  1303               	bcf	3,6	;RP1=0, select bank1
   621  0035  0081               	movwf	1	;volatile
   622                           
   623                           ;main.c: 104:     TMR0 = 0;
   624  0036  1283               	bcf	3,5	;RP0=0, select bank0
   625  0037  1303               	bcf	3,6	;RP1=0, select bank0
   626  0038  0181               	clrf	1	;volatile
   627  0039                     l1618:
   628                           
   629                           ;main.c: 106:     T1CON = 0b00110001;
   630  0039  3031               	movlw	49
   631  003A  0090               	movwf	16	;volatile
   632  003B                     l1620:
   633                           
   634                           ;main.c: 107:     TMR1H = 0x9E;
   635  003B  309E               	movlw	158
   636  003C  008F               	movwf	15	;volatile
   637  003D                     l1622:
   638                           
   639                           ;main.c: 108:     TMR1L = 0x40;
   640  003D  3040               	movlw	64
   641  003E  008E               	movwf	14	;volatile
   642  003F                     l1624:
   643                           
   644                           ;main.c: 110:     WDTCON = 0b00000101;
   645  003F  3005               	movlw	5
   646  0040  1283               	bcf	3,5	;RP0=0, select bank2
   647  0041  1703               	bsf	3,6	;RP1=1, select bank2
   648  0042  0085               	movwf	5	;volatile
   649  0043                     l1626:
   650                           
   651                           ;main.c: 112:     PR2 = 80;
   652  0043  3050               	movlw	80
   653  0044  1683               	bsf	3,5	;RP0=1, select bank1
   654  0045  1303               	bcf	3,6	;RP1=0, select bank1
   655  0046  0092               	movwf	18	;volatile
   656  0047                     l1628:
   657                           
   658                           ;main.c: 113:     T2CON = 0b00000100;
   659  0047  3004               	movlw	4
   660  0048  1283               	bcf	3,5	;RP0=0, select bank0
   661  0049  1303               	bcf	3,6	;RP1=0, select bank0
   662  004A  0092               	movwf	18	;volatile
   663  004B                     l1630:
   664                           
   665                           ;main.c: 114:     CCPR1L = 40;
   666  004B  3028               	movlw	40
   667  004C  0095               	movwf	21	;volatile
   668  004D                     l1632:
   669                           
   670                           ;main.c: 115:     CCP1CON = 0b00111100;
   671  004D  303C               	movlw	60
   672  004E  0097               	movwf	23	;volatile
   673                           
   674                           ;main.c: 117:     PIR1 = 0b00000000;
   675  004F  018C               	clrf	12	;volatile
   676  0050                     l1634:
   677                           
   678                           ;main.c: 118:     PIE1 = 0b01000001;
   679  0050  3041               	movlw	65
   680  0051  1683               	bsf	3,5	;RP0=1, select bank1
   681  0052  1303               	bcf	3,6	;RP1=0, select bank1
   682  0053  008C               	movwf	12	;volatile
   683  0054                     l1636:
   684                           
   685                           ;main.c: 119:     INTCON = 0b11100000;
   686  0054  30E0               	movlw	224
   687  0055  008B               	movwf	11	;volatile
   688  0056                     l1638:
   689                           
   690                           ;main.c: 122:     lcd_init();
   691  0056  118A  2472  118A   	fcall	_lcd_init
   692  0059                     l1640:
   693                           
   694                           ;main.c: 123:     lcd_write_string(" GEIGER COUNTER");
   695  0059  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   696  005A  1283               	bcf	3,5	;RP0=0, select bank0
   697  005B  1303               	bcf	3,6	;RP1=0, select bank0
   698  005C  00A5               	movwf	lcd_write_string@stringArray
   699  005D  3080               	movlw	128
   700  005E  00A6               	movwf	lcd_write_string@stringArray+1
   701  005F  118A  2699  118A   	fcall	_lcd_write_string
   702  0062                     l1642:
   703                           
   704                           ;main.c: 124:     lcd_cursor(1,6);
   705  0062  3006               	movlw	6
   706  0063  1283               	bcf	3,5	;RP0=0, select bank0
   707  0064  1303               	bcf	3,6	;RP1=0, select bank0
   708  0065  00B1               	movwf	??_main
   709  0066  0831               	movf	??_main,w
   710  0067  00A5               	movwf	lcd_cursor@column
   711  0068  3001               	movlw	1
   712  0069  118A  236F  118A   	fcall	_lcd_cursor
   713  006C                     l1644:
   714                           
   715                           ;main.c: 125:     lcd_write_string("V0.1");
   716  006C  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   717  006D  1283               	bcf	3,5	;RP0=0, select bank0
   718  006E  1303               	bcf	3,6	;RP1=0, select bank0
   719  006F  00A5               	movwf	lcd_write_string@stringArray
   720  0070  3080               	movlw	128
   721  0071  00A6               	movwf	lcd_write_string@stringArray+1
   722  0072  118A  2699  118A   	fcall	_lcd_write_string
   723  0075                     l1646:
   724                           
   725                           ;main.c: 198:     lcd_write_byte(0x40, 0);
   726  0075  01FA               	clrf	lcd_write_byte@RS
   727  0076  3040               	movlw	64
   728  0077  118A  263D  118A   	fcall	_lcd_write_byte
   729  007A                     l1648:
   730                           
   731                           ;main.c: 199:     lcd_write_byte(0b00110, 1);
   732  007A  01FA               	clrf	lcd_write_byte@RS
   733  007B  0AFA               	incf	lcd_write_byte@RS,f
   734  007C  3006               	movlw	6
   735  007D  118A  263D  118A   	fcall	_lcd_write_byte
   736  0080                     l1650:
   737                           
   738                           ;main.c: 200:     lcd_write_byte(0b01001, 1);
   739  0080  01FA               	clrf	lcd_write_byte@RS
   740  0081  0AFA               	incf	lcd_write_byte@RS,f
   741  0082  3009               	movlw	9
   742  0083  118A  263D  118A   	fcall	_lcd_write_byte
   743  0086                     l1652:
   744                           
   745                           ;main.c: 201:     lcd_write_byte(0b01001, 1);
   746  0086  01FA               	clrf	lcd_write_byte@RS
   747  0087  0AFA               	incf	lcd_write_byte@RS,f
   748  0088  3009               	movlw	9
   749  0089  118A  263D  118A   	fcall	_lcd_write_byte
   750  008C                     l1654:
   751                           
   752                           ;main.c: 202:     lcd_write_byte(0b01001, 1);
   753  008C  01FA               	clrf	lcd_write_byte@RS
   754  008D  0AFA               	incf	lcd_write_byte@RS,f
   755  008E  3009               	movlw	9
   756  008F  118A  263D  118A   	fcall	_lcd_write_byte
   757  0092                     l1656:
   758                           
   759                           ;main.c: 203:     lcd_write_byte(0b01001, 1);
   760  0092  01FA               	clrf	lcd_write_byte@RS
   761  0093  0AFA               	incf	lcd_write_byte@RS,f
   762  0094  3009               	movlw	9
   763  0095  118A  263D  118A   	fcall	_lcd_write_byte
   764  0098                     l1658:
   765                           
   766                           ;main.c: 204:     lcd_write_byte(0b01001, 1);
   767  0098  01FA               	clrf	lcd_write_byte@RS
   768  0099  0AFA               	incf	lcd_write_byte@RS,f
   769  009A  3009               	movlw	9
   770  009B  118A  263D  118A   	fcall	_lcd_write_byte
   771  009E                     l1660:
   772                           
   773                           ;main.c: 205:     lcd_write_byte(0b01001, 1);
   774  009E  01FA               	clrf	lcd_write_byte@RS
   775  009F  0AFA               	incf	lcd_write_byte@RS,f
   776  00A0  3009               	movlw	9
   777  00A1  118A  263D  118A   	fcall	_lcd_write_byte
   778  00A4                     l1662:
   779                           
   780                           ;main.c: 206:     lcd_write_byte(0b01111, 1);
   781  00A4  01FA               	clrf	lcd_write_byte@RS
   782  00A5  0AFA               	incf	lcd_write_byte@RS,f
   783  00A6  300F               	movlw	15
   784  00A7  118A  263D  118A   	fcall	_lcd_write_byte
   785  00AA                     l1664:
   786                           
   787                           ;main.c: 209:     lcd_write_byte(0b00110, 1);
   788  00AA  01FA               	clrf	lcd_write_byte@RS
   789  00AB  0AFA               	incf	lcd_write_byte@RS,f
   790  00AC  3006               	movlw	6
   791  00AD  118A  263D  118A   	fcall	_lcd_write_byte
   792  00B0                     l1666:
   793                           
   794                           ;main.c: 210:     lcd_write_byte(0b01001, 1);
   795  00B0  01FA               	clrf	lcd_write_byte@RS
   796  00B1  0AFA               	incf	lcd_write_byte@RS,f
   797  00B2  3009               	movlw	9
   798  00B3  118A  263D  118A   	fcall	_lcd_write_byte
   799  00B6                     l1668:
   800                           
   801                           ;main.c: 211:     lcd_write_byte(0b01001, 1);
   802  00B6  01FA               	clrf	lcd_write_byte@RS
   803  00B7  0AFA               	incf	lcd_write_byte@RS,f
   804  00B8  3009               	movlw	9
   805  00B9  118A  263D  118A   	fcall	_lcd_write_byte
   806  00BC                     l1670:
   807                           
   808                           ;main.c: 212:     lcd_write_byte(0b01001, 1);
   809  00BC  01FA               	clrf	lcd_write_byte@RS
   810  00BD  0AFA               	incf	lcd_write_byte@RS,f
   811  00BE  3009               	movlw	9
   812  00BF  118A  263D  118A   	fcall	_lcd_write_byte
   813  00C2                     l1672:
   814                           
   815                           ;main.c: 213:     lcd_write_byte(0b01001, 1);
   816  00C2  01FA               	clrf	lcd_write_byte@RS
   817  00C3  0AFA               	incf	lcd_write_byte@RS,f
   818  00C4  3009               	movlw	9
   819  00C5  118A  263D  118A   	fcall	_lcd_write_byte
   820  00C8                     l1674:
   821                           
   822                           ;main.c: 214:     lcd_write_byte(0b01001, 1);
   823  00C8  01FA               	clrf	lcd_write_byte@RS
   824  00C9  0AFA               	incf	lcd_write_byte@RS,f
   825  00CA  3009               	movlw	9
   826  00CB  118A  263D  118A   	fcall	_lcd_write_byte
   827  00CE                     l1676:
   828                           
   829                           ;main.c: 215:     lcd_write_byte(0b01111, 1);
   830  00CE  01FA               	clrf	lcd_write_byte@RS
   831  00CF  0AFA               	incf	lcd_write_byte@RS,f
   832  00D0  300F               	movlw	15
   833  00D1  118A  263D  118A   	fcall	_lcd_write_byte
   834  00D4                     l1678:
   835                           
   836                           ;main.c: 216:     lcd_write_byte(0b01111, 1);
   837  00D4  01FA               	clrf	lcd_write_byte@RS
   838  00D5  0AFA               	incf	lcd_write_byte@RS,f
   839  00D6  300F               	movlw	15
   840  00D7  118A  263D  118A   	fcall	_lcd_write_byte
   841  00DA                     l1680:
   842                           
   843                           ;main.c: 219:     lcd_write_byte(0b00110, 1);
   844  00DA  01FA               	clrf	lcd_write_byte@RS
   845  00DB  0AFA               	incf	lcd_write_byte@RS,f
   846  00DC  3006               	movlw	6
   847  00DD  118A  263D  118A   	fcall	_lcd_write_byte
   848  00E0                     l1682:
   849                           
   850                           ;main.c: 220:     lcd_write_byte(0b01001, 1);
   851  00E0  01FA               	clrf	lcd_write_byte@RS
   852  00E1  0AFA               	incf	lcd_write_byte@RS,f
   853  00E2  3009               	movlw	9
   854  00E3  118A  263D  118A   	fcall	_lcd_write_byte
   855  00E6                     l1684:
   856                           
   857                           ;main.c: 221:     lcd_write_byte(0b01001, 1);
   858  00E6  01FA               	clrf	lcd_write_byte@RS
   859  00E7  0AFA               	incf	lcd_write_byte@RS,f
   860  00E8  3009               	movlw	9
   861  00E9  118A  263D  118A   	fcall	_lcd_write_byte
   862  00EC                     l1686:
   863                           
   864                           ;main.c: 222:     lcd_write_byte(0b01001, 1);
   865  00EC  01FA               	clrf	lcd_write_byte@RS
   866  00ED  0AFA               	incf	lcd_write_byte@RS,f
   867  00EE  3009               	movlw	9
   868  00EF  118A  263D  118A   	fcall	_lcd_write_byte
   869  00F2                     l1688:
   870                           
   871                           ;main.c: 223:     lcd_write_byte(0b01001, 1);
   872  00F2  01FA               	clrf	lcd_write_byte@RS
   873  00F3  0AFA               	incf	lcd_write_byte@RS,f
   874  00F4  3009               	movlw	9
   875  00F5  118A  263D  118A   	fcall	_lcd_write_byte
   876  00F8                     l1690:
   877                           
   878                           ;main.c: 224:     lcd_write_byte(0b01111, 1);
   879  00F8  01FA               	clrf	lcd_write_byte@RS
   880  00F9  0AFA               	incf	lcd_write_byte@RS,f
   881  00FA  300F               	movlw	15
   882  00FB  118A  263D  118A   	fcall	_lcd_write_byte
   883  00FE                     l1692:
   884                           
   885                           ;main.c: 225:     lcd_write_byte(0b01111, 1);
   886  00FE  01FA               	clrf	lcd_write_byte@RS
   887  00FF  0AFA               	incf	lcd_write_byte@RS,f
   888  0100  300F               	movlw	15
   889  0101  118A  263D  118A   	fcall	_lcd_write_byte
   890  0104                     l1694:
   891                           
   892                           ;main.c: 226:     lcd_write_byte(0b01111, 1);
   893  0104  01FA               	clrf	lcd_write_byte@RS
   894  0105  0AFA               	incf	lcd_write_byte@RS,f
   895  0106  300F               	movlw	15
   896  0107  118A  263D  118A   	fcall	_lcd_write_byte
   897  010A                     l1696:
   898                           
   899                           ;main.c: 229:     lcd_write_byte(0b00110, 1);
   900  010A  01FA               	clrf	lcd_write_byte@RS
   901  010B  0AFA               	incf	lcd_write_byte@RS,f
   902  010C  3006               	movlw	6
   903  010D  118A  263D  118A   	fcall	_lcd_write_byte
   904  0110                     l1698:
   905                           
   906                           ;main.c: 230:     lcd_write_byte(0b01001, 1);
   907  0110  01FA               	clrf	lcd_write_byte@RS
   908  0111  0AFA               	incf	lcd_write_byte@RS,f
   909  0112  3009               	movlw	9
   910  0113  118A  263D  118A   	fcall	_lcd_write_byte
   911  0116                     l1700:
   912                           
   913                           ;main.c: 231:     lcd_write_byte(0b01001, 1);
   914  0116  01FA               	clrf	lcd_write_byte@RS
   915  0117  0AFA               	incf	lcd_write_byte@RS,f
   916  0118  3009               	movlw	9
   917  0119  118A  263D  118A   	fcall	_lcd_write_byte
   918  011C                     l1702:
   919                           
   920                           ;main.c: 232:     lcd_write_byte(0b01001, 1);
   921  011C  01FA               	clrf	lcd_write_byte@RS
   922  011D  0AFA               	incf	lcd_write_byte@RS,f
   923  011E  3009               	movlw	9
   924  011F  118A  263D  118A   	fcall	_lcd_write_byte
   925  0122                     l1704:
   926                           
   927                           ;main.c: 233:     lcd_write_byte(0b01111, 1);
   928  0122  01FA               	clrf	lcd_write_byte@RS
   929  0123  0AFA               	incf	lcd_write_byte@RS,f
   930  0124  300F               	movlw	15
   931  0125  118A  263D  118A   	fcall	_lcd_write_byte
   932  0128                     l1706:
   933                           
   934                           ;main.c: 234:     lcd_write_byte(0b01111, 1);
   935  0128  01FA               	clrf	lcd_write_byte@RS
   936  0129  0AFA               	incf	lcd_write_byte@RS,f
   937  012A  300F               	movlw	15
   938  012B  118A  263D  118A   	fcall	_lcd_write_byte
   939  012E                     l1708:
   940                           
   941                           ;main.c: 235:     lcd_write_byte(0b01111, 1);
   942  012E  01FA               	clrf	lcd_write_byte@RS
   943  012F  0AFA               	incf	lcd_write_byte@RS,f
   944  0130  300F               	movlw	15
   945  0131  118A  263D  118A   	fcall	_lcd_write_byte
   946  0134                     l1710:
   947                           
   948                           ;main.c: 236:     lcd_write_byte(0b01111, 1);
   949  0134  01FA               	clrf	lcd_write_byte@RS
   950  0135  0AFA               	incf	lcd_write_byte@RS,f
   951  0136  300F               	movlw	15
   952  0137  118A  263D  118A   	fcall	_lcd_write_byte
   953  013A                     l1712:
   954                           
   955                           ;main.c: 239:     lcd_write_byte(0b00110, 1);
   956  013A  01FA               	clrf	lcd_write_byte@RS
   957  013B  0AFA               	incf	lcd_write_byte@RS,f
   958  013C  3006               	movlw	6
   959  013D  118A  263D  118A   	fcall	_lcd_write_byte
   960  0140                     l1714:
   961                           
   962                           ;main.c: 240:     lcd_write_byte(0b01001, 1);
   963  0140  01FA               	clrf	lcd_write_byte@RS
   964  0141  0AFA               	incf	lcd_write_byte@RS,f
   965  0142  3009               	movlw	9
   966  0143  118A  263D  118A   	fcall	_lcd_write_byte
   967  0146                     l1716:
   968                           
   969                           ;main.c: 241:     lcd_write_byte(0b01001, 1);
   970  0146  01FA               	clrf	lcd_write_byte@RS
   971  0147  0AFA               	incf	lcd_write_byte@RS,f
   972  0148  3009               	movlw	9
   973  0149  118A  263D  118A   	fcall	_lcd_write_byte
   974  014C                     l1718:
   975                           
   976                           ;main.c: 242:     lcd_write_byte(0b01111, 1);
   977  014C  01FA               	clrf	lcd_write_byte@RS
   978  014D  0AFA               	incf	lcd_write_byte@RS,f
   979  014E  300F               	movlw	15
   980  014F  118A  263D  118A   	fcall	_lcd_write_byte
   981  0152                     l1720:
   982                           
   983                           ;main.c: 243:     lcd_write_byte(0b01111, 1);
   984  0152  01FA               	clrf	lcd_write_byte@RS
   985  0153  0AFA               	incf	lcd_write_byte@RS,f
   986  0154  300F               	movlw	15
   987  0155  118A  263D  118A   	fcall	_lcd_write_byte
   988  0158                     l1722:
   989                           
   990                           ;main.c: 244:     lcd_write_byte(0b01111, 1);
   991  0158  01FA               	clrf	lcd_write_byte@RS
   992  0159  0AFA               	incf	lcd_write_byte@RS,f
   993  015A  300F               	movlw	15
   994  015B  118A  263D  118A   	fcall	_lcd_write_byte
   995  015E                     l1724:
   996                           
   997                           ;main.c: 245:     lcd_write_byte(0b01111, 1);
   998  015E  01FA               	clrf	lcd_write_byte@RS
   999  015F  0AFA               	incf	lcd_write_byte@RS,f
  1000  0160  300F               	movlw	15
  1001  0161  118A  263D  118A   	fcall	_lcd_write_byte
  1002  0164                     l1726:
  1003                           
  1004                           ;main.c: 246:     lcd_write_byte(0b01111, 1);
  1005  0164  01FA               	clrf	lcd_write_byte@RS
  1006  0165  0AFA               	incf	lcd_write_byte@RS,f
  1007  0166  300F               	movlw	15
  1008  0167  118A  263D  118A   	fcall	_lcd_write_byte
  1009  016A                     l1728:
  1010                           
  1011                           ;main.c: 249:     lcd_write_byte(0b00110, 1);
  1012  016A  01FA               	clrf	lcd_write_byte@RS
  1013  016B  0AFA               	incf	lcd_write_byte@RS,f
  1014  016C  3006               	movlw	6
  1015  016D  118A  263D  118A   	fcall	_lcd_write_byte
  1016  0170                     l1730:
  1017                           
  1018                           ;main.c: 250:     lcd_write_byte(0b01001, 1);
  1019  0170  01FA               	clrf	lcd_write_byte@RS
  1020  0171  0AFA               	incf	lcd_write_byte@RS,f
  1021  0172  3009               	movlw	9
  1022  0173  118A  263D  118A   	fcall	_lcd_write_byte
  1023  0176                     l1732:
  1024                           
  1025                           ;main.c: 251:     lcd_write_byte(0b01111, 1);
  1026  0176  01FA               	clrf	lcd_write_byte@RS
  1027  0177  0AFA               	incf	lcd_write_byte@RS,f
  1028  0178  300F               	movlw	15
  1029  0179  118A  263D  118A   	fcall	_lcd_write_byte
  1030  017C                     l1734:
  1031                           
  1032                           ;main.c: 252:     lcd_write_byte(0b01111, 1);
  1033  017C  01FA               	clrf	lcd_write_byte@RS
  1034  017D  0AFA               	incf	lcd_write_byte@RS,f
  1035  017E  300F               	movlw	15
  1036  017F  118A  263D  118A   	fcall	_lcd_write_byte
  1037  0182                     l1736:
  1038                           
  1039                           ;main.c: 253:     lcd_write_byte(0b01111, 1);
  1040  0182  01FA               	clrf	lcd_write_byte@RS
  1041  0183  0AFA               	incf	lcd_write_byte@RS,f
  1042  0184  300F               	movlw	15
  1043  0185  118A  263D  118A   	fcall	_lcd_write_byte
  1044  0188                     l1738:
  1045                           
  1046                           ;main.c: 254:     lcd_write_byte(0b01111, 1);
  1047  0188  01FA               	clrf	lcd_write_byte@RS
  1048  0189  0AFA               	incf	lcd_write_byte@RS,f
  1049  018A  300F               	movlw	15
  1050  018B  118A  263D  118A   	fcall	_lcd_write_byte
  1051  018E                     l1740:
  1052                           
  1053                           ;main.c: 255:     lcd_write_byte(0b01111, 1);
  1054  018E  01FA               	clrf	lcd_write_byte@RS
  1055  018F  0AFA               	incf	lcd_write_byte@RS,f
  1056  0190  300F               	movlw	15
  1057  0191  118A  263D  118A   	fcall	_lcd_write_byte
  1058  0194                     l1742:
  1059                           
  1060                           ;main.c: 256:     lcd_write_byte(0b01111, 1);
  1061  0194  01FA               	clrf	lcd_write_byte@RS
  1062  0195  0AFA               	incf	lcd_write_byte@RS,f
  1063  0196  300F               	movlw	15
  1064  0197  118A  263D  118A   	fcall	_lcd_write_byte
  1065  019A                     l1744:
  1066                           
  1067                           ;main.c: 259:     lcd_write_byte(0b00110, 1);
  1068  019A  01FA               	clrf	lcd_write_byte@RS
  1069  019B  0AFA               	incf	lcd_write_byte@RS,f
  1070  019C  3006               	movlw	6
  1071  019D  118A  263D  118A   	fcall	_lcd_write_byte
  1072  01A0                     l1746:
  1073                           
  1074                           ;main.c: 260:     lcd_write_byte(0b01111, 1);
  1075  01A0  01FA               	clrf	lcd_write_byte@RS
  1076  01A1  0AFA               	incf	lcd_write_byte@RS,f
  1077  01A2  300F               	movlw	15
  1078  01A3  118A  263D  118A   	fcall	_lcd_write_byte
  1079  01A6                     l1748:
  1080                           
  1081                           ;main.c: 261:     lcd_write_byte(0b01111, 1);
  1082  01A6  01FA               	clrf	lcd_write_byte@RS
  1083  01A7  0AFA               	incf	lcd_write_byte@RS,f
  1084  01A8  300F               	movlw	15
  1085  01A9  118A  263D  118A   	fcall	_lcd_write_byte
  1086  01AC                     l1750:
  1087                           
  1088                           ;main.c: 262:     lcd_write_byte(0b01111, 1);
  1089  01AC  01FA               	clrf	lcd_write_byte@RS
  1090  01AD  0AFA               	incf	lcd_write_byte@RS,f
  1091  01AE  300F               	movlw	15
  1092  01AF  118A  263D  118A   	fcall	_lcd_write_byte
  1093  01B2                     l1752:
  1094                           
  1095                           ;main.c: 263:     lcd_write_byte(0b01111, 1);
  1096  01B2  01FA               	clrf	lcd_write_byte@RS
  1097  01B3  0AFA               	incf	lcd_write_byte@RS,f
  1098  01B4  300F               	movlw	15
  1099  01B5  118A  263D  118A   	fcall	_lcd_write_byte
  1100  01B8                     l1754:
  1101                           
  1102                           ;main.c: 264:     lcd_write_byte(0b01111, 1);
  1103  01B8  01FA               	clrf	lcd_write_byte@RS
  1104  01B9  0AFA               	incf	lcd_write_byte@RS,f
  1105  01BA  300F               	movlw	15
  1106  01BB  118A  263D  118A   	fcall	_lcd_write_byte
  1107  01BE                     l1756:
  1108                           
  1109                           ;main.c: 265:     lcd_write_byte(0b01111, 1);
  1110  01BE  01FA               	clrf	lcd_write_byte@RS
  1111  01BF  0AFA               	incf	lcd_write_byte@RS,f
  1112  01C0  300F               	movlw	15
  1113  01C1  118A  263D  118A   	fcall	_lcd_write_byte
  1114  01C4                     l1758:
  1115                           
  1116                           ;main.c: 266:     lcd_write_byte(0b01111, 1);
  1117  01C4  01FA               	clrf	lcd_write_byte@RS
  1118  01C5  0AFA               	incf	lcd_write_byte@RS,f
  1119  01C6  300F               	movlw	15
  1120  01C7  118A  263D  118A   	fcall	_lcd_write_byte
  1121  01CA                     l1760:
  1122                           
  1123                           ;main.c: 268:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1124  01CA  300B               	movlw	11
  1125  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1126  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1127  01CD  00B3               	movwf	??_main+2
  1128  01CE  3026               	movlw	38
  1129  01CF  00B2               	movwf	??_main+1
  1130  01D0  305D               	movlw	93
  1131  01D1  00B1               	movwf	??_main
  1132  01D2                     u1237:
  1133  01D2  0BB1               	decfsz	??_main,f
  1134  01D3  29D2               	goto	u1237
  1135  01D4  0BB2               	decfsz	??_main+1,f
  1136  01D5  29D2               	goto	u1237
  1137  01D6  0BB3               	decfsz	??_main+2,f
  1138  01D7  29D2               	goto	u1237
  1139  01D8                     l1762:
  1140                           
  1141                           ;main.c: 269:     lcd_clear();
  1142  01D8  118A  26D2  118A   	fcall	_lcd_clear
  1143  01DB                     l1764:
  1144                           
  1145                           ;main.c: 271:     char i=0;
  1146  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1147  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1148  01DD  01BA               	clrf	main@i
  1149  01DE                     l1766:
  1150                           
  1151                           ;main.c: 276:         if(events & 0b00100000){
  1152  01DE  1EBF               	btfss	_events,5	;volatile
  1153  01DF  29E1               	goto	u1081
  1154  01E0  29E2               	goto	u1080
  1155  01E1                     u1081:
  1156  01E1  29E6               	goto	l1770
  1157  01E2                     u1080:
  1158  01E2                     l1768:
  1159                           
  1160                           ;main.c: 277:             events &= ~0b00100000;
  1161  01E2  30DF               	movlw	223
  1162  01E3  00B1               	movwf	??_main
  1163  01E4  0831               	movf	??_main,w
  1164  01E5  05BF               	andwf	_events,f	;volatile
  1165  01E6                     l1770:
  1166                           
  1167                           ;main.c: 279:         if(events & 0b00010000){
  1168  01E6  1E3F               	btfss	_events,4	;volatile
  1169  01E7  29E9               	goto	u1091
  1170  01E8  29EA               	goto	u1090
  1171  01E9                     u1091:
  1172  01E9  29EE               	goto	l1774
  1173  01EA                     u1090:
  1174  01EA                     l1772:
  1175                           
  1176                           ;main.c: 281:             events &= ~0b00010000;
  1177  01EA  30EF               	movlw	239
  1178  01EB  00B1               	movwf	??_main
  1179  01EC  0831               	movf	??_main,w
  1180  01ED  05BF               	andwf	_events,f	;volatile
  1181  01EE                     l1774:
  1182                           
  1183                           ;main.c: 285:         lcd_cursor(0,0);
  1184  01EE  01A5               	clrf	lcd_cursor@column
  1185  01EF  3000               	movlw	0
  1186  01F0  118A  236F  118A   	fcall	_lcd_cursor
  1187  01F3                     l1776:
  1188                           
  1189                           ;main.c: 286:         intToString(vbatt, 1, numStr);
  1190  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1191  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  1192  01F5  083E               	movf	_vbatt+1,w	;volatile
  1193  01F6  00A1               	movwf	intToString@number+1
  1194  01F7  083D               	movf	_vbatt,w	;volatile
  1195  01F8  00A0               	movwf	intToString@number
  1196  01F9  3001               	movlw	1
  1197  01FA  00A2               	movwf	intToString@divisor
  1198  01FB  3000               	movlw	0
  1199  01FC  00A3               	movwf	intToString@divisor+1
  1200  01FD  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1201  01FE  00B1               	movwf	??_main
  1202  01FF  0831               	movf	??_main,w
  1203  0200  00A4               	movwf	intToString@dest
  1204  0201  118A  2268  118A   	fcall	_intToString
  1205  0204                     l1778:
  1206                           
  1207                           ;main.c: 287:         lcd_write_string(numStr);
  1208  0204  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1209  0205  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0206  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0207  00A5               	movwf	lcd_write_string@stringArray
  1212  0208  3000               	movlw	0
  1213  0209  00A6               	movwf	lcd_write_string@stringArray+1
  1214  020A  118A  2699  118A   	fcall	_lcd_write_string
  1215  020D                     l1780:
  1216                           
  1217                           ;main.c: 288:         lcd_write_string("CPM ");
  1218  020D  3019               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1219  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1220  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1221  0210  00A5               	movwf	lcd_write_string@stringArray
  1222  0211  3080               	movlw	128
  1223  0212  00A6               	movwf	lcd_write_string@stringArray+1
  1224  0213  118A  2699  118A   	fcall	_lcd_write_string
  1225  0216                     l1782:
  1226                           
  1227                           ;main.c: 289:         intToString(hvfb, 1, numStr);
  1228  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1229  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1230  0218  083C               	movf	_hvfb+1,w	;volatile
  1231  0219  00A1               	movwf	intToString@number+1
  1232  021A  083B               	movf	_hvfb,w	;volatile
  1233  021B  00A0               	movwf	intToString@number
  1234  021C  3001               	movlw	1
  1235  021D  00A2               	movwf	intToString@divisor
  1236  021E  3000               	movlw	0
  1237  021F  00A3               	movwf	intToString@divisor+1
  1238  0220  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1239  0221  00B1               	movwf	??_main
  1240  0222  0831               	movf	??_main,w
  1241  0223  00A4               	movwf	intToString@dest
  1242  0224  118A  2268  118A   	fcall	_intToString
  1243  0227                     l1784:
  1244                           
  1245                           ;main.c: 290:         lcd_write_string(numStr);
  1246  0227  3034               	movlw	(low (main@numStr| 0))& (0+255)
  1247  0228  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0229  1303               	bcf	3,6	;RP1=0, select bank0
  1249  022A  00A5               	movwf	lcd_write_string@stringArray
  1250  022B  3000               	movlw	0
  1251  022C  00A6               	movwf	lcd_write_string@stringArray+1
  1252  022D  118A  2699  118A   	fcall	_lcd_write_string
  1253  0230                     l1786:
  1254                           
  1255                           ;main.c: 291:         lcd_write_string("uS/h   ");
  1256  0230  3011               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1257  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1258  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1259  0233  00A5               	movwf	lcd_write_string@stringArray
  1260  0234  3080               	movlw	128
  1261  0235  00A6               	movwf	lcd_write_string@stringArray+1
  1262  0236  118A  2699  118A   	fcall	_lcd_write_string
  1263  0239                     l1788:
  1264                           
  1265                           ;main.c: 292:         lcd_cursor(0,15);
  1266  0239  300F               	movlw	15
  1267  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1268  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1269  023C  00B1               	movwf	??_main
  1270  023D  0831               	movf	??_main,w
  1271  023E  00A5               	movwf	lcd_cursor@column
  1272  023F  3000               	movlw	0
  1273  0240  118A  236F  118A   	fcall	_lcd_cursor
  1274  0243                     l1790:
  1275                           
  1276                           ;main.c: 293:         lcd_write_byte(i, 1);
  1277  0243  01FA               	clrf	lcd_write_byte@RS
  1278  0244  0AFA               	incf	lcd_write_byte@RS,f
  1279  0245  1283               	bcf	3,5	;RP0=0, select bank0
  1280  0246  1303               	bcf	3,6	;RP1=0, select bank0
  1281  0247  083A               	movf	main@i,w
  1282  0248  118A  263D  118A   	fcall	_lcd_write_byte
  1283  024B                     l1792:
  1284                           
  1285                           ;main.c: 294:         _delay((unsigned long)((500)*(8000000/4000.0)));
  1286  024B  3006               	movlw	6
  1287  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1288  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1289  024E  00B3               	movwf	??_main+2
  1290  024F  3013               	movlw	19
  1291  0250  00B2               	movwf	??_main+1
  1292  0251  30AD               	movlw	173
  1293  0252  00B1               	movwf	??_main
  1294  0253                     u1247:
  1295  0253  0BB1               	decfsz	??_main,f
  1296  0254  2A53               	goto	u1247
  1297  0255  0BB2               	decfsz	??_main+1,f
  1298  0256  2A53               	goto	u1247
  1299  0257  0BB3               	decfsz	??_main+2,f
  1300  0258  2A53               	goto	u1247
  1301  0259                     l1794:
  1302                           
  1303                           ;main.c: 296:         if(i<6){
  1304  0259  3006               	movlw	6
  1305  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1306  025B  1303               	bcf	3,6	;RP1=0, select bank0
  1307  025C  023A               	subwf	main@i,w
  1308  025D  1803               	skipnc
  1309  025E  2A60               	goto	u1101
  1310  025F  2A61               	goto	u1100
  1311  0260                     u1101:
  1312  0260  29DB               	goto	l1764
  1313  0261                     u1100:
  1314  0261                     l1796:
  1315                           
  1316                           ;main.c: 297:             i++;
  1317  0261  3001               	movlw	1
  1318  0262  00B1               	movwf	??_main
  1319  0263  0831               	movf	??_main,w
  1320  0264  07BA               	addwf	main@i,f
  1321                           
  1322                           ;main.c: 298:         }else{
  1323  0265  29DE               	goto	l1766
  1324  0266  118A  280B         	ljmp	start
  1325  0268                     __end_of_main:
  1326                           
  1327                           	psect	text1
  1328  0699                     __ptext1:	
  1329 ;; *************** function _lcd_write_string *****************
  1330 ;; Defined at:
  1331 ;;		line 461 in file "main.c"
  1332 ;; Parameters:    Size  Location     Type
  1333 ;;  stringArray     2    5[BANK0 ] PTR unsigned char 
  1334 ;;		 -> STR_4(8), STR_3(5), main@numStr(6), STR_2(5), 
  1335 ;;		 -> STR_1(16), 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;		None
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1347 ;;      Params:         0       2       0       0       0
  1348 ;;      Locals:         0       0       0       0       0
  1349 ;;      Temps:          0       0       0       0       0
  1350 ;;      Totals:         0       2       0       0       0
  1351 ;;Total ram usage:        2 bytes
  1352 ;; Hardware stack levels used: 1
  1353 ;; Hardware stack levels required when called: 3
  1354 ;; This function calls:
  1355 ;;		_lcd_write_byte
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           
  1362                           ;psect for function _lcd_write_string
  1363  0699                     _lcd_write_string:
  1364  0699                     l1506:	
  1365                           ;incstack = 0
  1366                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1367                           
  1368                           
  1369                           ;main.c: 463:     while (*stringArray){
  1370  0699  2EAE               	goto	l1512
  1371  069A                     l1508:
  1372                           
  1373                           ;main.c: 464:         lcd_write_byte(*stringArray++, 1);
  1374  069A  01FA               	clrf	lcd_write_byte@RS
  1375  069B  0AFA               	incf	lcd_write_byte@RS,f
  1376  069C  0826               	movf	lcd_write_string@stringArray+1,w
  1377  069D  00FF               	movwf	btemp+1
  1378  069E  0825               	movf	lcd_write_string@stringArray,w
  1379  069F  0084               	movwf	4
  1380  06A0  118A  260B  118A   	fcall	stringtab
  1381  06A3  118A  263D  118A   	fcall	_lcd_write_byte
  1382  06A6                     l1510:
  1383  06A6  3001               	movlw	1
  1384  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  1385  06A8  1303               	bcf	3,6	;RP1=0, select bank0
  1386  06A9  07A5               	addwf	lcd_write_string@stringArray,f
  1387  06AA  1803               	skipnc
  1388  06AB  0AA6               	incf	lcd_write_string@stringArray+1,f
  1389  06AC  3000               	movlw	0
  1390  06AD  07A6               	addwf	lcd_write_string@stringArray+1,f
  1391  06AE                     l1512:
  1392                           
  1393                           ;main.c: 463:     while (*stringArray){
  1394  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1395  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1396  06B0  0826               	movf	lcd_write_string@stringArray+1,w
  1397  06B1  00FF               	movwf	btemp+1
  1398  06B2  0825               	movf	lcd_write_string@stringArray,w
  1399  06B3  0084               	movwf	4
  1400  06B4  118A  260B  118A   	fcall	stringtab
  1401  06B7  3A00               	xorlw	0
  1402  06B8  1D03               	skipz
  1403  06B9  2EBB               	goto	u951
  1404  06BA  2EBC               	goto	u950
  1405  06BB                     u951:
  1406  06BB  2E9A               	goto	l1508
  1407  06BC                     u950:
  1408  06BC                     l155:
  1409  06BC  0008               	return
  1410  06BD                     __end_of_lcd_write_string:
  1411                           
  1412                           	psect	text2
  1413  0472                     __ptext2:	
  1414 ;; *************** function _lcd_init *****************
  1415 ;; Defined at:
  1416 ;;		line 375 in file "main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, status,2, status,0, pclath, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1430 ;;      Params:         0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0
  1432 ;;      Temps:          0       2       0       0       0
  1433 ;;      Totals:         0       2       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used: 1
  1436 ;; Hardware stack levels required when called: 3
  1437 ;; This function calls:
  1438 ;;		_lcd_write_byte
  1439 ;;		_lcd_write_nibble
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           
  1446                           ;psect for function _lcd_init
  1447  0472                     _lcd_init:
  1448  0472                     l1478:	
  1449                           ;incstack = 0
  1450                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1451                           
  1452                           
  1453                           ;main.c: 378:     lcd_write_nibble(0x03, 0);
  1454  0472  01F3               	clrf	lcd_write_nibble@RS
  1455  0473  3003               	movlw	3
  1456  0474  118A  253F  118A   	fcall	_lcd_write_nibble
  1457  0477                     l1480:
  1458                           
  1459                           ;main.c: 379:     _delay((unsigned long)((6)*(8000000/4000.0)));
  1460  0477  3010               	movlw	16
  1461  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1462  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1463  047A  00A6               	movwf	??_lcd_init+1
  1464  047B  3093               	movlw	147
  1465  047C  00A5               	movwf	??_lcd_init
  1466  047D                     u1257:
  1467  047D  0BA5               	decfsz	??_lcd_init,f
  1468  047E  2C7D               	goto	u1257
  1469  047F  0BA6               	decfsz	??_lcd_init+1,f
  1470  0480  2C7D               	goto	u1257
  1471  0481  2C82               	nop2
  1472  0482                     l1482:
  1473                           
  1474                           ;main.c: 380:     lcd_write_nibble(0x03, 0);
  1475  0482  01F3               	clrf	lcd_write_nibble@RS
  1476  0483  3003               	movlw	3
  1477  0484  118A  253F  118A   	fcall	_lcd_write_nibble
  1478                           
  1479                           ;main.c: 381:     _delay((unsigned long)((150)*(8000000/4000000.0)));
  1480  0487  3063               	movlw	99
  1481  0488  1283               	bcf	3,5	;RP0=0, select bank0
  1482  0489  1303               	bcf	3,6	;RP1=0, select bank0
  1483  048A  00A5               	movwf	??_lcd_init
  1484  048B                     u1267:
  1485  048B  0BA5               	decfsz	??_lcd_init,f
  1486  048C  2C8B               	goto	u1267
  1487  048D                     l1484:
  1488                           
  1489                           ;main.c: 382:     lcd_write_nibble(0x03, 0);
  1490  048D  01F3               	clrf	lcd_write_nibble@RS
  1491  048E  3003               	movlw	3
  1492  048F  118A  253F  118A   	fcall	_lcd_write_nibble
  1493  0492                     l1486:
  1494                           
  1495                           ;main.c: 383:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1496  0492  3002               	movlw	2
  1497  0493  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0494  1303               	bcf	3,6	;RP1=0, select bank0
  1499  0495  00A5               	movwf	??_lcd_init
  1500  0496                     u1277:
  1501  0496  0BA5               	decfsz	??_lcd_init,f
  1502  0497  2C96               	goto	u1277
  1503  0498  0000               	nop
  1504                           
  1505                           ;main.c: 384:     lcd_write_nibble(0x02, 0);
  1506  0499  01F3               	clrf	lcd_write_nibble@RS
  1507  049A  3002               	movlw	2
  1508  049B  118A  253F  118A   	fcall	_lcd_write_nibble
  1509  049E                     l1488:
  1510                           
  1511                           ;main.c: 385:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1512  049E  3002               	movlw	2
  1513  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1514  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1515  04A1  00A5               	movwf	??_lcd_init
  1516  04A2                     u1287:
  1517  04A2  0BA5               	decfsz	??_lcd_init,f
  1518  04A3  2CA2               	goto	u1287
  1519  04A4  0000               	nop
  1520  04A5                     l1490:
  1521                           
  1522                           ;main.c: 387:     lcd_write_byte(0x28, 0);
  1523  04A5  01FA               	clrf	lcd_write_byte@RS
  1524  04A6  3028               	movlw	40
  1525  04A7  118A  263D  118A   	fcall	_lcd_write_byte
  1526                           
  1527                           ;main.c: 388:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1528  04AA  3002               	movlw	2
  1529  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  1530  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  1531  04AD  00A5               	movwf	??_lcd_init
  1532  04AE                     u1297:
  1533  04AE  0BA5               	decfsz	??_lcd_init,f
  1534  04AF  2CAE               	goto	u1297
  1535  04B0  0000               	nop
  1536  04B1                     l1492:
  1537                           
  1538                           ;main.c: 389:     lcd_write_byte(0x08, 0);
  1539  04B1  01FA               	clrf	lcd_write_byte@RS
  1540  04B2  3008               	movlw	8
  1541  04B3  118A  263D  118A   	fcall	_lcd_write_byte
  1542  04B6                     l1494:
  1543                           
  1544                           ;main.c: 390:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1545  04B6  3002               	movlw	2
  1546  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1547  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1548  04B9  00A5               	movwf	??_lcd_init
  1549  04BA                     u1307:
  1550  04BA  0BA5               	decfsz	??_lcd_init,f
  1551  04BB  2CBA               	goto	u1307
  1552  04BC  0000               	nop
  1553                           
  1554                           ;main.c: 391:     lcd_write_byte(0x01, 0);
  1555  04BD  01FA               	clrf	lcd_write_byte@RS
  1556  04BE  3001               	movlw	1
  1557  04BF  118A  263D  118A   	fcall	_lcd_write_byte
  1558  04C2                     l1496:
  1559                           
  1560                           ;main.c: 392:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  1561  04C2  3006               	movlw	6
  1562  04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1563  04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1564  04C5  00A6               	movwf	??_lcd_init+1
  1565  04C6  302F               	movlw	47
  1566  04C7  00A5               	movwf	??_lcd_init
  1567  04C8                     u1317:
  1568  04C8  0BA5               	decfsz	??_lcd_init,f
  1569  04C9  2CC8               	goto	u1317
  1570  04CA  0BA6               	decfsz	??_lcd_init+1,f
  1571  04CB  2CC8               	goto	u1317
  1572  04CC  2CCD               	nop2
  1573  04CD                     l1498:
  1574                           
  1575                           ;main.c: 393:     lcd_write_byte(0x06, 0);
  1576  04CD  01FA               	clrf	lcd_write_byte@RS
  1577  04CE  3006               	movlw	6
  1578  04CF  118A  263D  118A   	fcall	_lcd_write_byte
  1579                           
  1580                           ;main.c: 394:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1581  04D2  3002               	movlw	2
  1582  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  1583  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  1584  04D5  00A5               	movwf	??_lcd_init
  1585  04D6                     u1327:
  1586  04D6  0BA5               	decfsz	??_lcd_init,f
  1587  04D7  2CD6               	goto	u1327
  1588  04D8  0000               	nop
  1589  04D9                     l1500:
  1590                           
  1591                           ;main.c: 395:     lcd_write_byte(0x0C, 0);
  1592  04D9  01FA               	clrf	lcd_write_byte@RS
  1593  04DA  300C               	movlw	12
  1594  04DB  118A  263D  118A   	fcall	_lcd_write_byte
  1595  04DE                     l1502:
  1596                           
  1597                           ;main.c: 396:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  1598  04DE  3002               	movlw	2
  1599  04DF  1283               	bcf	3,5	;RP0=0, select bank0
  1600  04E0  1303               	bcf	3,6	;RP1=0, select bank0
  1601  04E1  00A5               	movwf	??_lcd_init
  1602  04E2                     u1337:
  1603  04E2  0BA5               	decfsz	??_lcd_init,f
  1604  04E3  2CE2               	goto	u1337
  1605  04E4  0000               	nop
  1606  04E5                     l128:
  1607  04E5  0008               	return
  1608  04E6                     __end_of_lcd_init:
  1609                           
  1610                           	psect	text3
  1611  036F                     __ptext3:	
  1612 ;; *************** function _lcd_cursor *****************
  1613 ;; Defined at:
  1614 ;;		line 435 in file "main.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;  row             1    wreg     unsigned char 
  1617 ;;  column          1    5[BANK0 ] unsigned char 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;  row             1    8[BANK0 ] unsigned char 
  1620 ;;  position        1    9[BANK0 ] unsigned char 
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       1       0       0       0
  1631 ;;      Locals:         0       2       0       0       0
  1632 ;;      Temps:          0       2       0       0       0
  1633 ;;      Totals:         0       5       0       0       0
  1634 ;;Total ram usage:        5 bytes
  1635 ;; Hardware stack levels used: 1
  1636 ;; Hardware stack levels required when called: 3
  1637 ;; This function calls:
  1638 ;;		___awmod
  1639 ;;		___bmul
  1640 ;;		_lcd_write_byte
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _lcd_cursor
  1648  036F                     _lcd_cursor:
  1649                           
  1650                           ;incstack = 0
  1651                           ; Regs used in _lcd_cursor: [wreg+status,2+status,0+pclath+cstack]
  1652                           ;lcd_cursor@row stored from wreg
  1653  036F  1283               	bcf	3,5	;RP0=0, select bank0
  1654  0370  1303               	bcf	3,6	;RP1=0, select bank0
  1655  0371  00A8               	movwf	lcd_cursor@row
  1656  0372                     l1514:
  1657                           
  1658                           ;main.c: 436:     char position;;main.c: 439:  position = (row * 20) + column;
  1659  0372  3014               	movlw	20
  1660  0373  00A6               	movwf	??_lcd_cursor
  1661  0374  0826               	movf	??_lcd_cursor,w
  1662  0375  00F3               	movwf	___bmul@multiplicand
  1663  0376  0828               	movf	lcd_cursor@row,w
  1664  0377  118A  26BD  118A   	fcall	___bmul
  1665  037A  1283               	bcf	3,5	;RP0=0, select bank0
  1666  037B  1303               	bcf	3,6	;RP1=0, select bank0
  1667  037C  0725               	addwf	lcd_cursor@column,w
  1668  037D  00A7               	movwf	??_lcd_cursor+1
  1669  037E  0827               	movf	??_lcd_cursor+1,w
  1670  037F  00A9               	movwf	lcd_cursor@position
  1671  0380                     l1516:
  1672                           
  1673                           ;main.c: 442:  if(position < 20) {
  1674  0380  3014               	movlw	20
  1675  0381  0229               	subwf	lcd_cursor@position,w
  1676  0382  1803               	skipnc
  1677  0383  2B85               	goto	u961
  1678  0384  2B86               	goto	u960
  1679  0385                     u961:
  1680  0385  2B8D               	goto	l1520
  1681  0386                     u960:
  1682  0386                     l1518:
  1683                           
  1684                           ;main.c: 443:   lcd_write_byte(0x80 | position, 0);
  1685  0386  01FA               	clrf	lcd_write_byte@RS
  1686  0387  0829               	movf	lcd_cursor@position,w
  1687  0388  3880               	iorlw	128
  1688  0389  118A  263D  118A   	fcall	_lcd_write_byte
  1689                           
  1690                           ;main.c: 444:  } else if(position >= 20 && position < 40) {
  1691  038C  2BF3               	goto	l146
  1692  038D                     l1520:
  1693  038D  3014               	movlw	20
  1694  038E  0229               	subwf	lcd_cursor@position,w
  1695  038F  1C03               	skipc
  1696  0390  2B92               	goto	u971
  1697  0391  2B93               	goto	u970
  1698  0392                     u971:
  1699  0392  2BAF               	goto	l1526
  1700  0393                     u970:
  1701  0393                     l1522:
  1702  0393  3028               	movlw	40
  1703  0394  0229               	subwf	lcd_cursor@position,w
  1704  0395  1803               	skipnc
  1705  0396  2B98               	goto	u981
  1706  0397  2B99               	goto	u980
  1707  0398                     u981:
  1708  0398  2BAF               	goto	l1526
  1709  0399                     u980:
  1710  0399                     l1524:
  1711                           
  1712                           ;main.c: 445:   lcd_write_byte(0x80 | (position % 20 + 0x40), 0);
  1713  0399  01FA               	clrf	lcd_write_byte@RS
  1714  039A  3014               	movlw	20
  1715  039B  00F3               	movwf	___awmod@divisor
  1716  039C  3000               	movlw	0
  1717  039D  00F4               	movwf	___awmod@divisor+1
  1718  039E  0829               	movf	lcd_cursor@position,w
  1719  039F  00A6               	movwf	??_lcd_cursor
  1720  03A0  01A7               	clrf	??_lcd_cursor+1
  1721  03A1  0826               	movf	??_lcd_cursor,w
  1722  03A2  00F5               	movwf	___awmod@dividend
  1723  03A3  0827               	movf	??_lcd_cursor+1,w
  1724  03A4  00F6               	movwf	___awmod@dividend+1
  1725  03A5  118A  24E6  118A   	fcall	___awmod
  1726  03A8  0873               	movf	?___awmod,w
  1727  03A9  3E40               	addlw	64
  1728  03AA  3880               	iorlw	128
  1729  03AB  118A  263D  118A   	fcall	_lcd_write_byte
  1730                           
  1731                           ;main.c: 446:     } else if(position >= 41 && position < 60) {
  1732  03AE  2BF3               	goto	l146
  1733  03AF                     l1526:
  1734  03AF  3029               	movlw	41
  1735  03B0  0229               	subwf	lcd_cursor@position,w
  1736  03B1  1C03               	skipc
  1737  03B2  2BB4               	goto	u991
  1738  03B3  2BB5               	goto	u990
  1739  03B4                     u991:
  1740  03B4  2BD1               	goto	l1532
  1741  03B5                     u990:
  1742  03B5                     l1528:
  1743  03B5  303C               	movlw	60
  1744  03B6  0229               	subwf	lcd_cursor@position,w
  1745  03B7  1803               	skipnc
  1746  03B8  2BBA               	goto	u1001
  1747  03B9  2BBB               	goto	u1000
  1748  03BA                     u1001:
  1749  03BA  2BD1               	goto	l1532
  1750  03BB                     u1000:
  1751  03BB                     l1530:
  1752                           
  1753                           ;main.c: 447:   lcd_write_byte(0x80 | (position % 40 + 0x14), 0);
  1754  03BB  01FA               	clrf	lcd_write_byte@RS
  1755  03BC  3028               	movlw	40
  1756  03BD  00F3               	movwf	___awmod@divisor
  1757  03BE  3000               	movlw	0
  1758  03BF  00F4               	movwf	___awmod@divisor+1
  1759  03C0  0829               	movf	lcd_cursor@position,w
  1760  03C1  00A6               	movwf	??_lcd_cursor
  1761  03C2  01A7               	clrf	??_lcd_cursor+1
  1762  03C3  0826               	movf	??_lcd_cursor,w
  1763  03C4  00F5               	movwf	___awmod@dividend
  1764  03C5  0827               	movf	??_lcd_cursor+1,w
  1765  03C6  00F6               	movwf	___awmod@dividend+1
  1766  03C7  118A  24E6  118A   	fcall	___awmod
  1767  03CA  0873               	movf	?___awmod,w
  1768  03CB  3E14               	addlw	20
  1769  03CC  3880               	iorlw	128
  1770  03CD  118A  263D  118A   	fcall	_lcd_write_byte
  1771                           
  1772                           ;main.c: 448:  } else if(position >= 20 && position < 40) {
  1773  03D0  2BF3               	goto	l146
  1774  03D1                     l1532:
  1775  03D1  3014               	movlw	20
  1776  03D2  0229               	subwf	lcd_cursor@position,w
  1777  03D3  1C03               	skipc
  1778  03D4  2BD6               	goto	u1011
  1779  03D5  2BD7               	goto	u1010
  1780  03D6                     u1011:
  1781  03D6  2BF3               	goto	l140
  1782  03D7                     u1010:
  1783  03D7                     l1534:
  1784  03D7  3028               	movlw	40
  1785  03D8  0229               	subwf	lcd_cursor@position,w
  1786  03D9  1803               	skipnc
  1787  03DA  2BDC               	goto	u1021
  1788  03DB  2BDD               	goto	u1020
  1789  03DC                     u1021:
  1790  03DC  2BF3               	goto	l140
  1791  03DD                     u1020:
  1792  03DD                     l1536:
  1793                           
  1794                           ;main.c: 449:   lcd_write_byte(0x80 | (position % 60 + 0x54), 0);
  1795  03DD  01FA               	clrf	lcd_write_byte@RS
  1796  03DE  303C               	movlw	60
  1797  03DF  00F3               	movwf	___awmod@divisor
  1798  03E0  3000               	movlw	0
  1799  03E1  00F4               	movwf	___awmod@divisor+1
  1800  03E2  0829               	movf	lcd_cursor@position,w
  1801  03E3  00A6               	movwf	??_lcd_cursor
  1802  03E4  01A7               	clrf	??_lcd_cursor+1
  1803  03E5  0826               	movf	??_lcd_cursor,w
  1804  03E6  00F5               	movwf	___awmod@dividend
  1805  03E7  0827               	movf	??_lcd_cursor+1,w
  1806  03E8  00F6               	movwf	___awmod@dividend+1
  1807  03E9  118A  24E6  118A   	fcall	___awmod
  1808  03EC  0873               	movf	?___awmod,w
  1809  03ED  3E54               	addlw	84
  1810  03EE  3880               	iorlw	128
  1811  03EF  118A  263D  118A   	fcall	_lcd_write_byte
  1812  03F2  2BF3               	goto	l146
  1813  03F3                     l140:
  1814  03F3                     l146:
  1815  03F3  0008               	return
  1816  03F4                     __end_of_lcd_cursor:
  1817                           
  1818                           	psect	text4
  1819  06BD                     __ptext4:	
  1820 ;; *************** function ___bmul *****************
  1821 ;; Defined at:
  1822 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  multiplier      1    wreg     unsigned char 
  1825 ;;  multiplicand    1    3[COMMON] unsigned char 
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;  multiplier      1    6[COMMON] unsigned char 
  1828 ;;  product         1    5[COMMON] unsigned char 
  1829 ;; Return value:  Size  Location     Type
  1830 ;;                  1    wreg      unsigned char 
  1831 ;; Registers used:
  1832 ;;		wreg, status,2, status,0
  1833 ;; Tracked objects:
  1834 ;;		On entry : 0/0
  1835 ;;		On exit  : 0/0
  1836 ;;		Unchanged: 0/0
  1837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1838 ;;      Params:         1       0       0       0       0
  1839 ;;      Locals:         2       0       0       0       0
  1840 ;;      Temps:          1       0       0       0       0
  1841 ;;      Totals:         4       0       0       0       0
  1842 ;;Total ram usage:        4 bytes
  1843 ;; Hardware stack levels used: 1
  1844 ;; Hardware stack levels required when called: 1
  1845 ;; This function calls:
  1846 ;;		Nothing
  1847 ;; This function is called by:
  1848 ;;		_lcd_cursor
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           
  1853                           ;psect for function ___bmul
  1854  06BD                     ___bmul:
  1855                           
  1856                           ;incstack = 0
  1857                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1858                           ;___bmul@multiplier stored from wreg
  1859  06BD  00F6               	movwf	___bmul@multiplier
  1860  06BE                     l1378:
  1861  06BE  01F5               	clrf	___bmul@product
  1862  06BF                     l1380:
  1863  06BF  1C76               	btfss	___bmul@multiplier,0
  1864  06C0  2EC2               	goto	u711
  1865  06C1  2EC3               	goto	u710
  1866  06C2                     u711:
  1867  06C2  2EC7               	goto	l1384
  1868  06C3                     u710:
  1869  06C3                     l1382:
  1870  06C3  0873               	movf	___bmul@multiplicand,w
  1871  06C4  00F4               	movwf	??___bmul
  1872  06C5  0874               	movf	??___bmul,w
  1873  06C6  07F5               	addwf	___bmul@product,f
  1874  06C7                     l1384:
  1875  06C7  1003               	clrc
  1876  06C8  0DF3               	rlf	___bmul@multiplicand,f
  1877  06C9                     l1386:
  1878  06C9  1003               	clrc
  1879  06CA  0CF6               	rrf	___bmul@multiplier,f
  1880  06CB  0876               	movf	___bmul@multiplier,w
  1881  06CC  1D03               	btfss	3,2
  1882  06CD  2ECF               	goto	u721
  1883  06CE  2ED0               	goto	u720
  1884  06CF                     u721:
  1885  06CF  2EBF               	goto	l1380
  1886  06D0                     u720:
  1887  06D0                     l1388:
  1888  06D0  0875               	movf	___bmul@product,w
  1889  06D1                     l292:
  1890  06D1  0008               	return
  1891  06D2                     __end_of___bmul:
  1892                           
  1893                           	psect	text5
  1894  04E6                     __ptext5:	
  1895 ;; *************** function ___awmod *****************
  1896 ;; Defined at:
  1897 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  divisor         2    3[COMMON] int 
  1900 ;;  dividend        2    5[COMMON] int 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  sign            1    9[COMMON] unsigned char 
  1903 ;;  counter         1    8[COMMON] unsigned char 
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  2    3[COMMON] int 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2, status,0
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1913 ;;      Params:         4       0       0       0       0
  1914 ;;      Locals:         2       0       0       0       0
  1915 ;;      Temps:          1       0       0       0       0
  1916 ;;      Totals:         7       0       0       0       0
  1917 ;;Total ram usage:        7 bytes
  1918 ;; Hardware stack levels used: 1
  1919 ;; Hardware stack levels required when called: 1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_lcd_cursor
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function ___awmod
  1929  04E6                     ___awmod:
  1930  04E6                     l1392:	
  1931                           ;incstack = 0
  1932                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1933                           
  1934  04E6  01F9               	clrf	___awmod@sign
  1935  04E7                     l1394:
  1936  04E7  1FF6               	btfss	___awmod@dividend+1,7
  1937  04E8  2CEA               	goto	u731
  1938  04E9  2CEB               	goto	u730
  1939  04EA                     u731:
  1940  04EA  2CF2               	goto	l1400
  1941  04EB                     u730:
  1942  04EB                     l1396:
  1943  04EB  09F5               	comf	___awmod@dividend,f
  1944  04EC  09F6               	comf	___awmod@dividend+1,f
  1945  04ED  0AF5               	incf	___awmod@dividend,f
  1946  04EE  1903               	skipnz
  1947  04EF  0AF6               	incf	___awmod@dividend+1,f
  1948  04F0                     l1398:
  1949  04F0  01F9               	clrf	___awmod@sign
  1950  04F1  0AF9               	incf	___awmod@sign,f
  1951  04F2                     l1400:
  1952  04F2  1FF4               	btfss	___awmod@divisor+1,7
  1953  04F3  2CF5               	goto	u741
  1954  04F4  2CF6               	goto	u740
  1955  04F5                     u741:
  1956  04F5  2CFB               	goto	l1404
  1957  04F6                     u740:
  1958  04F6                     l1402:
  1959  04F6  09F3               	comf	___awmod@divisor,f
  1960  04F7  09F4               	comf	___awmod@divisor+1,f
  1961  04F8  0AF3               	incf	___awmod@divisor,f
  1962  04F9  1903               	skipnz
  1963  04FA  0AF4               	incf	___awmod@divisor+1,f
  1964  04FB                     l1404:
  1965  04FB  0873               	movf	___awmod@divisor,w
  1966  04FC  0474               	iorwf	___awmod@divisor+1,w
  1967  04FD  1903               	btfsc	3,2
  1968  04FE  2D00               	goto	u751
  1969  04FF  2D01               	goto	u750
  1970  0500                     u751:
  1971  0500  2D30               	goto	l1422
  1972  0501                     u750:
  1973  0501                     l1406:
  1974  0501  01F8               	clrf	___awmod@counter
  1975  0502  0AF8               	incf	___awmod@counter,f
  1976  0503  2D0F               	goto	l1412
  1977  0504                     l1408:
  1978  0504  3001               	movlw	1
  1979  0505                     u765:
  1980  0505  1003               	clrc
  1981  0506  0DF3               	rlf	___awmod@divisor,f
  1982  0507  0DF4               	rlf	___awmod@divisor+1,f
  1983  0508  3EFF               	addlw	-1
  1984  0509  1D03               	skipz
  1985  050A  2D05               	goto	u765
  1986  050B                     l1410:
  1987  050B  3001               	movlw	1
  1988  050C  00F7               	movwf	??___awmod
  1989  050D  0877               	movf	??___awmod,w
  1990  050E  07F8               	addwf	___awmod@counter,f
  1991  050F                     l1412:
  1992  050F  1FF4               	btfss	___awmod@divisor+1,7
  1993  0510  2D12               	goto	u771
  1994  0511  2D13               	goto	u770
  1995  0512                     u771:
  1996  0512  2D04               	goto	l1408
  1997  0513                     u770:
  1998  0513                     l1414:
  1999  0513  0874               	movf	___awmod@divisor+1,w
  2000  0514  0276               	subwf	___awmod@dividend+1,w
  2001  0515  1D03               	skipz
  2002  0516  2D19               	goto	u785
  2003  0517  0873               	movf	___awmod@divisor,w
  2004  0518  0275               	subwf	___awmod@dividend,w
  2005  0519                     u785:
  2006  0519  1C03               	skipc
  2007  051A  2D1C               	goto	u781
  2008  051B  2D1D               	goto	u780
  2009  051C                     u781:
  2010  051C  2D23               	goto	l1418
  2011  051D                     u780:
  2012  051D                     l1416:
  2013  051D  0873               	movf	___awmod@divisor,w
  2014  051E  02F5               	subwf	___awmod@dividend,f
  2015  051F  0874               	movf	___awmod@divisor+1,w
  2016  0520  1C03               	skipc
  2017  0521  03F6               	decf	___awmod@dividend+1,f
  2018  0522  02F6               	subwf	___awmod@dividend+1,f
  2019  0523                     l1418:
  2020  0523  3001               	movlw	1
  2021  0524                     u795:
  2022  0524  1003               	clrc
  2023  0525  0CF4               	rrf	___awmod@divisor+1,f
  2024  0526  0CF3               	rrf	___awmod@divisor,f
  2025  0527  3EFF               	addlw	-1
  2026  0528  1D03               	skipz
  2027  0529  2D24               	goto	u795
  2028  052A                     l1420:
  2029  052A  3001               	movlw	1
  2030  052B  02F8               	subwf	___awmod@counter,f
  2031  052C  1D03               	btfss	3,2
  2032  052D  2D2F               	goto	u801
  2033  052E  2D30               	goto	u800
  2034  052F                     u801:
  2035  052F  2D13               	goto	l1414
  2036  0530                     u800:
  2037  0530                     l1422:
  2038  0530  0879               	movf	___awmod@sign,w
  2039  0531  1903               	btfsc	3,2
  2040  0532  2D34               	goto	u811
  2041  0533  2D35               	goto	u810
  2042  0534                     u811:
  2043  0534  2D3A               	goto	l1426
  2044  0535                     u810:
  2045  0535                     l1424:
  2046  0535  09F5               	comf	___awmod@dividend,f
  2047  0536  09F6               	comf	___awmod@dividend+1,f
  2048  0537  0AF5               	incf	___awmod@dividend,f
  2049  0538  1903               	skipnz
  2050  0539  0AF6               	incf	___awmod@dividend+1,f
  2051  053A                     l1426:
  2052  053A  0876               	movf	___awmod@dividend+1,w
  2053  053B  00F4               	movwf	?___awmod+1
  2054  053C  0875               	movf	___awmod@dividend,w
  2055  053D  00F3               	movwf	?___awmod
  2056  053E                     l432:
  2057  053E  0008               	return
  2058  053F                     __end_of___awmod:
  2059                           
  2060                           	psect	text6
  2061  06D2                     __ptext6:	
  2062 ;; *************** function _lcd_clear *****************
  2063 ;; Defined at:
  2064 ;;		line 455 in file "main.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;		None
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;		None
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  1    wreg      void 
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0, pclath, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2078 ;;      Params:         0       0       0       0       0
  2079 ;;      Locals:         0       0       0       0       0
  2080 ;;      Temps:          0       2       0       0       0
  2081 ;;      Totals:         0       2       0       0       0
  2082 ;;Total ram usage:        2 bytes
  2083 ;; Hardware stack levels used: 1
  2084 ;; Hardware stack levels required when called: 3
  2085 ;; This function calls:
  2086 ;;		_lcd_write_byte
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;; This function uses a non-reentrant model
  2090 ;;
  2091                           
  2092                           
  2093                           ;psect for function _lcd_clear
  2094  06D2                     _lcd_clear:
  2095  06D2                     l1540:	
  2096                           ;incstack = 0
  2097                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  2098                           
  2099                           
  2100                           ;main.c: 456:     lcd_write_byte(0x01, 0);
  2101  06D2  01FA               	clrf	lcd_write_byte@RS
  2102  06D3  3001               	movlw	1
  2103  06D4  118A  263D  118A   	fcall	_lcd_write_byte
  2104  06D7                     l1542:
  2105                           
  2106                           ;main.c: 457:     _delay((unsigned long)((2000)*(8000000/4000000.0)));
  2107  06D7  3006               	movlw	6
  2108  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2109  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2110  06DA  00A6               	movwf	??_lcd_clear+1
  2111  06DB  302F               	movlw	47
  2112  06DC  00A5               	movwf	??_lcd_clear
  2113  06DD                     u1347:
  2114  06DD  0BA5               	decfsz	??_lcd_clear,f
  2115  06DE  2EDD               	goto	u1347
  2116  06DF  0BA6               	decfsz	??_lcd_clear+1,f
  2117  06E0  2EDD               	goto	u1347
  2118  06E1  2EE2               	nop2
  2119  06E2                     l149:
  2120  06E2  0008               	return
  2121  06E3                     __end_of_lcd_clear:
  2122                           
  2123                           	psect	text7
  2124  063D                     __ptext7:	
  2125 ;; *************** function _lcd_write_byte *****************
  2126 ;; Defined at:
  2127 ;;		line 420 in file "main.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  byteIn          1    wreg     unsigned char 
  2130 ;;  RS              1   10[COMMON] unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  byteIn          1    4[BANK0 ] unsigned char 
  2133 ;;  lowerNibble     1    3[BANK0 ] unsigned char 
  2134 ;;  upperNibble     1    2[BANK0 ] unsigned char 
  2135 ;; Return value:  Size  Location     Type
  2136 ;;                  1    wreg      void 
  2137 ;; Registers used:
  2138 ;;		wreg, status,2, status,0, pclath, cstack
  2139 ;; Tracked objects:
  2140 ;;		On entry : 0/0
  2141 ;;		On exit  : 0/0
  2142 ;;		Unchanged: 0/0
  2143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2144 ;;      Params:         1       0       0       0       0
  2145 ;;      Locals:         0       3       0       0       0
  2146 ;;      Temps:          0       2       0       0       0
  2147 ;;      Totals:         1       5       0       0       0
  2148 ;;Total ram usage:        6 bytes
  2149 ;; Hardware stack levels used: 1
  2150 ;; Hardware stack levels required when called: 2
  2151 ;; This function calls:
  2152 ;;		_lcd_write_nibble
  2153 ;; This function is called by:
  2154 ;;		_main
  2155 ;;		_lcd_init
  2156 ;;		_lcd_cursor
  2157 ;;		_lcd_clear
  2158 ;;		_lcd_write_string
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           
  2163                           ;psect for function _lcd_write_byte
  2164  063D                     _lcd_write_byte:
  2165                           
  2166                           ;incstack = 0
  2167                           ; Regs used in _lcd_write_byte: [wreg+status,2+status,0+pclath+cstack]
  2168                           ;lcd_write_byte@byteIn stored from wreg
  2169  063D  1283               	bcf	3,5	;RP0=0, select bank0
  2170  063E  1303               	bcf	3,6	;RP1=0, select bank0
  2171  063F  00A4               	movwf	lcd_write_byte@byteIn
  2172  0640                     l1330:
  2173                           
  2174                           ;main.c: 422:     char upperNibble, lowerNibble;;main.c: 424:     upperNibble = byteIn >
      +                          > 4;
  2175  0640  0824               	movf	lcd_write_byte@byteIn,w
  2176  0641  00A0               	movwf	??_lcd_write_byte
  2177  0642  3004               	movlw	4
  2178  0643                     u665:
  2179  0643  1003               	clrc
  2180  0644  0CA0               	rrf	??_lcd_write_byte,f
  2181  0645  3EFF               	addlw	-1
  2182  0646  1D03               	skipz
  2183  0647  2E43               	goto	u665
  2184  0648  0820               	movf	??_lcd_write_byte,w
  2185  0649  00A1               	movwf	??_lcd_write_byte+1
  2186  064A  0821               	movf	??_lcd_write_byte+1,w
  2187  064B  00A2               	movwf	lcd_write_byte@upperNibble
  2188  064C                     l1332:
  2189                           
  2190                           ;main.c: 425:     lowerNibble = byteIn & 0x0F;
  2191  064C  0824               	movf	lcd_write_byte@byteIn,w
  2192  064D  390F               	andlw	15
  2193  064E  00A0               	movwf	??_lcd_write_byte
  2194  064F  0820               	movf	??_lcd_write_byte,w
  2195  0650  00A3               	movwf	lcd_write_byte@lowerNibble
  2196  0651                     l1334:
  2197                           
  2198                           ;main.c: 427:     lcd_write_nibble(upperNibble, RS);
  2199  0651  087A               	movf	lcd_write_byte@RS,w
  2200  0652  00A0               	movwf	??_lcd_write_byte
  2201  0653  0820               	movf	??_lcd_write_byte,w
  2202  0654  00F3               	movwf	lcd_write_nibble@RS
  2203  0655  0822               	movf	lcd_write_byte@upperNibble,w
  2204  0656  118A  253F  118A   	fcall	_lcd_write_nibble
  2205  0659                     l1336:
  2206                           
  2207                           ;main.c: 428:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2208  0659  3002               	movlw	2
  2209  065A  1283               	bcf	3,5	;RP0=0, select bank0
  2210  065B  1303               	bcf	3,6	;RP1=0, select bank0
  2211  065C  00A0               	movwf	??_lcd_write_byte
  2212  065D                     u1357:
  2213  065D  0BA0               	decfsz	??_lcd_write_byte,f
  2214  065E  2E5D               	goto	u1357
  2215  065F  0000               	nop
  2216  0660                     l1338:
  2217                           
  2218                           ;main.c: 429:     lcd_write_nibble(lowerNibble, RS);
  2219  0660  087A               	movf	lcd_write_byte@RS,w
  2220  0661  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0662  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0663  00A0               	movwf	??_lcd_write_byte
  2223  0664  0820               	movf	??_lcd_write_byte,w
  2224  0665  00F3               	movwf	lcd_write_nibble@RS
  2225  0666  0823               	movf	lcd_write_byte@lowerNibble,w
  2226  0667  118A  253F  118A   	fcall	_lcd_write_nibble
  2227  066A                     l136:
  2228  066A  0008               	return
  2229  066B                     __end_of_lcd_write_byte:
  2230                           
  2231                           	psect	text8
  2232  053F                     __ptext8:	
  2233 ;; *************** function _lcd_write_nibble *****************
  2234 ;; Defined at:
  2235 ;;		line 401 in file "main.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  byteIn          1    wreg     unsigned char 
  2238 ;;  RS              1    3[COMMON] unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  byteIn          1    6[COMMON] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         1       0       0       0       0
  2251 ;;      Locals:         1       0       0       0       0
  2252 ;;      Temps:          2       0       0       0       0
  2253 ;;      Totals:         4       0       0       0       0
  2254 ;;Total ram usage:        4 bytes
  2255 ;; Hardware stack levels used: 1
  2256 ;; Hardware stack levels required when called: 1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_lcd_init
  2261 ;;		_lcd_write_byte
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _lcd_write_nibble
  2267  053F                     _lcd_write_nibble:
  2268                           
  2269                           ;incstack = 0
  2270                           ; Regs used in _lcd_write_nibble: [wreg+status,2+status,0]
  2271                           ;lcd_write_nibble@byteIn stored from wreg
  2272  053F  00F6               	movwf	lcd_write_nibble@byteIn
  2273  0540                     l1316:
  2274                           
  2275                           ;main.c: 402:     PORTAbits.RA7 = 1;
  2276  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2277  0541  1303               	bcf	3,6	;RP1=0, select bank0
  2278  0542  1785               	bsf	5,7	;volatile
  2279  0543                     l1318:
  2280                           
  2281                           ;main.c: 404:     if(RS){
  2282  0543  0873               	movf	lcd_write_nibble@RS,w
  2283  0544  1903               	btfsc	3,2
  2284  0545  2D47               	goto	u631
  2285  0546  2D48               	goto	u630
  2286  0547                     u631:
  2287  0547  2D4A               	goto	l131
  2288  0548                     u630:
  2289  0548                     l1320:
  2290                           
  2291                           ;main.c: 405:         PORTAbits.RA6 = 1;
  2292  0548  1705               	bsf	5,6	;volatile
  2293                           
  2294                           ;main.c: 406:     } else {
  2295  0549  2D4B               	goto	l1322
  2296  054A                     l131:
  2297                           
  2298                           ;main.c: 407:         PORTAbits.RA6 = 0;
  2299  054A  1305               	bcf	5,6	;volatile
  2300  054B                     l1322:
  2301                           
  2302                           ;main.c: 409:     PORTBbits.RB4 = (byteIn & 0x08) >> 3;
  2303  054B  0876               	movf	lcd_write_nibble@byteIn,w
  2304  054C  00F4               	movwf	??_lcd_write_nibble
  2305  054D  3003               	movlw	3
  2306  054E                     u645:
  2307  054E  1003               	clrc
  2308  054F  0CF4               	rrf	??_lcd_write_nibble,f
  2309  0550  3EFF               	addlw	-1
  2310  0551  1D03               	skipz
  2311  0552  2D4E               	goto	u645
  2312  0553  0874               	movf	??_lcd_write_nibble,w
  2313  0554  3901               	andlw	1
  2314  0555  00F5               	movwf	??_lcd_write_nibble+1
  2315  0556  0EF5               	swapf	??_lcd_write_nibble+1,f
  2316  0557  0806               	movf	6,w	;volatile
  2317  0558  0675               	xorwf	??_lcd_write_nibble+1,w
  2318  0559  39EF               	andlw	-17
  2319  055A  0675               	xorwf	??_lcd_write_nibble+1,w
  2320  055B  0086               	movwf	6	;volatile
  2321                           
  2322                           ;main.c: 410:     PORTBbits.RB3 = (byteIn & 0x04) >> 2;
  2323  055C  0876               	movf	lcd_write_nibble@byteIn,w
  2324  055D  00F4               	movwf	??_lcd_write_nibble
  2325  055E  3002               	movlw	2
  2326  055F                     u655:
  2327  055F  1003               	clrc
  2328  0560  0CF4               	rrf	??_lcd_write_nibble,f
  2329  0561  3EFF               	addlw	-1
  2330  0562  1D03               	skipz
  2331  0563  2D5F               	goto	u655
  2332  0564  0874               	movf	??_lcd_write_nibble,w
  2333  0565  3901               	andlw	1
  2334  0566  00F5               	movwf	??_lcd_write_nibble+1
  2335  0567  0DF5               	rlf	??_lcd_write_nibble+1,f
  2336  0568  0DF5               	rlf	??_lcd_write_nibble+1,f
  2337  0569  0DF5               	rlf	??_lcd_write_nibble+1,f
  2338  056A  0806               	movf	6,w	;volatile
  2339  056B  0675               	xorwf	??_lcd_write_nibble+1,w
  2340  056C  39F7               	andlw	-9
  2341  056D  0675               	xorwf	??_lcd_write_nibble+1,w
  2342  056E  0086               	movwf	6	;volatile
  2343                           
  2344                           ;main.c: 411:     PORTBbits.RB2 = (byteIn & 0x02) >> 1;
  2345  056F  0876               	movf	lcd_write_nibble@byteIn,w
  2346  0570  00F4               	movwf	??_lcd_write_nibble
  2347  0571  1003               	clrc
  2348  0572  0C74               	rrf	??_lcd_write_nibble,w
  2349  0573  3901               	andlw	1
  2350  0574  00F5               	movwf	??_lcd_write_nibble+1
  2351  0575  0DF5               	rlf	??_lcd_write_nibble+1,f
  2352  0576  0DF5               	rlf	??_lcd_write_nibble+1,f
  2353  0577  0806               	movf	6,w	;volatile
  2354  0578  0675               	xorwf	??_lcd_write_nibble+1,w
  2355  0579  39FB               	andlw	-5
  2356  057A  0675               	xorwf	??_lcd_write_nibble+1,w
  2357  057B  0086               	movwf	6	;volatile
  2358                           
  2359                           ;main.c: 412:     PORTBbits.RB1 = byteIn & 0x01 ;
  2360  057C  0876               	movf	lcd_write_nibble@byteIn,w
  2361  057D  3901               	andlw	1
  2362  057E  00F4               	movwf	??_lcd_write_nibble
  2363  057F  0DF4               	rlf	??_lcd_write_nibble,f
  2364  0580  0806               	movf	6,w	;volatile
  2365  0581  0674               	xorwf	??_lcd_write_nibble,w
  2366  0582  39FD               	andlw	-3
  2367  0583  0674               	xorwf	??_lcd_write_nibble,w
  2368  0584  0086               	movwf	6	;volatile
  2369  0585                     l1324:
  2370                           
  2371                           ;main.c: 413:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  2372  0585  3003               	movlw	3
  2373  0586  00F4               	movwf	??_lcd_write_nibble
  2374  0587                     u1367:
  2375  0587  0BF4               	decfsz	??_lcd_write_nibble,f
  2376  0588  2D87               	goto	u1367
  2377  0589                     l1326:
  2378                           
  2379                           ;main.c: 414:     PORTAbits.RA7 = 0;
  2380  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2381  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2382  058B  1385               	bcf	5,7	;volatile
  2383  058C                     l133:
  2384  058C  0008               	return
  2385  058D                     __end_of_lcd_write_nibble:
  2386                           
  2387                           	psect	text9
  2388  0268                     __ptext9:	
  2389 ;; *************** function _intToString *****************
  2390 ;; Defined at:
  2391 ;;		line 485 in file "main.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;  number          2    0[BANK0 ] unsigned short 
  2394 ;;  divisor         2    2[BANK0 ] unsigned short 
  2395 ;;  dest            1    4[BANK0 ] PTR unsigned char 
  2396 ;;		 -> main@numStr(6), 
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;  whole_portio    2   11[BANK0 ] unsigned short 
  2399 ;;  digits_whole    1   16[BANK0 ] unsigned char 
  2400 ;;  k               1   15[BANK0 ] unsigned char 
  2401 ;;  i               1   14[BANK0 ] unsigned char 
  2402 ;;  digits_decim    1   13[BANK0 ] unsigned char 
  2403 ;;  j               1   10[BANK0 ] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      unsigned char 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2413 ;;      Params:         0       5       0       0       0
  2414 ;;      Locals:         0       7       0       0       0
  2415 ;;      Temps:          0       5       0       0       0
  2416 ;;      Totals:         0      17       0       0       0
  2417 ;;Total ram usage:       17 bytes
  2418 ;; Hardware stack levels used: 1
  2419 ;; Hardware stack levels required when called: 2
  2420 ;; This function calls:
  2421 ;;		___lwdiv
  2422 ;;		___lwmod
  2423 ;;		_numDigits
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           
  2430                           ;psect for function _intToString
  2431  0268                     _intToString:
  2432  0268                     l1546:	
  2433                           ;incstack = 0
  2434                           ; Regs used in _intToString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2435                           
  2436                           
  2437                           ;main.c: 486:     char i, k;;main.c: 487:     char j=0;
  2438  0268  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0269  1303               	bcf	3,6	;RP1=0, select bank0
  2440  026A  01AA               	clrf	intToString@j
  2441  026B                     l1548:
  2442                           
  2443                           ;main.c: 488:     char digits_decimal, digits_whole;;main.c: 489:     unsigned short who
      +                          le_portion;;main.c: 491:     whole_portion = number / divisor;
  2444  026B  0823               	movf	intToString@divisor+1,w
  2445  026C  00F4               	movwf	___lwdiv@divisor+1
  2446  026D  0822               	movf	intToString@divisor,w
  2447  026E  00F3               	movwf	___lwdiv@divisor
  2448  026F  0821               	movf	intToString@number+1,w
  2449  0270  00F6               	movwf	___lwdiv@dividend+1
  2450  0271  0820               	movf	intToString@number,w
  2451  0272  00F5               	movwf	___lwdiv@dividend
  2452  0273  118A  258D  118A   	fcall	___lwdiv
  2453  0276  0874               	movf	?___lwdiv+1,w
  2454  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2455  0278  1303               	bcf	3,6	;RP1=0, select bank0
  2456  0279  00AC               	movwf	intToString@whole_portion+1
  2457  027A  0873               	movf	?___lwdiv,w
  2458  027B  00AB               	movwf	intToString@whole_portion
  2459  027C                     l1550:
  2460                           
  2461                           ;main.c: 493:     if(whole_portion == 0){
  2462  027C  082B               	movf	intToString@whole_portion,w
  2463  027D  042C               	iorwf	intToString@whole_portion+1,w
  2464  027E  1D03               	btfss	3,2
  2465  027F  2A81               	goto	u1031
  2466  0280  2A82               	goto	u1030
  2467  0281                     u1031:
  2468  0281  2A93               	goto	l1558
  2469  0282                     u1030:
  2470  0282                     l1552:
  2471                           
  2472                           ;main.c: 494:         digits_whole = 0;
  2473  0282  01B0               	clrf	intToString@digits_whole
  2474  0283                     l1554:
  2475                           
  2476                           ;main.c: 495:         digits_decimal = numDigits(divisor)-1;
  2477  0283  0823               	movf	intToString@divisor+1,w
  2478  0284  00F4               	movwf	numDigits@num+1
  2479  0285  0822               	movf	intToString@divisor,w
  2480  0286  00F3               	movwf	numDigits@num
  2481  0287  118A  266B  118A   	fcall	_numDigits
  2482  028A  3EFF               	addlw	255
  2483  028B  1283               	bcf	3,5	;RP0=0, select bank0
  2484  028C  1303               	bcf	3,6	;RP1=0, select bank0
  2485  028D  00A5               	movwf	??_intToString
  2486  028E  0825               	movf	??_intToString,w
  2487  028F  00AD               	movwf	intToString@digits_decimal
  2488  0290                     l1556:
  2489                           
  2490                           ;main.c: 496:         k = 1;
  2491  0290  01AF               	clrf	intToString@k
  2492  0291  0AAF               	incf	intToString@k,f
  2493                           
  2494                           ;main.c: 497:     } else {
  2495  0292  2AAF               	goto	l1564
  2496  0293                     l1558:
  2497                           
  2498                           ;main.c: 498:         digits_whole = numDigits(whole_portion);
  2499  0293  082C               	movf	intToString@whole_portion+1,w
  2500  0294  00F4               	movwf	numDigits@num+1
  2501  0295  082B               	movf	intToString@whole_portion,w
  2502  0296  00F3               	movwf	numDigits@num
  2503  0297  118A  266B  118A   	fcall	_numDigits
  2504  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2505  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2506  029C  00A5               	movwf	??_intToString
  2507  029D  0825               	movf	??_intToString,w
  2508  029E  00B0               	movwf	intToString@digits_whole
  2509  029F                     l1560:
  2510                           
  2511                           ;main.c: 499:         k = 0;
  2512  029F  01AF               	clrf	intToString@k
  2513  02A0                     l1562:
  2514                           
  2515                           ;main.c: 500:         digits_decimal = numDigits(number) - digits_whole;
  2516  02A0  0821               	movf	intToString@number+1,w
  2517  02A1  00F4               	movwf	numDigits@num+1
  2518  02A2  0820               	movf	intToString@number,w
  2519  02A3  00F3               	movwf	numDigits@num
  2520  02A4  118A  266B  118A   	fcall	_numDigits
  2521  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2522  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2523  02A9  00A5               	movwf	??_intToString
  2524  02AA  0830               	movf	intToString@digits_whole,w
  2525  02AB  0225               	subwf	??_intToString,w
  2526  02AC  00A6               	movwf	??_intToString+1
  2527  02AD  0826               	movf	??_intToString+1,w
  2528  02AE  00AD               	movwf	intToString@digits_decimal
  2529  02AF                     l1564:
  2530                           
  2531                           ;main.c: 503:     if (number == 0) {
  2532  02AF  0820               	movf	intToString@number,w
  2533  02B0  0421               	iorwf	intToString@number+1,w
  2534  02B1  1D03               	btfss	3,2
  2535  02B2  2AB4               	goto	u1041
  2536  02B3  2AB5               	goto	u1040
  2537  02B4                     u1041:
  2538  02B4  2AC0               	goto	l1574
  2539  02B5                     u1040:
  2540  02B5                     l1566:
  2541                           
  2542                           ;main.c: 504:         dest[0] = '0';
  2543  02B5  3030               	movlw	48
  2544  02B6  00A5               	movwf	??_intToString
  2545  02B7  0824               	movf	intToString@dest,w
  2546  02B8  0084               	movwf	4
  2547  02B9  0825               	movf	??_intToString,w
  2548  02BA  1383               	bcf	3,7	;select IRP bank0
  2549  02BB  0080               	movwf	0
  2550  02BC                     l1568:
  2551                           
  2552                           ;main.c: 505:         dest[1] = '\0';
  2553  02BC  0A24               	incf	intToString@dest,w
  2554  02BD  0084               	movwf	4
  2555  02BE  0180               	clrf	0
  2556  02BF  2B6E               	goto	l172
  2557  02C0                     l1574:
  2558                           
  2559                           ;main.c: 508:         for (i = 0; i < digits_decimal; i++) {
  2560  02C0  01AE               	clrf	intToString@i
  2561  02C1  2AF9               	goto	l1582
  2562  02C2                     l1576:
  2563                           
  2564                           ;main.c: 509:             dest[digits_whole+digits_decimal - i +k] = (number % 10) + 48;
  2565  02C2  300A               	movlw	10
  2566  02C3  00F3               	movwf	___lwmod@divisor
  2567  02C4  3000               	movlw	0
  2568  02C5  00F4               	movwf	___lwmod@divisor+1
  2569  02C6  0821               	movf	intToString@number+1,w
  2570  02C7  00F6               	movwf	___lwmod@dividend+1
  2571  02C8  0820               	movf	intToString@number,w
  2572  02C9  00F5               	movwf	___lwmod@dividend
  2573  02CA  118A  25D1  118A   	fcall	___lwmod
  2574  02CD  0873               	movf	?___lwmod,w
  2575  02CE  3E30               	addlw	48
  2576  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2577  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2578  02D1  00A5               	movwf	??_intToString
  2579  02D2  0824               	movf	intToString@dest,w
  2580  02D3  00A6               	movwf	??_intToString+1
  2581  02D4  082E               	movf	intToString@i,w
  2582  02D5  02A6               	subwf	??_intToString+1,f
  2583  02D6  082F               	movf	intToString@k,w
  2584  02D7  0726               	addwf	??_intToString+1,w
  2585  02D8  00A7               	movwf	??_intToString+2
  2586  02D9  082D               	movf	intToString@digits_decimal,w
  2587  02DA  0727               	addwf	??_intToString+2,w
  2588  02DB  00A8               	movwf	??_intToString+3
  2589  02DC  0830               	movf	intToString@digits_whole,w
  2590  02DD  0728               	addwf	??_intToString+3,w
  2591  02DE  00A9               	movwf	??_intToString+4
  2592  02DF  0829               	movf	??_intToString+4,w
  2593  02E0  0084               	movwf	4
  2594  02E1  0825               	movf	??_intToString,w
  2595  02E2  1383               	bcf	3,7	;select IRP bank0
  2596  02E3  0080               	movwf	0
  2597  02E4                     l1578:
  2598                           
  2599                           ;main.c: 510:             number = number / 10;
  2600  02E4  300A               	movlw	10
  2601  02E5  00F3               	movwf	___lwdiv@divisor
  2602  02E6  3000               	movlw	0
  2603  02E7  00F4               	movwf	___lwdiv@divisor+1
  2604  02E8  0821               	movf	intToString@number+1,w
  2605  02E9  00F6               	movwf	___lwdiv@dividend+1
  2606  02EA  0820               	movf	intToString@number,w
  2607  02EB  00F5               	movwf	___lwdiv@dividend
  2608  02EC  118A  258D  118A   	fcall	___lwdiv
  2609  02EF  0874               	movf	?___lwdiv+1,w
  2610  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  2611  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  2612  02F2  00A1               	movwf	intToString@number+1
  2613  02F3  0873               	movf	?___lwdiv,w
  2614  02F4  00A0               	movwf	intToString@number
  2615  02F5                     l1580:
  2616                           
  2617                           ;main.c: 511:         }
  2618  02F5  3001               	movlw	1
  2619  02F6  00A5               	movwf	??_intToString
  2620  02F7  0825               	movf	??_intToString,w
  2621  02F8  07AE               	addwf	intToString@i,f
  2622  02F9                     l1582:
  2623  02F9  082D               	movf	intToString@digits_decimal,w
  2624  02FA  022E               	subwf	intToString@i,w
  2625  02FB  1C03               	skipc
  2626  02FC  2AFE               	goto	u1051
  2627  02FD  2AFF               	goto	u1050
  2628  02FE                     u1051:
  2629  02FE  2AC2               	goto	l1576
  2630  02FF                     u1050:
  2631  02FF                     l1584:
  2632                           
  2633                           ;main.c: 512:         if(digits_decimal != 0){
  2634  02FF  082D               	movf	intToString@digits_decimal,w
  2635  0300  1903               	btfsc	3,2
  2636  0301  2B03               	goto	u1061
  2637  0302  2B04               	goto	u1060
  2638  0303                     u1061:
  2639  0303  2B13               	goto	l1590
  2640  0304                     u1060:
  2641  0304                     l1586:
  2642                           
  2643                           ;main.c: 513:             dest[digits_whole+k] = '.';
  2644  0304  302E               	movlw	46
  2645  0305  00A5               	movwf	??_intToString
  2646  0306  082F               	movf	intToString@k,w
  2647  0307  0724               	addwf	intToString@dest,w
  2648  0308  00A6               	movwf	??_intToString+1
  2649  0309  0830               	movf	intToString@digits_whole,w
  2650  030A  0726               	addwf	??_intToString+1,w
  2651  030B  00A7               	movwf	??_intToString+2
  2652  030C  0827               	movf	??_intToString+2,w
  2653  030D  0084               	movwf	4
  2654  030E  0825               	movf	??_intToString,w
  2655  030F  1383               	bcf	3,7	;select IRP bank0
  2656  0310  0080               	movwf	0
  2657  0311                     l1588:
  2658                           
  2659                           ;main.c: 514:             j=1;
  2660  0311  01AA               	clrf	intToString@j
  2661  0312  0AAA               	incf	intToString@j,f
  2662  0313                     l1590:
  2663                           
  2664                           ;main.c: 517:         for (i = 0; i < digits_whole+k; i++) {
  2665  0313  01AE               	clrf	intToString@i
  2666  0314  2B4C               	goto	l1598
  2667  0315                     l1592:
  2668                           
  2669                           ;main.c: 518:             dest[digits_whole - i - 1 + k] = (number % 10) + 48;
  2670  0315  300A               	movlw	10
  2671  0316  00F3               	movwf	___lwmod@divisor
  2672  0317  3000               	movlw	0
  2673  0318  00F4               	movwf	___lwmod@divisor+1
  2674  0319  1283               	bcf	3,5	;RP0=0, select bank0
  2675  031A  1303               	bcf	3,6	;RP1=0, select bank0
  2676  031B  0821               	movf	intToString@number+1,w
  2677  031C  00F6               	movwf	___lwmod@dividend+1
  2678  031D  0820               	movf	intToString@number,w
  2679  031E  00F5               	movwf	___lwmod@dividend
  2680  031F  118A  25D1  118A   	fcall	___lwmod
  2681  0322  0873               	movf	?___lwmod,w
  2682  0323  3E30               	addlw	48
  2683  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2685  0326  00A5               	movwf	??_intToString
  2686  0327  0824               	movf	intToString@dest,w
  2687  0328  00A6               	movwf	??_intToString+1
  2688  0329  082E               	movf	intToString@i,w
  2689  032A  02A6               	subwf	??_intToString+1,f
  2690  032B  0830               	movf	intToString@digits_whole,w
  2691  032C  0726               	addwf	??_intToString+1,w
  2692  032D  00A7               	movwf	??_intToString+2
  2693  032E  082F               	movf	intToString@k,w
  2694  032F  0727               	addwf	??_intToString+2,w
  2695  0330  00A8               	movwf	??_intToString+3
  2696  0331  0828               	movf	??_intToString+3,w
  2697  0332  3EFF               	addlw	-1
  2698  0333  0084               	movwf	4
  2699  0334  0825               	movf	??_intToString,w
  2700  0335  1383               	bcf	3,7	;select IRP bank0
  2701  0336  0080               	movwf	0
  2702  0337                     l1594:
  2703                           
  2704                           ;main.c: 519:             number = number / 10;
  2705  0337  300A               	movlw	10
  2706  0338  00F3               	movwf	___lwdiv@divisor
  2707  0339  3000               	movlw	0
  2708  033A  00F4               	movwf	___lwdiv@divisor+1
  2709  033B  0821               	movf	intToString@number+1,w
  2710  033C  00F6               	movwf	___lwdiv@dividend+1
  2711  033D  0820               	movf	intToString@number,w
  2712  033E  00F5               	movwf	___lwdiv@dividend
  2713  033F  118A  258D  118A   	fcall	___lwdiv
  2714  0342  0874               	movf	?___lwdiv+1,w
  2715  0343  1283               	bcf	3,5	;RP0=0, select bank0
  2716  0344  1303               	bcf	3,6	;RP1=0, select bank0
  2717  0345  00A1               	movwf	intToString@number+1
  2718  0346  0873               	movf	?___lwdiv,w
  2719  0347  00A0               	movwf	intToString@number
  2720  0348                     l1596:
  2721                           
  2722                           ;main.c: 520:         }
  2723  0348  3001               	movlw	1
  2724  0349  00A5               	movwf	??_intToString
  2725  034A  0825               	movf	??_intToString,w
  2726  034B  07AE               	addwf	intToString@i,f
  2727  034C                     l1598:
  2728  034C  0830               	movf	intToString@digits_whole,w
  2729  034D  072F               	addwf	intToString@k,w
  2730  034E  00A5               	movwf	??_intToString
  2731  034F  01A6               	clrf	??_intToString+1
  2732  0350  0DA6               	rlf	??_intToString+1,f
  2733  0351  0826               	movf	??_intToString+1,w
  2734  0352  3A80               	xorlw	128
  2735  0353  3C80               	sublw	128
  2736  0354  1D03               	skipz
  2737  0355  2B58               	goto	u1075
  2738  0356  0825               	movf	??_intToString,w
  2739  0357  022E               	subwf	intToString@i,w
  2740  0358                     u1075:
  2741  0358  1C03               	skipc
  2742  0359  2B5B               	goto	u1071
  2743  035A  2B5C               	goto	u1070
  2744  035B                     u1071:
  2745  035B  2B15               	goto	l1592
  2746  035C                     u1070:
  2747  035C                     l1600:
  2748                           
  2749                           ;main.c: 521:         dest[digits_whole+digits_decimal + j + k] = '\0';
  2750  035C  1283               	bcf	3,5	;RP0=0, select bank0
  2751  035D  1303               	bcf	3,6	;RP1=0, select bank0
  2752  035E  082F               	movf	intToString@k,w
  2753  035F  0724               	addwf	intToString@dest,w
  2754  0360  00A5               	movwf	??_intToString
  2755  0361  082A               	movf	intToString@j,w
  2756  0362  0725               	addwf	??_intToString,w
  2757  0363  00A6               	movwf	??_intToString+1
  2758  0364  0830               	movf	intToString@digits_whole,w
  2759  0365  0726               	addwf	??_intToString+1,w
  2760  0366  00A7               	movwf	??_intToString+2
  2761  0367  082D               	movf	intToString@digits_decimal,w
  2762  0368  0727               	addwf	??_intToString+2,w
  2763  0369  00A8               	movwf	??_intToString+3
  2764  036A  0828               	movf	??_intToString+3,w
  2765  036B  0084               	movwf	4
  2766  036C  1383               	bcf	3,7	;select IRP bank0
  2767  036D  0180               	clrf	0
  2768  036E                     l172:
  2769  036E  0008               	return
  2770  036F                     __end_of_intToString:
  2771                           
  2772                           	psect	text10
  2773  066B                     __ptext10:	
  2774 ;; *************** function _numDigits *****************
  2775 ;; Defined at:
  2776 ;;		line 471 in file "main.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  num             2    3[COMMON] unsigned short 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      unsigned char 
  2783 ;; Registers used:
  2784 ;;		wreg
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2790 ;;      Params:         2       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0
  2793 ;;      Totals:         2       0       0       0       0
  2794 ;;Total ram usage:        2 bytes
  2795 ;; Hardware stack levels used: 1
  2796 ;; Hardware stack levels required when called: 1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_intToString
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           
  2805                           ;psect for function _numDigits
  2806  066B                     _numDigits:
  2807  066B                     l1342:	
  2808                           ;incstack = 0
  2809                           ; Regs used in _numDigits: [wreg]
  2810                           
  2811                           
  2812                           ;main.c: 472:     if (num < 10)
  2813  066B  3000               	movlw	0
  2814  066C  0274               	subwf	numDigits@num+1,w
  2815  066D  300A               	movlw	10
  2816  066E  1903               	skipnz
  2817  066F  0273               	subwf	numDigits@num,w
  2818  0670  1803               	skipnc
  2819  0671  2E73               	goto	u671
  2820  0672  2E74               	goto	u670
  2821  0673                     u671:
  2822  0673  2E76               	goto	l1350
  2823  0674                     u670:
  2824  0674                     l1344:
  2825                           
  2826                           ;main.c: 473:         return 1;
  2827  0674  3001               	movlw	1
  2828  0675  2E98               	goto	l159
  2829  0676                     l1350:
  2830  0676  3000               	movlw	0
  2831  0677  0274               	subwf	numDigits@num+1,w
  2832  0678  3064               	movlw	100
  2833  0679  1903               	skipnz
  2834  067A  0273               	subwf	numDigits@num,w
  2835  067B  1803               	skipnc
  2836  067C  2E7E               	goto	u681
  2837  067D  2E7F               	goto	u680
  2838  067E                     u681:
  2839  067E  2E81               	goto	l1358
  2840  067F                     u680:
  2841  067F                     l1352:
  2842                           
  2843                           ;main.c: 475:         return 2;
  2844  067F  3002               	movlw	2
  2845  0680  2E98               	goto	l159
  2846  0681                     l1358:
  2847  0681  3003               	movlw	3
  2848  0682  0274               	subwf	numDigits@num+1,w
  2849  0683  30E8               	movlw	232
  2850  0684  1903               	skipnz
  2851  0685  0273               	subwf	numDigits@num,w
  2852  0686  1803               	skipnc
  2853  0687  2E89               	goto	u691
  2854  0688  2E8A               	goto	u690
  2855  0689                     u691:
  2856  0689  2E8C               	goto	l1366
  2857  068A                     u690:
  2858  068A                     l1360:
  2859                           
  2860                           ;main.c: 477:         return 3;
  2861  068A  3003               	movlw	3
  2862  068B  2E98               	goto	l159
  2863  068C                     l1366:
  2864  068C  3027               	movlw	39
  2865  068D  0274               	subwf	numDigits@num+1,w
  2866  068E  3010               	movlw	16
  2867  068F  1903               	skipnz
  2868  0690  0273               	subwf	numDigits@num,w
  2869  0691  1803               	skipnc
  2870  0692  2E94               	goto	u701
  2871  0693  2E95               	goto	u700
  2872  0694                     u701:
  2873  0694  2E97               	goto	l1374
  2874  0695                     u700:
  2875  0695                     l1368:
  2876                           
  2877                           ;main.c: 479:         return 4;
  2878  0695  3004               	movlw	4
  2879  0696  2E98               	goto	l159
  2880  0697                     l1374:
  2881                           
  2882                           ;main.c: 481:         return 5;
  2883  0697  3005               	movlw	5
  2884  0698                     l159:
  2885  0698  0008               	return
  2886  0699                     __end_of_numDigits:
  2887                           
  2888                           	psect	text11
  2889  05D1                     __ptext11:	
  2890 ;; *************** function ___lwmod *****************
  2891 ;; Defined at:
  2892 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  divisor         2    3[COMMON] unsigned int 
  2895 ;;  dividend        2    5[COMMON] unsigned int 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  counter         1    8[COMMON] unsigned char 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  2    3[COMMON] unsigned int 
  2900 ;; Registers used:
  2901 ;;		wreg, status,2, status,0
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2907 ;;      Params:         4       0       0       0       0
  2908 ;;      Locals:         1       0       0       0       0
  2909 ;;      Temps:          1       0       0       0       0
  2910 ;;      Totals:         6       0       0       0       0
  2911 ;;Total ram usage:        6 bytes
  2912 ;; Hardware stack levels used: 1
  2913 ;; Hardware stack levels required when called: 1
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_intToString
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function ___lwmod
  2923  05D1                     ___lwmod:
  2924  05D1                     l1456:	
  2925                           ;incstack = 0
  2926                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2927                           
  2928  05D1  0873               	movf	___lwmod@divisor,w
  2929  05D2  0474               	iorwf	___lwmod@divisor+1,w
  2930  05D3  1903               	btfsc	3,2
  2931  05D4  2DD6               	goto	u891
  2932  05D5  2DD7               	goto	u890
  2933  05D6                     u891:
  2934  05D6  2E06               	goto	l1474
  2935  05D7                     u890:
  2936  05D7                     l1458:
  2937  05D7  01F8               	clrf	___lwmod@counter
  2938  05D8  0AF8               	incf	___lwmod@counter,f
  2939  05D9  2DE5               	goto	l1464
  2940  05DA                     l1460:
  2941  05DA  3001               	movlw	1
  2942  05DB                     u905:
  2943  05DB  1003               	clrc
  2944  05DC  0DF3               	rlf	___lwmod@divisor,f
  2945  05DD  0DF4               	rlf	___lwmod@divisor+1,f
  2946  05DE  3EFF               	addlw	-1
  2947  05DF  1D03               	skipz
  2948  05E0  2DDB               	goto	u905
  2949  05E1                     l1462:
  2950  05E1  3001               	movlw	1
  2951  05E2  00F7               	movwf	??___lwmod
  2952  05E3  0877               	movf	??___lwmod,w
  2953  05E4  07F8               	addwf	___lwmod@counter,f
  2954  05E5                     l1464:
  2955  05E5  1FF4               	btfss	___lwmod@divisor+1,7
  2956  05E6  2DE8               	goto	u911
  2957  05E7  2DE9               	goto	u910
  2958  05E8                     u911:
  2959  05E8  2DDA               	goto	l1460
  2960  05E9                     u910:
  2961  05E9                     l1466:
  2962  05E9  0874               	movf	___lwmod@divisor+1,w
  2963  05EA  0276               	subwf	___lwmod@dividend+1,w
  2964  05EB  1D03               	skipz
  2965  05EC  2DEF               	goto	u925
  2966  05ED  0873               	movf	___lwmod@divisor,w
  2967  05EE  0275               	subwf	___lwmod@dividend,w
  2968  05EF                     u925:
  2969  05EF  1C03               	skipc
  2970  05F0  2DF2               	goto	u921
  2971  05F1  2DF3               	goto	u920
  2972  05F2                     u921:
  2973  05F2  2DF9               	goto	l1470
  2974  05F3                     u920:
  2975  05F3                     l1468:
  2976  05F3  0873               	movf	___lwmod@divisor,w
  2977  05F4  02F5               	subwf	___lwmod@dividend,f
  2978  05F5  0874               	movf	___lwmod@divisor+1,w
  2979  05F6  1C03               	skipc
  2980  05F7  03F6               	decf	___lwmod@dividend+1,f
  2981  05F8  02F6               	subwf	___lwmod@dividend+1,f
  2982  05F9                     l1470:
  2983  05F9  3001               	movlw	1
  2984  05FA                     u935:
  2985  05FA  1003               	clrc
  2986  05FB  0CF4               	rrf	___lwmod@divisor+1,f
  2987  05FC  0CF3               	rrf	___lwmod@divisor,f
  2988  05FD  3EFF               	addlw	-1
  2989  05FE  1D03               	skipz
  2990  05FF  2DFA               	goto	u935
  2991  0600                     l1472:
  2992  0600  3001               	movlw	1
  2993  0601  02F8               	subwf	___lwmod@counter,f
  2994  0602  1D03               	btfss	3,2
  2995  0603  2E05               	goto	u941
  2996  0604  2E06               	goto	u940
  2997  0605                     u941:
  2998  0605  2DE9               	goto	l1466
  2999  0606                     u940:
  3000  0606                     l1474:
  3001  0606  0876               	movf	___lwmod@dividend+1,w
  3002  0607  00F4               	movwf	?___lwmod+1
  3003  0608  0875               	movf	___lwmod@dividend,w
  3004  0609  00F3               	movwf	?___lwmod
  3005  060A                     l548:
  3006  060A  0008               	return
  3007  060B                     __end_of___lwmod:
  3008                           
  3009                           	psect	text12
  3010  058D                     __ptext12:	
  3011 ;; *************** function ___lwdiv *****************
  3012 ;; Defined at:
  3013 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;  divisor         2    3[COMMON] unsigned int 
  3016 ;;  dividend        2    5[COMMON] unsigned int 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;  quotient        2    8[COMMON] unsigned int 
  3019 ;;  counter         1   10[COMMON] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2    3[COMMON] unsigned int 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3029 ;;      Params:         4       0       0       0       0
  3030 ;;      Locals:         3       0       0       0       0
  3031 ;;      Temps:          1       0       0       0       0
  3032 ;;      Totals:         8       0       0       0       0
  3033 ;;Total ram usage:        8 bytes
  3034 ;; Hardware stack levels used: 1
  3035 ;; Hardware stack levels required when called: 1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_intToString
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function ___lwdiv
  3045  058D                     ___lwdiv:
  3046  058D                     l1430:	
  3047                           ;incstack = 0
  3048                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3049                           
  3050  058D  01F8               	clrf	___lwdiv@quotient
  3051  058E  01F9               	clrf	___lwdiv@quotient+1
  3052  058F                     l1432:
  3053  058F  0873               	movf	___lwdiv@divisor,w
  3054  0590  0474               	iorwf	___lwdiv@divisor+1,w
  3055  0591  1903               	btfsc	3,2
  3056  0592  2D94               	goto	u821
  3057  0593  2D95               	goto	u820
  3058  0594                     u821:
  3059  0594  2DCC               	goto	l1452
  3060  0595                     u820:
  3061  0595                     l1434:
  3062  0595  01FA               	clrf	___lwdiv@counter
  3063  0596  0AFA               	incf	___lwdiv@counter,f
  3064  0597  2DA3               	goto	l1440
  3065  0598                     l1436:
  3066  0598  3001               	movlw	1
  3067  0599                     u835:
  3068  0599  1003               	clrc
  3069  059A  0DF3               	rlf	___lwdiv@divisor,f
  3070  059B  0DF4               	rlf	___lwdiv@divisor+1,f
  3071  059C  3EFF               	addlw	-1
  3072  059D  1D03               	skipz
  3073  059E  2D99               	goto	u835
  3074  059F                     l1438:
  3075  059F  3001               	movlw	1
  3076  05A0  00F7               	movwf	??___lwdiv
  3077  05A1  0877               	movf	??___lwdiv,w
  3078  05A2  07FA               	addwf	___lwdiv@counter,f
  3079  05A3                     l1440:
  3080  05A3  1FF4               	btfss	___lwdiv@divisor+1,7
  3081  05A4  2DA6               	goto	u841
  3082  05A5  2DA7               	goto	u840
  3083  05A6                     u841:
  3084  05A6  2D98               	goto	l1436
  3085  05A7                     u840:
  3086  05A7                     l1442:
  3087  05A7  3001               	movlw	1
  3088  05A8                     u855:
  3089  05A8  1003               	clrc
  3090  05A9  0DF8               	rlf	___lwdiv@quotient,f
  3091  05AA  0DF9               	rlf	___lwdiv@quotient+1,f
  3092  05AB  3EFF               	addlw	-1
  3093  05AC  1D03               	skipz
  3094  05AD  2DA8               	goto	u855
  3095  05AE  0874               	movf	___lwdiv@divisor+1,w
  3096  05AF  0276               	subwf	___lwdiv@dividend+1,w
  3097  05B0  1D03               	skipz
  3098  05B1  2DB4               	goto	u865
  3099  05B2  0873               	movf	___lwdiv@divisor,w
  3100  05B3  0275               	subwf	___lwdiv@dividend,w
  3101  05B4                     u865:
  3102  05B4  1C03               	skipc
  3103  05B5  2DB7               	goto	u861
  3104  05B6  2DB8               	goto	u860
  3105  05B7                     u861:
  3106  05B7  2DBF               	goto	l1448
  3107  05B8                     u860:
  3108  05B8                     l1444:
  3109  05B8  0873               	movf	___lwdiv@divisor,w
  3110  05B9  02F5               	subwf	___lwdiv@dividend,f
  3111  05BA  0874               	movf	___lwdiv@divisor+1,w
  3112  05BB  1C03               	skipc
  3113  05BC  03F6               	decf	___lwdiv@dividend+1,f
  3114  05BD  02F6               	subwf	___lwdiv@dividend+1,f
  3115  05BE                     l1446:
  3116  05BE  1478               	bsf	___lwdiv@quotient,0
  3117  05BF                     l1448:
  3118  05BF  3001               	movlw	1
  3119  05C0                     u875:
  3120  05C0  1003               	clrc
  3121  05C1  0CF4               	rrf	___lwdiv@divisor+1,f
  3122  05C2  0CF3               	rrf	___lwdiv@divisor,f
  3123  05C3  3EFF               	addlw	-1
  3124  05C4  1D03               	skipz
  3125  05C5  2DC0               	goto	u875
  3126  05C6                     l1450:
  3127  05C6  3001               	movlw	1
  3128  05C7  02FA               	subwf	___lwdiv@counter,f
  3129  05C8  1D03               	btfss	3,2
  3130  05C9  2DCB               	goto	u881
  3131  05CA  2DCC               	goto	u880
  3132  05CB                     u881:
  3133  05CB  2DA7               	goto	l1442
  3134  05CC                     u880:
  3135  05CC                     l1452:
  3136  05CC  0879               	movf	___lwdiv@quotient+1,w
  3137  05CD  00F4               	movwf	?___lwdiv+1
  3138  05CE  0878               	movf	___lwdiv@quotient,w
  3139  05CF  00F3               	movwf	?___lwdiv
  3140  05D0                     l538:
  3141  05D0  0008               	return
  3142  05D1                     __end_of___lwdiv:
  3143                           
  3144                           	psect	text13
  3145  03F4                     __ptext13:	
  3146 ;; *************** function _isr *****************
  3147 ;; Defined at:
  3148 ;;		line 306 in file "main.c"
  3149 ;; Parameters:    Size  Location     Type
  3150 ;;		None
  3151 ;; Auto vars:     Size  Location     Type
  3152 ;;		None
  3153 ;; Return value:  Size  Location     Type
  3154 ;;                  1    wreg      void 
  3155 ;; Registers used:
  3156 ;;		wreg, status,2, status,0
  3157 ;; Tracked objects:
  3158 ;;		On entry : 0/0
  3159 ;;		On exit  : 0/0
  3160 ;;		Unchanged: 0/0
  3161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3162 ;;      Params:         0       0       0       0       0
  3163 ;;      Locals:         0       0       0       0       0
  3164 ;;      Temps:          3       0       0       0       0
  3165 ;;      Totals:         3       0       0       0       0
  3166 ;;Total ram usage:        3 bytes
  3167 ;; Hardware stack levels used: 1
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		Interrupt level 1
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           
  3176                           ;psect for function _isr
  3177  03F4                     _isr:
  3178  03F4                     i1l1800:
  3179                           
  3180                           ;main.c: 308:     if (TMR0IE && TMR0IF) {
  3181  03F4  1E8B               	btfss	11,5	;volatile
  3182  03F5  2BF7               	goto	u111_21
  3183  03F6  2BF8               	goto	u111_20
  3184  03F7                     u111_21:
  3185  03F7  2C0D               	goto	i1l105
  3186  03F8                     u111_20:
  3187  03F8                     i1l1802:
  3188  03F8  1D0B               	btfss	11,2	;volatile
  3189  03F9  2BFB               	goto	u112_21
  3190  03FA  2BFC               	goto	u112_20
  3191  03FB                     u112_21:
  3192  03FB  2C0D               	goto	i1l105
  3193  03FC                     u112_20:
  3194  03FC                     i1l1804:
  3195                           
  3196                           ;main.c: 310:         if (ADCON0 & 0b00000100){
  3197  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  3198  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  3199  03FE  1D1F               	btfss	31,2	;volatile
  3200  03FF  2C01               	goto	u113_21
  3201  0400  2C02               	goto	u113_20
  3202  0401                     u113_21:
  3203  0401  2C08               	goto	i1l1810
  3204  0402                     u113_20:
  3205  0402                     i1l1806:
  3206                           
  3207                           ;main.c: 312:             ADCON0 &= 0b11111011;
  3208  0402  30FB               	movlw	251
  3209  0403  00F0               	movwf	??_isr
  3210  0404  0870               	movf	??_isr,w
  3211  0405  059F               	andwf	31,f	;volatile
  3212  0406                     i1l1808:
  3213                           
  3214                           ;main.c: 313:             PORTB |= 0b01000000;
  3215  0406  1706               	bsf	6,6	;volatile
  3216                           
  3217                           ;main.c: 315:         } else if ((ADCON0 & 0b00111000) == 0b00001000){
  3218  0407  2C0A               	goto	i1l1814
  3219  0408                     i1l1810:
  3220  0408  081F               	movf	31,w	;volatile
  3221  0409                     i1l1812:
  3222                           
  3223                           ;main.c: 316:             ADCON0 |= 0b00000100;
  3224  0409  151F               	bsf	31,2	;volatile
  3225  040A                     i1l1814:	
  3226                           ;main.c: 318:         } else {
  3227                           
  3228                           
  3229                           ;main.c: 322:         TMR0 = 0;
  3230  040A  0181               	clrf	1	;volatile
  3231  040B                     i1l1816:
  3232                           
  3233                           ;main.c: 323:         TMR0IF = 0;
  3234  040B  110B               	bcf	11,2	;volatile
  3235                           
  3236                           ;main.c: 325:     } else if (TMR1IE && TMR1IF) {
  3237  040C  2C6B               	goto	i1l120
  3238  040D                     i1l105:
  3239  040D  1683               	bsf	3,5	;RP0=1, select bank1
  3240  040E  1303               	bcf	3,6	;RP1=0, select bank1
  3241  040F  1C0C               	btfss	12,0	;volatile
  3242  0410  2C12               	goto	u114_21
  3243  0411  2C13               	goto	u114_20
  3244  0412                     u114_21:
  3245  0412  2C20               	goto	i1l111
  3246  0413                     u114_20:
  3247  0413                     i1l1818:
  3248  0413  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0414  1303               	bcf	3,6	;RP1=0, select bank0
  3250  0415  1C0C               	btfss	12,0	;volatile
  3251  0416  2C18               	goto	u115_21
  3252  0417  2C19               	goto	u115_20
  3253  0418                     u115_21:
  3254  0418  2C20               	goto	i1l111
  3255  0419                     u115_20:
  3256  0419                     i1l1820:
  3257                           
  3258                           ;main.c: 327:         events |= 0b00010000;
  3259  0419  163F               	bsf	_events,4	;volatile
  3260  041A                     i1l1822:
  3261                           
  3262                           ;main.c: 329:         TMR1H = 0x9E;
  3263  041A  309E               	movlw	158
  3264  041B  008F               	movwf	15	;volatile
  3265                           
  3266                           ;main.c: 330:         TMR1L = 0x40;
  3267  041C  3040               	movlw	64
  3268  041D  008E               	movwf	14	;volatile
  3269  041E                     i1l1824:
  3270                           
  3271                           ;main.c: 331:         TMR1IF = 0;
  3272  041E  100C               	bcf	12,0	;volatile
  3273                           
  3274                           ;main.c: 333:     } else if (ADIE && ADIF){
  3275  041F  2C6B               	goto	i1l120
  3276  0420                     i1l111:
  3277  0420  1683               	bsf	3,5	;RP0=1, select bank1
  3278  0421  1303               	bcf	3,6	;RP1=0, select bank1
  3279  0422  1F0C               	btfss	12,6	;volatile
  3280  0423  2C25               	goto	u116_21
  3281  0424  2C26               	goto	u116_20
  3282  0425                     u116_21:
  3283  0425  2C5F               	goto	i1l113
  3284  0426                     u116_20:
  3285  0426                     i1l1826:
  3286  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3287  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0428  1F0C               	btfss	12,6	;volatile
  3289  0429  2C2B               	goto	u117_21
  3290  042A  2C2C               	goto	u117_20
  3291  042B                     u117_21:
  3292  042B  2C5F               	goto	i1l113
  3293  042C                     u117_20:
  3294  042C                     i1l1828:
  3295                           
  3296                           ;main.c: 335:         if (ADCON0 & 0b00000100){
  3297  042C  1D1F               	btfss	31,2	;volatile
  3298  042D  2C2F               	goto	u118_21
  3299  042E  2C30               	goto	u118_20
  3300  042F                     u118_21:
  3301  042F  2C31               	goto	i1l1832
  3302  0430                     u118_20:
  3303  0430                     i1l1830:
  3304                           
  3305                           ;main.c: 337:             PORTB |= 0b01000000;
  3306  0430  1706               	bsf	6,6	;volatile
  3307  0431                     i1l1832:
  3308                           
  3309                           ;main.c: 341:         if ((ADCON0 & 0b00111000) == 0b00001000){
  3310  0431  3038               	movlw	56
  3311  0432  051F               	andwf	31,w	;volatile
  3312  0433  00F0               	movwf	??_isr
  3313  0434  3008               	movlw	8
  3314  0435  0670               	xorwf	??_isr,w
  3315  0436  1D03               	btfss	3,2
  3316  0437  2C39               	goto	u119_21
  3317  0438  2C3A               	goto	u119_20
  3318  0439                     u119_21:
  3319  0439  2C47               	goto	i1l1838
  3320  043A                     u119_20:
  3321  043A                     i1l1834:
  3322                           
  3323                           ;main.c: 342:             vbatt = (ADRESH << 8) | ADRESL;
  3324  043A  081E               	movf	30,w	;volatile
  3325  043B  00BE               	movwf	_vbatt+1	;volatile
  3326  043C  1683               	bsf	3,5	;RP0=1, select bank1
  3327  043D  1303               	bcf	3,6	;RP1=0, select bank1
  3328  043E  081E               	movf	30,w	;volatile
  3329  043F  1283               	bcf	3,5	;RP0=0, select bank0
  3330  0440  1303               	bcf	3,6	;RP1=0, select bank0
  3331  0441  00BD               	movwf	_vbatt	;volatile
  3332  0442                     i1l1836:
  3333                           
  3334                           ;main.c: 343:             ADCON0 &= 0b11000111;
  3335  0442  30C7               	movlw	199
  3336  0443  00F0               	movwf	??_isr
  3337  0444  0870               	movf	??_isr,w
  3338  0445  059F               	andwf	31,f	;volatile
  3339                           
  3340                           ;main.c: 345:         } else if ((ADCON0 & 0b00111000) == 0){
  3341  0446  2C5B               	goto	i1l1846
  3342  0447                     i1l1838:
  3343  0447  081F               	movf	31,w	;volatile
  3344  0448  3938               	andlw	56
  3345  0449  1D03               	btfss	3,2
  3346  044A  2C4C               	goto	u120_21
  3347  044B  2C4D               	goto	u120_20
  3348  044C                     u120_21:
  3349  044C  2C5B               	goto	i1l1846
  3350  044D                     u120_20:
  3351  044D                     i1l1840:
  3352                           
  3353                           ;main.c: 346:             hvfb = (ADRESH << 8) | ADRESL;
  3354  044D  081E               	movf	30,w	;volatile
  3355  044E  00BC               	movwf	_hvfb+1	;volatile
  3356  044F  1683               	bsf	3,5	;RP0=1, select bank1
  3357  0450  1303               	bcf	3,6	;RP1=0, select bank1
  3358  0451  081E               	movf	30,w	;volatile
  3359  0452  1283               	bcf	3,5	;RP0=0, select bank0
  3360  0453  1303               	bcf	3,6	;RP1=0, select bank0
  3361  0454  00BB               	movwf	_hvfb	;volatile
  3362  0455                     i1l1842:
  3363                           
  3364                           ;main.c: 347:             ADCON0 &= 0b11000111;
  3365  0455  30C7               	movlw	199
  3366  0456  00F0               	movwf	??_isr
  3367  0457  0870               	movf	??_isr,w
  3368  0458  059F               	andwf	31,f	;volatile
  3369  0459                     i1l1844:
  3370                           
  3371                           ;main.c: 348:             ADCON0 |= 0b00001000;
  3372  0459  159F               	bsf	31,3	;volatile
  3373  045A  0064               	clrwdt	;# 
  3374  045B                     i1l1846:
  3375                           
  3376                           ;main.c: 356:         ADIF = 0;
  3377  045B  1283               	bcf	3,5	;RP0=0, select bank0
  3378  045C  1303               	bcf	3,6	;RP1=0, select bank0
  3379  045D  130C               	bcf	12,6	;volatile
  3380                           
  3381                           ;main.c: 358:     } else if (RBIE && RBIF){
  3382  045E  2C6B               	goto	i1l120
  3383  045F                     i1l113:
  3384  045F  1D8B               	btfss	11,3	;volatile
  3385  0460  2C62               	goto	u121_21
  3386  0461  2C63               	goto	u121_20
  3387  0462                     u121_21:
  3388  0462  2C6B               	goto	i1l112
  3389  0463                     u121_20:
  3390  0463                     i1l1848:
  3391  0463  1C0B               	btfss	11,0	;volatile
  3392  0464  2C66               	goto	u122_21
  3393  0465  2C67               	goto	u122_20
  3394  0466                     u122_21:
  3395  0466  2C6B               	goto	i1l112
  3396  0467                     u122_20:
  3397  0467                     i1l1850:
  3398                           
  3399                           ;main.c: 360:         events |= 0b00100000;
  3400  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3401  0468  16BF               	bsf	_events,5	;volatile
  3402                           
  3403                           ;main.c: 362:         RBIF = 0;
  3404  0469  100B               	bcf	11,0	;volatile
  3405  046A  2C6B               	goto	i1l120
  3406  046B                     i1l112:
  3407  046B                     i1l120:
  3408  046B  0872               	movf	??_isr+2,w
  3409  046C  008A               	movwf	10
  3410  046D  0E71               	swapf	??_isr+1,w
  3411  046E  0083               	movwf	3
  3412  046F  0EFE               	swapf	btemp,f
  3413  0470  0E7E               	swapf	btemp,w
  3414  0471  0009               	retfie
  3415  0472                     __end_of_isr:
  3416  007E                     btemp	set	126	;btemp
  3417  007E                     wtemp0	set	126
  3418                           
  3419                           	psect	intentry
  3420  0004                     __pintentry:	
  3421                           ;incstack = 0
  3422                           ; Regs used in _isr: [wreg+status,2+status,0]
  3423                           
  3424  0004                     interrupt_function:
  3425  007E                     saved_w	set	btemp
  3426  0004  00FE               	movwf	btemp
  3427  0005  0E03               	swapf	3,w
  3428  0006  00F1               	movwf	??_isr+1
  3429  0007  080A               	movf	10,w
  3430  0008  00F2               	movwf	??_isr+2
  3431  0009  118A  2BF4         	ljmp	_isr
  3432                           
  3433                           	psect	config
  3434                           
  3435                           ;Config register CONFIG1 @ 0x2007
  3436                           ;	Oscillator Selection bits
  3437                           ;	FOSC = INTOSCIO, INTRC oscillator; port I/O function on both RA6/OSC2/CLKO pin and RA7
      +                          /OSC1/CLKI pin
  3438                           ;	Watchdog Timer Enable bit
  3439                           ;	WDTE = ON, WDT enabled
  3440                           ;	Power-up Timer Enable bit
  3441                           ;	PWRTE = ON, PWRT enabled
  3442                           ;	RA5/MCLR/VPP Pin Function Select bit
  3443                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital I/O, MCLR internally tied to VDD
  3444                           ;	Brown-out Reset Enable bit
  3445                           ;	BOREN = ON, BOR enabled
  3446                           ;	Low-Voltage Programming Enable bit
  3447                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3448                           ;	Data EE Memory Code Protection bit
  3449                           ;	CPD = OFF, Code protection off
  3450                           ;	Flash Program Memory Write Enable bits
  3451                           ;	WRT = OFF, Write protection off
  3452                           ;	In-Circuit Debugger Mode bit
  3453                           ;	DEBUG = 0x1, unprogrammed default
  3454                           ;	CCP1 Pin Selection bit
  3455                           ;	CCPMX = RB0, CCP1 function on RB0
  3456                           ;	Flash Program Memory Code Protection bit
  3457                           ;	CP = OFF, Code protection off
  3458  2007                     	org	8199
  3459  2007  3F54               	dw	16212
  3460                           
  3461                           ;Config register CONFIG2 @ 0x2008
  3462                           ;	Fail-Safe Clock Monitor Enable bit
  3463                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3464                           ;	Internal External Switchover bit
  3465                           ;	IESO = ON, Internal External Switchover mode enabled
  3466  2008                     	org	8200
  3467  2008  3FFF               	dw	16383

Data Sizes:
    Strings     34
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     27      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    intToString@dest	PTR unsigned char  size(1) Largest target is 6
		 -> main@numStr(BANK0[6]), 

    lcd_write_string@stringArray	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[8]), STR_3(CODE[5]), main@numStr(BANK0[6]), STR_2(CODE[5]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_lcd_write_byte
    _lcd_write_string->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_cursor->_lcd_write_byte
    _lcd_clear->_lcd_write_byte
    _lcd_write_byte->___awmod
    _intToString->___lwdiv

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_intToString
    _lcd_write_string->_lcd_write_byte
    _lcd_init->_lcd_write_byte
    _lcd_cursor->_lcd_write_byte
    _lcd_clear->_lcd_write_byte

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   35077
                                             17 BANK0     10    10      0
                        _intToString
                          _lcd_clear
                         _lcd_cursor
                           _lcd_init
                     _lcd_write_byte
                   _lcd_write_string
 ---------------------------------------------------------------------------------
 (1) _lcd_write_string                                     2     0      2    6445
                                              5 BANK0      2     0      2
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    6510
                                              5 BANK0      2     2      0
                     _lcd_write_byte
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           5     4      1    7379
                                              5 BANK0      5     4      1
                            ___awmod
                             ___bmul
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     752
                                              3 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0    5944
                                              5 BANK0      2     2      0
                     _lcd_write_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_write_byte                                       6     5      1    5944
                                             10 COMMON     1     0      1
                                              0 BANK0      5     5      0
                            ___awmod (ARG)
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_write_nibble                                     4     3      1     566
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _intToString                                         17    12      5    2706
                                              0 BANK0     17    12      5
                            ___lwdiv
                            ___lwmod
                          _numDigits
 ---------------------------------------------------------------------------------
 (2) _numDigits                                            2     0      2     316
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     463
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     618
                                              3 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _intToString
     ___lwdiv
     ___lwmod
     _numDigits
   _lcd_clear
     _lcd_write_byte
       ___awmod (ARG)
       _lcd_write_nibble (ARG)
   _lcd_cursor
     ___awmod
     ___bmul
     _lcd_write_byte
   _lcd_init
     _lcd_write_byte
     _lcd_write_nibble
   _lcd_write_byte
   _lcd_write_string
     _lcd_write_byte

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2B      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Aug 17 20:27:54 2021

                          pc 0002               ___bmul@product 0075                           fsr 0004  
                        l131 054A                          l140 03F3                          l133 058C  
                        l136 066A                          l128 04E5                          l146 03F3  
                        l155 06BC                          l172 036E                          l149 06E2  
                        l159 0698                          l432 053E                          l292 06D1  
                        l538 05D0                          l548 060A                          _PR2 0092  
                        u700 0695                          u701 0694                          u630 0548  
                        u710 06C3                          u631 0547                          u711 06C2  
                        u800 0530                          u720 06D0                          u801 052F  
                        u721 06CF                          u810 0535                          u730 04EB  
                        u811 0534                          u731 04EA                          u820 0595  
                        u740 04F6                          u821 0594                          u645 054E  
                        u741 04F5                          u910 05E9                          u670 0674  
                        u750 0501                          u911 05E8                          u671 0673  
                        u655 055F                          u751 0500                          u840 05A7  
                        u920 05F3                          u680 067F                          u841 05A6  
                        u921 05F2                          u905 05DB                          u681 067E  
                        u665 0643                          u690 068A                          u770 0513  
                        u835 0599                          u691 0689                          u771 0512  
                        u860 05B8                          u940 0606                          u780 051D  
                        u861 05B7                          u941 0605                          u925 05EF  
                        u781 051C                          u765 0505                          u950 06BC  
                        u855 05A8                          u935 05FA                          u951 06BB  
                        u880 05CC                          u960 0386                          u881 05CB  
                        u865 05B4                          u785 0519                          u961 0385  
                        u890 05D7                          u970 0393                          u875 05C0  
                        u891 05D6                          u795 0524                          u971 0392  
                        u980 0399                          u981 0398                          u990 03B5  
                        u991 03B4                          _isr 03F4                          fsr0 0004  
                        indf 0000                 ___awmod@sign 0079             lcd_cursor@column 0025  
                       l1320 0548                         l1400 04F2                         l1322 054B  
                       l1330 0640                         l1410 050B                         l1402 04F6  
                       l1324 0585                         l1316 0540                         l1332 064C  
                       l1420 052A                         l1412 050F                         l1404 04FB  
                       l1500 04D9                         l1430 058D                         l1350 0676  
                       l1342 066B                         l1326 0589                         l1318 0543  
                       l1334 0651                         l1414 0513                         l1406 0501  
                       l1422 0530                         l1502 04DE                         l1510 06A6  
                       l1440 05A3                         l1432 058F                         l1360 068A  
                       l1352 067F                         l1344 0674                         l1600 035C  
                       l1336 0659                         l1424 0535                         l1416 051D  
                       l1408 0504                         l1520 038D                         l1512 06AE  
                       l1450 05C6                         l1442 05A7                         l1434 0595  
                       l1338 0660                         l1426 053A                         l1418 0523  
                       l1530 03BB                         l1522 0393                         l1514 0372  
                       l1506 0699                         l1610 002A                         l1444 05B8  
                       l1436 0598                         l1452 05CC                         l1460 05DA  
                       l1540 06D2                         l1380 06BF                         l1532 03D1  
                       l1524 0399                         l1516 0380                         l1508 069A  
                       l1700 0116                         l1620 003B                         l1612 002C  
                       l1604 0017                         l1446 05BE                         l1438 059F  
                       l1470 05F9                         l1462 05E1                         l1374 0697  
                       l1366 068C                         l1358 0681                         l1550 027C  
                       l1542 06D7                         l1382 06C3                         l1534 03D7  
                       l1526 03AF                         l1518 0386                         l1710 0134  
                       l1702 011C                         l1630 004B                         l1622 003D  
                       l1614 002E                         l1606 0023                         l1448 05BF  
                       l1472 0600                         l1464 05E5                         l1456 05D1  
                       l1368 0695                         l1560 029F                         l1552 0282  
                       l1392 04E6                         l1384 06C7                         l1536 03DD  
                       l1528 03B5                         l1480 0477                         l1720 0152  
                       l1712 013A                         l1704 0122                         l1640 0059  
                       l1632 004D                         l1624 003F                         l1616 0032  
                       l1608 0026                         l1466 05E9                         l1458 05D7  
                       l1474 0606                         l1562 02A0                         l1554 0283  
                       l1546 0268                         l1394 04E7                         l1386 06C9  
                       l1378 06BE                         l1490 04A5                         l1482 0482  
                       l1730 0170                         l1722 0158                         l1714 0140  
                       l1706 0128                         l1650 0080                         l1642 0062  
                       l1634 0050                         l1626 0043                         l1618 0039  
                       l1468 05F3                         l1580 02F5                         l1564 02AF  
                       l1556 0290                         l1548 026B                         l1396 04EB  
                       l1388 06D0                         l1492 04B1                         l1484 048D  
                       l1740 018E                         l1732 0176                         l1724 015E  
                       l1716 0146                         l1708 012E                         l1660 009E  
                       l1652 0086                         l1644 006C                         l1636 0054  
                       l1628 0047                         l1590 0313                         l1582 02F9  
                       l1566 02B5                         l1574 02C0                         l1558 0293  
                       l1398 04F0                         l1494 04B6                         l1486 0492  
                       l1478 0472                         l1750 01AC                         l1742 0194  
                       l1734 017C                         l1726 0164                         l1718 014C  
                       l1670 00BC                         l1662 00A4                         l1654 008C  
                       l1646 0075                         l1638 0056                         l1592 0315  
                       l1584 02FF                         l1576 02C2                         l1568 02BC  
                       l1496 04C2                         l1488 049E                         l1760 01CA  
                       l1752 01B2                         l1744 019A                         l1736 0182  
                       l1728 016A                         l1680 00DA                         l1672 00C2  
                       l1664 00AA                         l1656 0092                         l1648 007A  
                       l1594 0337                         l1586 0304                         l1578 02E4  
                       l1498 04CD                         l1770 01E6                         l1762 01D8  
                       l1754 01B8                         l1746 01A0                         l1738 0188  
                       l1690 00F8                         l1682 00E0                         l1674 00C8  
                       l1666 00B0                         l1658 0098                         l1596 0348  
                       l1588 0311                         l1780 020D                         l1772 01EA  
                       l1764 01DB                         l1756 01BE                         l1748 01A6  
                       l1692 00FE                         l1684 00E6                         l1676 00CE  
                       l1668 00B6                         l1598 034C                         l1790 0243  
                       l1782 0216                         l1774 01EE                         l1766 01DE  
                       l1758 01C4                         l1694 0104                         l1686 00EC  
                       l1678 00D4                         l1792 024B                         l1784 0227  
                       l1776 01F3                         l1768 01E2                         l1696 010A  
                       l1688 00F2                         l1794 0259                         l1786 0230  
                       l1778 0204                         l1698 0110                         l1796 0261  
                       l1788 0239           intToString@divisor 0022                         _ADIE 0466  
                       _ADIF 0066                         ?_isr 0070                         STR_1 061B  
                       STR_2 0638                         STR_3 0633                         STR_4 062B  
                       u1000 03BB                         u1001 03BA                         u1010 03D7  
                       u1011 03D6                         u1020 03DD                         u1100 0261  
                       u1021 03DC                         u1101 0260                         u1030 0282  
                       u1031 0281                         u1040 02B5                         u1041 02B4  
                       u1050 02FF                         u1051 02FE                         u1060 0304  
                       u1061 0303                         u1070 035C                         u1071 035B  
                       u1080 01E2                         u1081 01E1                         u1090 01EA  
                       u1075 0358                         u1307 04BA                         u1091 01E9  
                       u1317 04C8                         u1237 01D2                         u1327 04D6  
                       u1247 0253                         u1337 04E2                         u1257 047D  
                       u1347 06DD                         u1267 048B                         u1357 065D  
                       u1277 0496                         u1367 0587                         u1287 04A2  
                       u1297 04AE                         _PIE1 008C                         _RBIE 005B  
                       _RBIF 0058                         _PIR1 000C                         _TMR0 0001  
     __end_of_lcd_write_byte 066B                         _main 0017                         _hvfb 003B  
                       btemp 007E                         start 000B            ___bmul@multiplier 0076  
                      ??_isr 0070                 ?_intToString 0020                        ?_main 0070  
            __end_of___awmod 053F                        _ANSEL 009B                        _T1CON 0010  
                      _T2CON 0012              __end_of___lwdiv 05D1                        i1l111 0420  
                      i1l112 046B                        i1l120 046B                        i1l113 045F  
                      i1l105 040D              __end_of___lwmod 060B                        _TMR1H 000F  
                      _TMR1L 000E                        _PORTA 0005                        _PORTB 0006  
                      _TRISA 0085                        _TRISB 0086             lcd_write_byte@RS 007A  
                      _vbatt 003D                        main@i 003A                        pclath 000A  
                      status 0003              ?_lcd_write_byte 007A                        wtemp0 007E  
            intToString@dest 0024                lcd_cursor@row 0028              __initialization 000D  
               __end_of_main 0268                       ??_main 0031                       _ADCON0 001F  
                     _ADCON1 009F           lcd_cursor@position 0029                       _ADRESH 001E  
                     _ADRESL 009E                       _CCPR1L 0015                       u111_20 03F8  
                     u111_21 03F7                       u120_20 044D                       u112_20 03FC  
                     u120_21 044C                       u112_21 03FB                       u121_20 0463  
                     u113_20 0402                       i1l1800 03F4                       u121_21 0462  
                     u113_21 0401                       i1l1810 0408                       i1l1802 03F8  
                     i1l1820 0419                       i1l1812 0409                       i1l1804 03FC  
                     i1l1830 0430                       i1l1822 041A                       i1l1814 040A  
                     i1l1806 0402                       u122_20 0467                       i1l1840 044D  
                     i1l1832 0431                       i1l1824 041E                       u114_20 0413  
                     i1l1816 040B                       i1l1808 0406                       u122_21 0466  
                     u114_21 0412                       i1l1850 0467                       i1l1842 0455  
                     i1l1834 043A                       i1l1826 0426                       i1l1818 0413  
                     i1l1844 0459                       i1l1836 0442                       i1l1828 042C  
                     i1l1846 045B                       i1l1838 0447                       i1l1848 0463  
                     u115_20 0419                       u115_21 0418                       u116_20 0426  
                     u116_21 0425                       u117_20 042C                       u117_21 042B  
                     u118_20 0430                       u118_21 042F                       u119_20 043A  
                     u119_21 0439                       _INTCON 000B                       _OSCCON 008F  
                     _TMR0IE 005D                       _TMR0IF 005A                       _TMR1IE 0460  
                     _TMR1IF 0060                       _WDTCON 0105             __end_of_lcd_init 04E6  
                     ___bmul 06BD                    ??___awmod 0077     __end_of_lcd_write_nibble 058D  
                  ??___lwdiv 0077                    ??___lwmod 0077                       _events 003F  
            ___awmod@divisor 0073     __end_of_lcd_write_string 06BD              ___awmod@counter 0078  
                     saved_w 007E      __end_of__initialization 0014          ___bmul@multiplicand 0073  
    intToString@digits_whole 0030               __pcstackCOMMON 0070         __size_of_intToString 0107  
         __size_of_lcd_clear 0011                   __pbssBANK0 003B  lcd_write_string@stringArray 0025  
  lcd_write_byte@lowerNibble 0023                   __pmaintext 0017                      ?___bmul 0073  
                 __pintentry 0004           __size_of_numDigits 002E                      _CCP1CON 0017  
                 _lcd_cursor 036F             ??_lcd_write_byte 0020                    ?_lcd_init 0070  
                 __stringtab 060B                 intToString@i 002E                 intToString@j 002A  
               intToString@k 002F            __end_of_lcd_clear 06E3              __size_of___bmul 0015  
                    ___awmod 04E6                      ___lwdiv 058D                      ___lwmod 05D1  
                    __ptext1 0699                      __ptext2 0472                      __ptext3 036F  
                    __ptext4 06BD                      __ptext5 04E6                      __ptext6 06D2  
                    __ptext7 063D                      __ptext8 053F                      __ptext9 0268  
               __size_of_isr 007E             ___awmod@dividend 0075           lcd_write_nibble@RS 0073  
                 ??_lcd_init 0025         end_of_initialization 0014            __end_of_numDigits 0699  
  lcd_write_byte@upperNibble 0022            ?_lcd_write_nibble 0073                    _PORTAbits 0005  
                  _PORTBbits 0006           ??_lcd_write_nibble 0074            ?_lcd_write_string 0025  
         ??_lcd_write_string 007B                  ?_lcd_cursor 0025                   main@numStr 0034  
          intToString@number 0020               __end_of___bmul 06D2          start_initialization 000D  
                __end_of_isr 0472                     ??___bmul 0074          __size_of_lcd_cursor 0085  
              ??_intToString 0025    intToString@digits_decimal 002D                    ___latbits 0001  
              __pcstackBANK0 0020            __size_of_lcd_init 0074             ___lwdiv@dividend 0075  
                   ?___awmod 0073                     ?___lwdiv 0073                     ?___lwmod 0073  
                  _lcd_clear 06D2                    __pstrings 060B          __end_of_intToString 036F  
           ___lwdiv@quotient 0078         lcd_write_byte@byteIn 0024            interrupt_function 0004  
               numDigits@num 0073                    _numDigits 066B                   ?_lcd_clear 0070  
                __stringbase 061A                 ??_lcd_cursor 0026    __size_of_lcd_write_nibble 004E  
  __size_of_lcd_write_string 0024                   ?_numDigits 0073      __size_of_lcd_write_byte 002E  
         __end_of_lcd_cursor 03F4             __size_of___awmod 0059                  _intToString 0268  
           __size_of___lwdiv 0044             __size_of___lwmod 003A           __end_of__stringtab 061B  
            ___lwdiv@divisor 0073              ___lwdiv@counter 007A                     __ptext10 066B  
                   __ptext11 05D1                     __ptext12 058D                     __ptext13 03F4  
                   _lcd_init 0472                __size_of_main 0251     intToString@whole_portion 002B  
                ??_lcd_clear 0025       lcd_write_nibble@byteIn 0076                     intlevel1 0000  
           ___lwmod@dividend 0075                  ??_numDigits 0075                    stringcode 0615  
                 _OPTION_REG 0081              ___lwmod@divisor 0073              ___lwmod@counter 0078  
                   stringdir 0615                     stringtab 060B             _lcd_write_nibble 053F  
           _lcd_write_string 0699               _lcd_write_byte 063D  
